
PWM_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047ac  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  20000000  000047ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200ac  2**0
                  CONTENTS
  4 .bss          00000244  200000ac  00004858  000200ac  2**2
                  ALLOC
  5 .stack        00008000  200002f0  00004a9c  000200ac  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001e424  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002de6  00000000  00000000  0003e557  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006a48  00000000  00000000  0004133d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cd0  00000000  00000000  00047d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b60  00000000  00000000  00048a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a48a  00000000  00000000  000495b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012717  00000000  00000000  00073a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e623b  00000000  00000000  00086156  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000335c  00000000  00000000  0016c394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 82 00 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     ... ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      cc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	cd 28 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .(..}...}...}...
     104:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     114:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     124:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }...............
	...
     180:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     190:	00 00 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     ....}...}...}...
     1a0:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b0:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c0:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d0:	7d 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     }...............
	...
     1ec:	41 36 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     A6..}...}...}...
	...
     20c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     21c:	b9 33 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .3..}...}...}...
     22c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     23c:	7d 03 00 00 00 00 00 00 7d 03 00 00 7d 03 00 00     }.......}...}...
     24c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     25c:	7d 03 00 00 00 00 00 00                             }.......

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000ac 	.word	0x200000ac
     280:	00000000 	.word	0x00000000
     284:	000047ac 	.word	0x000047ac

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000047ac 	.word	0x000047ac
     2c4:	200000b0 	.word	0x200000b0
     2c8:	000047ac 	.word	0x000047ac
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000ea9 	.word	0x00000ea9

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	000047ac 	.word	0x000047ac
     35c:	20000000 	.word	0x20000000
     360:	200000ac 	.word	0x200000ac
     364:	200000ac 	.word	0x200000ac
     368:	200002f0 	.word	0x200002f0
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	0000457d 	.word	0x0000457d
     378:	000037e5 	.word	0x000037e5

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	691b      	ldr	r3, [r3, #16]
     3b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	691b      	ldr	r3, [r3, #16]
     3d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	695b      	ldr	r3, [r3, #20]
     3f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     410:	687b      	ldr	r3, [r7, #4]
     412:	695b      	ldr	r3, [r3, #20]
     414:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     418:	687b      	ldr	r3, [r7, #4]
     41a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     428:	b480      	push	{r7}
     42a:	b083      	sub	sp, #12
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     430:	687b      	ldr	r3, [r7, #4]
     432:	695b      	ldr	r3, [r3, #20]
     434:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     438:	687b      	ldr	r3, [r7, #4]
     43a:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43c:	bf00      	nop
     43e:	370c      	adds	r7, #12
     440:	46bd      	mov	sp, r7
     442:	f85d 7b04 	ldr.w	r7, [sp], #4
     446:	4770      	bx	lr

00000448 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     448:	b480      	push	{r7}
     44a:	b083      	sub	sp, #12
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     450:	687b      	ldr	r3, [r7, #4]
     452:	699b      	ldr	r3, [r3, #24]
     454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     458:	687b      	ldr	r3, [r7, #4]
     45a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45c:	bf00      	nop
     45e:	370c      	adds	r7, #12
     460:	46bd      	mov	sp, r7
     462:	f85d 7b04 	ldr.w	r7, [sp], #4
     466:	4770      	bx	lr

00000468 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     468:	b480      	push	{r7}
     46a:	b083      	sub	sp, #12
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     470:	687b      	ldr	r3, [r7, #4]
     472:	699b      	ldr	r3, [r3, #24]
     474:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     478:	687b      	ldr	r3, [r7, #4]
     47a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47c:	bf00      	nop
     47e:	370c      	adds	r7, #12
     480:	46bd      	mov	sp, r7
     482:	f85d 7b04 	ldr.w	r7, [sp], #4
     486:	4770      	bx	lr

00000488 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     488:	b480      	push	{r7}
     48a:	b083      	sub	sp, #12
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     490:	687b      	ldr	r3, [r7, #4]
     492:	69db      	ldr	r3, [r3, #28]
     494:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     498:	687b      	ldr	r3, [r7, #4]
     49a:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     49c:	bf00      	nop
     49e:	370c      	adds	r7, #12
     4a0:	46bd      	mov	sp, r7
     4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a6:	4770      	bx	lr

000004a8 <hri_mclk_set_APBCMASK_CCL_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_QSPI;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_CCL_bit(const void *const hw)
{
     4a8:	b480      	push	{r7}
     4aa:	b083      	sub	sp, #12
     4ac:	af00      	add	r7, sp, #0
     4ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_CCL;
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	69db      	ldr	r3, [r3, #28]
     4b4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4bc:	bf00      	nop
     4be:	370c      	adds	r7, #12
     4c0:	46bd      	mov	sp, r7
     4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c6:	4770      	bx	lr

000004c8 <hri_mclk_set_APBDMASK_ADC0_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC7;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
     4c8:	b480      	push	{r7}
     4ca:	b083      	sub	sp, #12
     4cc:	af00      	add	r7, sp, #0
     4ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	6a1b      	ldr	r3, [r3, #32]
     4d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4dc:	bf00      	nop
     4de:	370c      	adds	r7, #12
     4e0:	46bd      	mov	sp, r7
     4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e6:	4770      	bx	lr

000004e8 <hri_mclk_set_APBDMASK_ADC1_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_ADC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     4f0:	687b      	ldr	r3, [r7, #4]
     4f2:	6a1b      	ldr	r3, [r3, #32]
     4f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4fc:	bf00      	nop
     4fe:	370c      	adds	r7, #12
     500:	46bd      	mov	sp, r7
     502:	f85d 7b04 	ldr.w	r7, [sp], #4
     506:	4770      	bx	lr

00000508 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     508:	b480      	push	{r7}
     50a:	b085      	sub	sp, #20
     50c:	af00      	add	r7, sp, #0
     50e:	60f8      	str	r0, [r7, #12]
     510:	460b      	mov	r3, r1
     512:	607a      	str	r2, [r7, #4]
     514:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     516:	7afb      	ldrb	r3, [r7, #11]
     518:	68fa      	ldr	r2, [r7, #12]
     51a:	01db      	lsls	r3, r3, #7
     51c:	4413      	add	r3, r2
     51e:	3308      	adds	r3, #8
     520:	687a      	ldr	r2, [r7, #4]
     522:	601a      	str	r2, [r3, #0]
}
     524:	bf00      	nop
     526:	3714      	adds	r7, #20
     528:	46bd      	mov	sp, r7
     52a:	f85d 7b04 	ldr.w	r7, [sp], #4
     52e:	4770      	bx	lr

00000530 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     530:	b480      	push	{r7}
     532:	b085      	sub	sp, #20
     534:	af00      	add	r7, sp, #0
     536:	60f8      	str	r0, [r7, #12]
     538:	460b      	mov	r3, r1
     53a:	607a      	str	r2, [r7, #4]
     53c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     53e:	7afb      	ldrb	r3, [r7, #11]
     540:	68fa      	ldr	r2, [r7, #12]
     542:	01db      	lsls	r3, r3, #7
     544:	4413      	add	r3, r2
     546:	3304      	adds	r3, #4
     548:	687a      	ldr	r2, [r7, #4]
     54a:	601a      	str	r2, [r3, #0]
}
     54c:	bf00      	nop
     54e:	3714      	adds	r7, #20
     550:	46bd      	mov	sp, r7
     552:	f85d 7b04 	ldr.w	r7, [sp], #4
     556:	4770      	bx	lr

00000558 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     558:	b480      	push	{r7}
     55a:	b085      	sub	sp, #20
     55c:	af00      	add	r7, sp, #0
     55e:	60f8      	str	r0, [r7, #12]
     560:	460b      	mov	r3, r1
     562:	607a      	str	r2, [r7, #4]
     564:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     566:	7afb      	ldrb	r3, [r7, #11]
     568:	68fa      	ldr	r2, [r7, #12]
     56a:	01db      	lsls	r3, r3, #7
     56c:	4413      	add	r3, r2
     56e:	3318      	adds	r3, #24
     570:	687a      	ldr	r2, [r7, #4]
     572:	601a      	str	r2, [r3, #0]
}
     574:	bf00      	nop
     576:	3714      	adds	r7, #20
     578:	46bd      	mov	sp, r7
     57a:	f85d 7b04 	ldr.w	r7, [sp], #4
     57e:	4770      	bx	lr

00000580 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     580:	b480      	push	{r7}
     582:	b085      	sub	sp, #20
     584:	af00      	add	r7, sp, #0
     586:	60f8      	str	r0, [r7, #12]
     588:	460b      	mov	r3, r1
     58a:	607a      	str	r2, [r7, #4]
     58c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     58e:	7afb      	ldrb	r3, [r7, #11]
     590:	68fa      	ldr	r2, [r7, #12]
     592:	01db      	lsls	r3, r3, #7
     594:	4413      	add	r3, r2
     596:	3314      	adds	r3, #20
     598:	687a      	ldr	r2, [r7, #4]
     59a:	601a      	str	r2, [r3, #0]
}
     59c:	bf00      	nop
     59e:	3714      	adds	r7, #20
     5a0:	46bd      	mov	sp, r7
     5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a6:	4770      	bx	lr

000005a8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     5a8:	b480      	push	{r7}
     5aa:	b085      	sub	sp, #20
     5ac:	af00      	add	r7, sp, #0
     5ae:	6078      	str	r0, [r7, #4]
     5b0:	4608      	mov	r0, r1
     5b2:	4611      	mov	r1, r2
     5b4:	461a      	mov	r2, r3
     5b6:	4603      	mov	r3, r0
     5b8:	70fb      	strb	r3, [r7, #3]
     5ba:	460b      	mov	r3, r1
     5bc:	70bb      	strb	r3, [r7, #2]
     5be:	4613      	mov	r3, r2
     5c0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	78fa      	ldrb	r2, [r7, #3]
     5c4:	78bb      	ldrb	r3, [r7, #2]
     5c6:	6879      	ldr	r1, [r7, #4]
     5c8:	01d2      	lsls	r2, r2, #7
     5ca:	440a      	add	r2, r1
     5cc:	4413      	add	r3, r2
     5ce:	3330      	adds	r3, #48	; 0x30
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5d4:	7bfb      	ldrb	r3, [r7, #15]
     5d6:	f023 030f 	bic.w	r3, r3, #15
     5da:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     5dc:	787b      	ldrb	r3, [r7, #1]
     5de:	f003 030f 	and.w	r3, r3, #15
     5e2:	b2da      	uxtb	r2, r3
     5e4:	7bfb      	ldrb	r3, [r7, #15]
     5e6:	4313      	orrs	r3, r2
     5e8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ea:	78fa      	ldrb	r2, [r7, #3]
     5ec:	78bb      	ldrb	r3, [r7, #2]
     5ee:	6879      	ldr	r1, [r7, #4]
     5f0:	01d2      	lsls	r2, r2, #7
     5f2:	440a      	add	r2, r1
     5f4:	4413      	add	r3, r2
     5f6:	3330      	adds	r3, #48	; 0x30
     5f8:	7bfa      	ldrb	r2, [r7, #15]
     5fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5fc:	bf00      	nop
     5fe:	3714      	adds	r7, #20
     600:	46bd      	mov	sp, r7
     602:	f85d 7b04 	ldr.w	r7, [sp], #4
     606:	4770      	bx	lr

00000608 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     608:	b480      	push	{r7}
     60a:	b085      	sub	sp, #20
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
     610:	4608      	mov	r0, r1
     612:	4611      	mov	r1, r2
     614:	461a      	mov	r2, r3
     616:	4603      	mov	r3, r0
     618:	70fb      	strb	r3, [r7, #3]
     61a:	460b      	mov	r3, r1
     61c:	70bb      	strb	r3, [r7, #2]
     61e:	4613      	mov	r3, r2
     620:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     622:	78fa      	ldrb	r2, [r7, #3]
     624:	78bb      	ldrb	r3, [r7, #2]
     626:	6879      	ldr	r1, [r7, #4]
     628:	01d2      	lsls	r2, r2, #7
     62a:	440a      	add	r2, r1
     62c:	4413      	add	r3, r2
     62e:	3330      	adds	r3, #48	; 0x30
     630:	781b      	ldrb	r3, [r3, #0]
     632:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     634:	7bfb      	ldrb	r3, [r7, #15]
     636:	f003 030f 	and.w	r3, r3, #15
     63a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     63c:	787b      	ldrb	r3, [r7, #1]
     63e:	011b      	lsls	r3, r3, #4
     640:	b2da      	uxtb	r2, r3
     642:	7bfb      	ldrb	r3, [r7, #15]
     644:	4313      	orrs	r3, r2
     646:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     648:	78fa      	ldrb	r2, [r7, #3]
     64a:	78bb      	ldrb	r3, [r7, #2]
     64c:	6879      	ldr	r1, [r7, #4]
     64e:	01d2      	lsls	r2, r2, #7
     650:	440a      	add	r2, r1
     652:	4413      	add	r3, r2
     654:	3330      	adds	r3, #48	; 0x30
     656:	7bfa      	ldrb	r2, [r7, #15]
     658:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     65a:	bf00      	nop
     65c:	3714      	adds	r7, #20
     65e:	46bd      	mov	sp, r7
     660:	f85d 7b04 	ldr.w	r7, [sp], #4
     664:	4770      	bx	lr

00000666 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     666:	b480      	push	{r7}
     668:	b085      	sub	sp, #20
     66a:	af00      	add	r7, sp, #0
     66c:	6078      	str	r0, [r7, #4]
     66e:	4608      	mov	r0, r1
     670:	4611      	mov	r1, r2
     672:	461a      	mov	r2, r3
     674:	4603      	mov	r3, r0
     676:	70fb      	strb	r3, [r7, #3]
     678:	460b      	mov	r3, r1
     67a:	70bb      	strb	r3, [r7, #2]
     67c:	4613      	mov	r3, r2
     67e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     680:	78fa      	ldrb	r2, [r7, #3]
     682:	78bb      	ldrb	r3, [r7, #2]
     684:	6879      	ldr	r1, [r7, #4]
     686:	01d2      	lsls	r2, r2, #7
     688:	440a      	add	r2, r1
     68a:	4413      	add	r3, r2
     68c:	3340      	adds	r3, #64	; 0x40
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	7bfb      	ldrb	r3, [r7, #15]
     694:	f023 0301 	bic.w	r3, r3, #1
     698:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     69a:	787a      	ldrb	r2, [r7, #1]
     69c:	7bfb      	ldrb	r3, [r7, #15]
     69e:	4313      	orrs	r3, r2
     6a0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a2:	78fa      	ldrb	r2, [r7, #3]
     6a4:	78bb      	ldrb	r3, [r7, #2]
     6a6:	6879      	ldr	r1, [r7, #4]
     6a8:	01d2      	lsls	r2, r2, #7
     6aa:	440a      	add	r2, r1
     6ac:	4413      	add	r3, r2
     6ae:	3340      	adds	r3, #64	; 0x40
     6b0:	7bfa      	ldrb	r2, [r7, #15]
     6b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6b4:	bf00      	nop
     6b6:	3714      	adds	r7, #20
     6b8:	46bd      	mov	sp, r7
     6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     6be:	4770      	bx	lr

000006c0 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     6c0:	b490      	push	{r4, r7}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
     6c8:	460b      	mov	r3, r1
     6ca:	70fb      	strb	r3, [r7, #3]
     6cc:	4613      	mov	r3, r2
     6ce:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     6d0:	78fa      	ldrb	r2, [r7, #3]
     6d2:	78bb      	ldrb	r3, [r7, #2]
     6d4:	78f8      	ldrb	r0, [r7, #3]
     6d6:	78b9      	ldrb	r1, [r7, #2]
     6d8:	687c      	ldr	r4, [r7, #4]
     6da:	01c0      	lsls	r0, r0, #7
     6dc:	4420      	add	r0, r4
     6de:	4401      	add	r1, r0
     6e0:	3140      	adds	r1, #64	; 0x40
     6e2:	7809      	ldrb	r1, [r1, #0]
     6e4:	b2c9      	uxtb	r1, r1
     6e6:	f041 0104 	orr.w	r1, r1, #4
     6ea:	b2c8      	uxtb	r0, r1
     6ec:	6879      	ldr	r1, [r7, #4]
     6ee:	01d2      	lsls	r2, r2, #7
     6f0:	440a      	add	r2, r1
     6f2:	4413      	add	r3, r2
     6f4:	3340      	adds	r3, #64	; 0x40
     6f6:	4602      	mov	r2, r0
     6f8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6fa:	bf00      	nop
     6fc:	3708      	adds	r7, #8
     6fe:	46bd      	mov	sp, r7
     700:	bc90      	pop	{r4, r7}
     702:	4770      	bx	lr

00000704 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     704:	b490      	push	{r4, r7}
     706:	b082      	sub	sp, #8
     708:	af00      	add	r7, sp, #0
     70a:	6078      	str	r0, [r7, #4]
     70c:	460b      	mov	r3, r1
     70e:	70fb      	strb	r3, [r7, #3]
     710:	4613      	mov	r3, r2
     712:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     714:	78fa      	ldrb	r2, [r7, #3]
     716:	78bb      	ldrb	r3, [r7, #2]
     718:	78f8      	ldrb	r0, [r7, #3]
     71a:	78b9      	ldrb	r1, [r7, #2]
     71c:	687c      	ldr	r4, [r7, #4]
     71e:	01c0      	lsls	r0, r0, #7
     720:	4420      	add	r0, r4
     722:	4401      	add	r1, r0
     724:	3140      	adds	r1, #64	; 0x40
     726:	7809      	ldrb	r1, [r1, #0]
     728:	b2c9      	uxtb	r1, r1
     72a:	f021 0104 	bic.w	r1, r1, #4
     72e:	b2c8      	uxtb	r0, r1
     730:	6879      	ldr	r1, [r7, #4]
     732:	01d2      	lsls	r2, r2, #7
     734:	440a      	add	r2, r1
     736:	4413      	add	r3, r2
     738:	3340      	adds	r3, #64	; 0x40
     73a:	4602      	mov	r2, r0
     73c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     73e:	bf00      	nop
     740:	3708      	adds	r7, #8
     742:	46bd      	mov	sp, r7
     744:	bc90      	pop	{r4, r7}
     746:	4770      	bx	lr

00000748 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     748:	b480      	push	{r7}
     74a:	b085      	sub	sp, #20
     74c:	af00      	add	r7, sp, #0
     74e:	60f8      	str	r0, [r7, #12]
     750:	460b      	mov	r3, r1
     752:	607a      	str	r2, [r7, #4]
     754:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     756:	7afb      	ldrb	r3, [r7, #11]
     758:	68fa      	ldr	r2, [r7, #12]
     75a:	01db      	lsls	r3, r3, #7
     75c:	4413      	add	r3, r2
     75e:	3328      	adds	r3, #40	; 0x28
     760:	687a      	ldr	r2, [r7, #4]
     762:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     764:	bf00      	nop
     766:	3714      	adds	r7, #20
     768:	46bd      	mov	sp, r7
     76a:	f85d 7b04 	ldr.w	r7, [sp], #4
     76e:	4770      	bx	lr

00000770 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     770:	b580      	push	{r7, lr}
     772:	b082      	sub	sp, #8
     774:	af00      	add	r7, sp, #0
     776:	4603      	mov	r3, r0
     778:	6039      	str	r1, [r7, #0]
     77a:	71fb      	strb	r3, [r7, #7]
     77c:	4613      	mov	r3, r2
     77e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     780:	79bb      	ldrb	r3, [r7, #6]
     782:	2b01      	cmp	r3, #1
     784:	d01c      	beq.n	7c0 <_gpio_set_direction+0x50>
     786:	2b02      	cmp	r3, #2
     788:	d037      	beq.n	7fa <_gpio_set_direction+0x8a>
     78a:	2b00      	cmp	r3, #0
     78c:	d14e      	bne.n	82c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     78e:	79fb      	ldrb	r3, [r7, #7]
     790:	683a      	ldr	r2, [r7, #0]
     792:	4619      	mov	r1, r3
     794:	482a      	ldr	r0, [pc, #168]	; (840 <_gpio_set_direction+0xd0>)
     796:	4b2b      	ldr	r3, [pc, #172]	; (844 <_gpio_set_direction+0xd4>)
     798:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	b29b      	uxth	r3, r3
     79e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     7a2:	79fb      	ldrb	r3, [r7, #7]
     7a4:	4619      	mov	r1, r3
     7a6:	4826      	ldr	r0, [pc, #152]	; (840 <_gpio_set_direction+0xd0>)
     7a8:	4b27      	ldr	r3, [pc, #156]	; (848 <_gpio_set_direction+0xd8>)
     7aa:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     7b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     7b4:	79fb      	ldrb	r3, [r7, #7]
     7b6:	4619      	mov	r1, r3
     7b8:	4821      	ldr	r0, [pc, #132]	; (840 <_gpio_set_direction+0xd0>)
     7ba:	4b23      	ldr	r3, [pc, #140]	; (848 <_gpio_set_direction+0xd8>)
     7bc:	4798      	blx	r3
		break;
     7be:	e03a      	b.n	836 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     7c0:	79fb      	ldrb	r3, [r7, #7]
     7c2:	683a      	ldr	r2, [r7, #0]
     7c4:	4619      	mov	r1, r3
     7c6:	481e      	ldr	r0, [pc, #120]	; (840 <_gpio_set_direction+0xd0>)
     7c8:	4b1e      	ldr	r3, [pc, #120]	; (844 <_gpio_set_direction+0xd4>)
     7ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     7cc:	683b      	ldr	r3, [r7, #0]
     7ce:	b29b      	uxth	r3, r3
     7d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     7d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     7d8:	79f9      	ldrb	r1, [r7, #7]
     7da:	461a      	mov	r2, r3
     7dc:	4818      	ldr	r0, [pc, #96]	; (840 <_gpio_set_direction+0xd0>)
     7de:	4b1a      	ldr	r3, [pc, #104]	; (848 <_gpio_set_direction+0xd8>)
     7e0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     7e2:	683b      	ldr	r3, [r7, #0]
     7e4:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     7e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     7ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     7ee:	79f9      	ldrb	r1, [r7, #7]
     7f0:	461a      	mov	r2, r3
     7f2:	4813      	ldr	r0, [pc, #76]	; (840 <_gpio_set_direction+0xd0>)
     7f4:	4b14      	ldr	r3, [pc, #80]	; (848 <_gpio_set_direction+0xd8>)
     7f6:	4798      	blx	r3
		break;
     7f8:	e01d      	b.n	836 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     7fa:	79fb      	ldrb	r3, [r7, #7]
     7fc:	683a      	ldr	r2, [r7, #0]
     7fe:	4619      	mov	r1, r3
     800:	480f      	ldr	r0, [pc, #60]	; (840 <_gpio_set_direction+0xd0>)
     802:	4b12      	ldr	r3, [pc, #72]	; (84c <_gpio_set_direction+0xdc>)
     804:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     806:	683b      	ldr	r3, [r7, #0]
     808:	b29b      	uxth	r3, r3
     80a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     80e:	79fb      	ldrb	r3, [r7, #7]
     810:	4619      	mov	r1, r3
     812:	480b      	ldr	r0, [pc, #44]	; (840 <_gpio_set_direction+0xd0>)
     814:	4b0c      	ldr	r3, [pc, #48]	; (848 <_gpio_set_direction+0xd8>)
     816:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     818:	683b      	ldr	r3, [r7, #0]
     81a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     81c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     820:	79fb      	ldrb	r3, [r7, #7]
     822:	4619      	mov	r1, r3
     824:	4806      	ldr	r0, [pc, #24]	; (840 <_gpio_set_direction+0xd0>)
     826:	4b08      	ldr	r3, [pc, #32]	; (848 <_gpio_set_direction+0xd8>)
     828:	4798      	blx	r3
		break;
     82a:	e004      	b.n	836 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     82c:	2246      	movs	r2, #70	; 0x46
     82e:	4908      	ldr	r1, [pc, #32]	; (850 <_gpio_set_direction+0xe0>)
     830:	2000      	movs	r0, #0
     832:	4b08      	ldr	r3, [pc, #32]	; (854 <_gpio_set_direction+0xe4>)
     834:	4798      	blx	r3
	}
}
     836:	bf00      	nop
     838:	3708      	adds	r7, #8
     83a:	46bd      	mov	sp, r7
     83c:	bd80      	pop	{r7, pc}
     83e:	bf00      	nop
     840:	41008000 	.word	0x41008000
     844:	00000531 	.word	0x00000531
     848:	00000749 	.word	0x00000749
     84c:	00000509 	.word	0x00000509
     850:	000045c4 	.word	0x000045c4
     854:	00001161 	.word	0x00001161

00000858 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     858:	b580      	push	{r7, lr}
     85a:	b082      	sub	sp, #8
     85c:	af00      	add	r7, sp, #0
     85e:	4603      	mov	r3, r0
     860:	6039      	str	r1, [r7, #0]
     862:	71fb      	strb	r3, [r7, #7]
     864:	4613      	mov	r3, r2
     866:	71bb      	strb	r3, [r7, #6]
	if (level) {
     868:	79bb      	ldrb	r3, [r7, #6]
     86a:	2b00      	cmp	r3, #0
     86c:	d006      	beq.n	87c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     86e:	79fb      	ldrb	r3, [r7, #7]
     870:	683a      	ldr	r2, [r7, #0]
     872:	4619      	mov	r1, r3
     874:	4806      	ldr	r0, [pc, #24]	; (890 <_gpio_set_level+0x38>)
     876:	4b07      	ldr	r3, [pc, #28]	; (894 <_gpio_set_level+0x3c>)
     878:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     87a:	e005      	b.n	888 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     87c:	79fb      	ldrb	r3, [r7, #7]
     87e:	683a      	ldr	r2, [r7, #0]
     880:	4619      	mov	r1, r3
     882:	4803      	ldr	r0, [pc, #12]	; (890 <_gpio_set_level+0x38>)
     884:	4b04      	ldr	r3, [pc, #16]	; (898 <_gpio_set_level+0x40>)
     886:	4798      	blx	r3
}
     888:	bf00      	nop
     88a:	3708      	adds	r7, #8
     88c:	46bd      	mov	sp, r7
     88e:	bd80      	pop	{r7, pc}
     890:	41008000 	.word	0x41008000
     894:	00000559 	.word	0x00000559
     898:	00000581 	.word	0x00000581

0000089c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     89c:	b580      	push	{r7, lr}
     89e:	b082      	sub	sp, #8
     8a0:	af00      	add	r7, sp, #0
     8a2:	4603      	mov	r3, r0
     8a4:	71fb      	strb	r3, [r7, #7]
     8a6:	460b      	mov	r3, r1
     8a8:	71bb      	strb	r3, [r7, #6]
     8aa:	4613      	mov	r3, r2
     8ac:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     8ae:	797b      	ldrb	r3, [r7, #5]
     8b0:	2b01      	cmp	r3, #1
     8b2:	d00a      	beq.n	8ca <_gpio_set_pin_pull_mode+0x2e>
     8b4:	2b02      	cmp	r3, #2
     8b6:	d01f      	beq.n	8f8 <_gpio_set_pin_pull_mode+0x5c>
     8b8:	2b00      	cmp	r3, #0
     8ba:	d134      	bne.n	926 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     8bc:	79ba      	ldrb	r2, [r7, #6]
     8be:	79fb      	ldrb	r3, [r7, #7]
     8c0:	4619      	mov	r1, r3
     8c2:	481e      	ldr	r0, [pc, #120]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     8c4:	4b1e      	ldr	r3, [pc, #120]	; (940 <_gpio_set_pin_pull_mode+0xa4>)
     8c6:	4798      	blx	r3
		break;
     8c8:	e033      	b.n	932 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     8ca:	79bb      	ldrb	r3, [r7, #6]
     8cc:	2201      	movs	r2, #1
     8ce:	409a      	lsls	r2, r3
     8d0:	79fb      	ldrb	r3, [r7, #7]
     8d2:	4619      	mov	r1, r3
     8d4:	4819      	ldr	r0, [pc, #100]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     8d6:	4b1b      	ldr	r3, [pc, #108]	; (944 <_gpio_set_pin_pull_mode+0xa8>)
     8d8:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     8da:	79ba      	ldrb	r2, [r7, #6]
     8dc:	79fb      	ldrb	r3, [r7, #7]
     8de:	4619      	mov	r1, r3
     8e0:	4816      	ldr	r0, [pc, #88]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     8e2:	4b19      	ldr	r3, [pc, #100]	; (948 <_gpio_set_pin_pull_mode+0xac>)
     8e4:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     8e6:	79bb      	ldrb	r3, [r7, #6]
     8e8:	2201      	movs	r2, #1
     8ea:	409a      	lsls	r2, r3
     8ec:	79fb      	ldrb	r3, [r7, #7]
     8ee:	4619      	mov	r1, r3
     8f0:	4812      	ldr	r0, [pc, #72]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     8f2:	4b16      	ldr	r3, [pc, #88]	; (94c <_gpio_set_pin_pull_mode+0xb0>)
     8f4:	4798      	blx	r3
		break;
     8f6:	e01c      	b.n	932 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     8f8:	79bb      	ldrb	r3, [r7, #6]
     8fa:	2201      	movs	r2, #1
     8fc:	409a      	lsls	r2, r3
     8fe:	79fb      	ldrb	r3, [r7, #7]
     900:	4619      	mov	r1, r3
     902:	480e      	ldr	r0, [pc, #56]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     904:	4b0f      	ldr	r3, [pc, #60]	; (944 <_gpio_set_pin_pull_mode+0xa8>)
     906:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     908:	79ba      	ldrb	r2, [r7, #6]
     90a:	79fb      	ldrb	r3, [r7, #7]
     90c:	4619      	mov	r1, r3
     90e:	480b      	ldr	r0, [pc, #44]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     910:	4b0d      	ldr	r3, [pc, #52]	; (948 <_gpio_set_pin_pull_mode+0xac>)
     912:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     914:	79bb      	ldrb	r3, [r7, #6]
     916:	2201      	movs	r2, #1
     918:	409a      	lsls	r2, r3
     91a:	79fb      	ldrb	r3, [r7, #7]
     91c:	4619      	mov	r1, r3
     91e:	4807      	ldr	r0, [pc, #28]	; (93c <_gpio_set_pin_pull_mode+0xa0>)
     920:	4b0b      	ldr	r3, [pc, #44]	; (950 <_gpio_set_pin_pull_mode+0xb4>)
     922:	4798      	blx	r3
		break;
     924:	e005      	b.n	932 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     926:	2289      	movs	r2, #137	; 0x89
     928:	490a      	ldr	r1, [pc, #40]	; (954 <_gpio_set_pin_pull_mode+0xb8>)
     92a:	2000      	movs	r0, #0
     92c:	4b0a      	ldr	r3, [pc, #40]	; (958 <_gpio_set_pin_pull_mode+0xbc>)
     92e:	4798      	blx	r3
		break;
     930:	bf00      	nop
	}
}
     932:	bf00      	nop
     934:	3708      	adds	r7, #8
     936:	46bd      	mov	sp, r7
     938:	bd80      	pop	{r7, pc}
     93a:	bf00      	nop
     93c:	41008000 	.word	0x41008000
     940:	00000705 	.word	0x00000705
     944:	00000531 	.word	0x00000531
     948:	000006c1 	.word	0x000006c1
     94c:	00000559 	.word	0x00000559
     950:	00000581 	.word	0x00000581
     954:	000045c4 	.word	0x000045c4
     958:	00001161 	.word	0x00001161

0000095c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     95c:	b590      	push	{r4, r7, lr}
     95e:	b085      	sub	sp, #20
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
     964:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     966:	687b      	ldr	r3, [r7, #4]
     968:	095b      	lsrs	r3, r3, #5
     96a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	b2db      	uxtb	r3, r3
     970:	f003 031f 	and.w	r3, r3, #31
     974:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     976:	683b      	ldr	r3, [r7, #0]
     978:	f1b3 3fff 	cmp.w	r3, #4294967295
     97c:	d106      	bne.n	98c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     97e:	7bba      	ldrb	r2, [r7, #14]
     980:	7bf9      	ldrb	r1, [r7, #15]
     982:	2300      	movs	r3, #0
     984:	4812      	ldr	r0, [pc, #72]	; (9d0 <_gpio_set_pin_function+0x74>)
     986:	4c13      	ldr	r4, [pc, #76]	; (9d4 <_gpio_set_pin_function+0x78>)
     988:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     98a:	e01d      	b.n	9c8 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     98c:	7bba      	ldrb	r2, [r7, #14]
     98e:	7bf9      	ldrb	r1, [r7, #15]
     990:	2301      	movs	r3, #1
     992:	480f      	ldr	r0, [pc, #60]	; (9d0 <_gpio_set_pin_function+0x74>)
     994:	4c0f      	ldr	r4, [pc, #60]	; (9d4 <_gpio_set_pin_function+0x78>)
     996:	47a0      	blx	r4
		if (pin & 1) {
     998:	7bbb      	ldrb	r3, [r7, #14]
     99a:	f003 0301 	and.w	r3, r3, #1
     99e:	2b00      	cmp	r3, #0
     9a0:	d009      	beq.n	9b6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     9a2:	7bbb      	ldrb	r3, [r7, #14]
     9a4:	085b      	lsrs	r3, r3, #1
     9a6:	b2da      	uxtb	r2, r3
     9a8:	683b      	ldr	r3, [r7, #0]
     9aa:	b2db      	uxtb	r3, r3
     9ac:	7bf9      	ldrb	r1, [r7, #15]
     9ae:	4808      	ldr	r0, [pc, #32]	; (9d0 <_gpio_set_pin_function+0x74>)
     9b0:	4c09      	ldr	r4, [pc, #36]	; (9d8 <_gpio_set_pin_function+0x7c>)
     9b2:	47a0      	blx	r4
}
     9b4:	e008      	b.n	9c8 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     9b6:	7bbb      	ldrb	r3, [r7, #14]
     9b8:	085b      	lsrs	r3, r3, #1
     9ba:	b2da      	uxtb	r2, r3
     9bc:	683b      	ldr	r3, [r7, #0]
     9be:	b2db      	uxtb	r3, r3
     9c0:	7bf9      	ldrb	r1, [r7, #15]
     9c2:	4803      	ldr	r0, [pc, #12]	; (9d0 <_gpio_set_pin_function+0x74>)
     9c4:	4c05      	ldr	r4, [pc, #20]	; (9dc <_gpio_set_pin_function+0x80>)
     9c6:	47a0      	blx	r4
}
     9c8:	bf00      	nop
     9ca:	3714      	adds	r7, #20
     9cc:	46bd      	mov	sp, r7
     9ce:	bd90      	pop	{r4, r7, pc}
     9d0:	41008000 	.word	0x41008000
     9d4:	00000667 	.word	0x00000667
     9d8:	00000609 	.word	0x00000609
     9dc:	000005a9 	.word	0x000005a9

000009e0 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b082      	sub	sp, #8
     9e4:	af00      	add	r7, sp, #0
     9e6:	4603      	mov	r3, r0
     9e8:	460a      	mov	r2, r1
     9ea:	71fb      	strb	r3, [r7, #7]
     9ec:	4613      	mov	r3, r2
     9ee:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     9f0:	79fb      	ldrb	r3, [r7, #7]
     9f2:	095b      	lsrs	r3, r3, #5
     9f4:	b2d8      	uxtb	r0, r3
     9f6:	79fb      	ldrb	r3, [r7, #7]
     9f8:	f003 031f 	and.w	r3, r3, #31
     9fc:	b2db      	uxtb	r3, r3
     9fe:	79ba      	ldrb	r2, [r7, #6]
     a00:	4619      	mov	r1, r3
     a02:	4b03      	ldr	r3, [pc, #12]	; (a10 <gpio_set_pin_pull_mode+0x30>)
     a04:	4798      	blx	r3
}
     a06:	bf00      	nop
     a08:	3708      	adds	r7, #8
     a0a:	46bd      	mov	sp, r7
     a0c:	bd80      	pop	{r7, pc}
     a0e:	bf00      	nop
     a10:	0000089d 	.word	0x0000089d

00000a14 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     a14:	b580      	push	{r7, lr}
     a16:	b082      	sub	sp, #8
     a18:	af00      	add	r7, sp, #0
     a1a:	6078      	str	r0, [r7, #4]
     a1c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     a1e:	6839      	ldr	r1, [r7, #0]
     a20:	6878      	ldr	r0, [r7, #4]
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <gpio_set_pin_function+0x1c>)
     a24:	4798      	blx	r3
}
     a26:	bf00      	nop
     a28:	3708      	adds	r7, #8
     a2a:	46bd      	mov	sp, r7
     a2c:	bd80      	pop	{r7, pc}
     a2e:	bf00      	nop
     a30:	0000095d 	.word	0x0000095d

00000a34 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     a34:	b580      	push	{r7, lr}
     a36:	b082      	sub	sp, #8
     a38:	af00      	add	r7, sp, #0
     a3a:	4603      	mov	r3, r0
     a3c:	460a      	mov	r2, r1
     a3e:	71fb      	strb	r3, [r7, #7]
     a40:	4613      	mov	r3, r2
     a42:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     a44:	79fb      	ldrb	r3, [r7, #7]
     a46:	095b      	lsrs	r3, r3, #5
     a48:	b2d8      	uxtb	r0, r3
     a4a:	79fb      	ldrb	r3, [r7, #7]
     a4c:	f003 031f 	and.w	r3, r3, #31
     a50:	2201      	movs	r2, #1
     a52:	fa02 f303 	lsl.w	r3, r2, r3
     a56:	79ba      	ldrb	r2, [r7, #6]
     a58:	4619      	mov	r1, r3
     a5a:	4b03      	ldr	r3, [pc, #12]	; (a68 <gpio_set_pin_direction+0x34>)
     a5c:	4798      	blx	r3
}
     a5e:	bf00      	nop
     a60:	3708      	adds	r7, #8
     a62:	46bd      	mov	sp, r7
     a64:	bd80      	pop	{r7, pc}
     a66:	bf00      	nop
     a68:	00000771 	.word	0x00000771

00000a6c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     a6c:	b580      	push	{r7, lr}
     a6e:	b082      	sub	sp, #8
     a70:	af00      	add	r7, sp, #0
     a72:	4603      	mov	r3, r0
     a74:	460a      	mov	r2, r1
     a76:	71fb      	strb	r3, [r7, #7]
     a78:	4613      	mov	r3, r2
     a7a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     a7c:	79fb      	ldrb	r3, [r7, #7]
     a7e:	095b      	lsrs	r3, r3, #5
     a80:	b2d8      	uxtb	r0, r3
     a82:	79fb      	ldrb	r3, [r7, #7]
     a84:	f003 031f 	and.w	r3, r3, #31
     a88:	2201      	movs	r2, #1
     a8a:	fa02 f303 	lsl.w	r3, r2, r3
     a8e:	79ba      	ldrb	r2, [r7, #6]
     a90:	4619      	mov	r1, r3
     a92:	4b03      	ldr	r3, [pc, #12]	; (aa0 <gpio_set_pin_level+0x34>)
     a94:	4798      	blx	r3
}
     a96:	bf00      	nop
     a98:	3708      	adds	r7, #8
     a9a:	46bd      	mov	sp, r7
     a9c:	bd80      	pop	{r7, pc}
     a9e:	bf00      	nop
     aa0:	00000859 	.word	0x00000859

00000aa4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     aa4:	b580      	push	{r7, lr}
     aa6:	af00      	add	r7, sp, #0
	_init_chip();
     aa8:	4b01      	ldr	r3, [pc, #4]	; (ab0 <init_mcu+0xc>)
     aaa:	4798      	blx	r3
}
     aac:	bf00      	nop
     aae:	bd80      	pop	{r7, pc}
     ab0:	00001dc1 	.word	0x00001dc1

00000ab4 <custom_logic_init>:
/**
 *  \brief Initialize the custom logic hardware
 *  \return Initialization operation status
 */
static inline int32_t custom_logic_init(void)
{
     ab4:	b580      	push	{r7, lr}
     ab6:	af00      	add	r7, sp, #0
	return _custom_logic_init();
     ab8:	4b02      	ldr	r3, [pc, #8]	; (ac4 <custom_logic_init+0x10>)
     aba:	4798      	blx	r3
     abc:	4603      	mov	r3, r0
}
     abe:	4618      	mov	r0, r3
     ac0:	bd80      	pop	{r7, pc}
     ac2:	bf00      	nop
     ac4:	00001ced 	.word	0x00001ced

00000ac8 <CURR_A_TRQ_ADC_PORT_init>:
struct adc_sync_descriptor CURR_B_ADC;

struct qspi_sync_descriptor ECAT_QSPI;

void CURR_A_TRQ_ADC_PORT_init(void)
{
     ac8:	b580      	push	{r7, lr}
     aca:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA02, GPIO_DIRECTION_OFF);
     acc:	2100      	movs	r1, #0
     ace:	2002      	movs	r0, #2
     ad0:	4b07      	ldr	r3, [pc, #28]	; (af0 <CURR_A_TRQ_ADC_PORT_init+0x28>)
     ad2:	4798      	blx	r3

	gpio_set_pin_function(PA02, PINMUX_PA02B_ADC0_AIN0);
     ad4:	4907      	ldr	r1, [pc, #28]	; (af4 <CURR_A_TRQ_ADC_PORT_init+0x2c>)
     ad6:	2002      	movs	r0, #2
     ad8:	4b07      	ldr	r3, [pc, #28]	; (af8 <CURR_A_TRQ_ADC_PORT_init+0x30>)
     ada:	4798      	blx	r3

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_OFF);
     adc:	2100      	movs	r1, #0
     ade:	2003      	movs	r0, #3
     ae0:	4b03      	ldr	r3, [pc, #12]	; (af0 <CURR_A_TRQ_ADC_PORT_init+0x28>)
     ae2:	4798      	blx	r3

	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_AIN1);
     ae4:	4905      	ldr	r1, [pc, #20]	; (afc <CURR_A_TRQ_ADC_PORT_init+0x34>)
     ae6:	2003      	movs	r0, #3
     ae8:	4b03      	ldr	r3, [pc, #12]	; (af8 <CURR_A_TRQ_ADC_PORT_init+0x30>)
     aea:	4798      	blx	r3
}
     aec:	bf00      	nop
     aee:	bd80      	pop	{r7, pc}
     af0:	00000a35 	.word	0x00000a35
     af4:	00020001 	.word	0x00020001
     af8:	00000a15 	.word	0x00000a15
     afc:	00030001 	.word	0x00030001

00000b00 <CURR_A_TRQ_ADC_CLOCK_init>:

void CURR_A_TRQ_ADC_CLOCK_init(void)
{
     b00:	b580      	push	{r7, lr}
     b02:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
     b04:	4804      	ldr	r0, [pc, #16]	; (b18 <CURR_A_TRQ_ADC_CLOCK_init+0x18>)
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <CURR_A_TRQ_ADC_CLOCK_init+0x1c>)
     b08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b0a:	2240      	movs	r2, #64	; 0x40
     b0c:	2128      	movs	r1, #40	; 0x28
     b0e:	4804      	ldr	r0, [pc, #16]	; (b20 <CURR_A_TRQ_ADC_CLOCK_init+0x20>)
     b10:	4b04      	ldr	r3, [pc, #16]	; (b24 <CURR_A_TRQ_ADC_CLOCK_init+0x24>)
     b12:	4798      	blx	r3
}
     b14:	bf00      	nop
     b16:	bd80      	pop	{r7, pc}
     b18:	40000800 	.word	0x40000800
     b1c:	000004c9 	.word	0x000004c9
     b20:	40001c00 	.word	0x40001c00
     b24:	00000383 	.word	0x00000383

00000b28 <CURR_A_TRQ_ADC_init>:

void CURR_A_TRQ_ADC_init(void)
{
     b28:	b580      	push	{r7, lr}
     b2a:	af00      	add	r7, sp, #0
	CURR_A_TRQ_ADC_CLOCK_init();
     b2c:	4b05      	ldr	r3, [pc, #20]	; (b44 <CURR_A_TRQ_ADC_init+0x1c>)
     b2e:	4798      	blx	r3
	CURR_A_TRQ_ADC_PORT_init();
     b30:	4b05      	ldr	r3, [pc, #20]	; (b48 <CURR_A_TRQ_ADC_init+0x20>)
     b32:	4798      	blx	r3
	adc_sync_init(&CURR_A_TRQ_ADC, ADC0, (void *)NULL);
     b34:	2200      	movs	r2, #0
     b36:	4905      	ldr	r1, [pc, #20]	; (b4c <CURR_A_TRQ_ADC_init+0x24>)
     b38:	4805      	ldr	r0, [pc, #20]	; (b50 <CURR_A_TRQ_ADC_init+0x28>)
     b3a:	4b06      	ldr	r3, [pc, #24]	; (b54 <CURR_A_TRQ_ADC_init+0x2c>)
     b3c:	4798      	blx	r3
}
     b3e:	bf00      	nop
     b40:	bd80      	pop	{r7, pc}
     b42:	bf00      	nop
     b44:	00000b01 	.word	0x00000b01
     b48:	00000ac9 	.word	0x00000ac9
     b4c:	43001c00 	.word	0x43001c00
     b50:	200001a0 	.word	0x200001a0
     b54:	00000f99 	.word	0x00000f99

00000b58 <CURR_B_ADC_PORT_init>:

void CURR_B_ADC_PORT_init(void)
{
     b58:	b580      	push	{r7, lr}
     b5a:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_OFF);
     b5c:	2100      	movs	r1, #0
     b5e:	2028      	movs	r0, #40	; 0x28
     b60:	4b03      	ldr	r3, [pc, #12]	; (b70 <CURR_B_ADC_PORT_init+0x18>)
     b62:	4798      	blx	r3

	gpio_set_pin_function(PB08, PINMUX_PB08B_ADC1_AIN0);
     b64:	4903      	ldr	r1, [pc, #12]	; (b74 <CURR_B_ADC_PORT_init+0x1c>)
     b66:	2028      	movs	r0, #40	; 0x28
     b68:	4b03      	ldr	r3, [pc, #12]	; (b78 <CURR_B_ADC_PORT_init+0x20>)
     b6a:	4798      	blx	r3
}
     b6c:	bf00      	nop
     b6e:	bd80      	pop	{r7, pc}
     b70:	00000a35 	.word	0x00000a35
     b74:	00280001 	.word	0x00280001
     b78:	00000a15 	.word	0x00000a15

00000b7c <CURR_B_ADC_CLOCK_init>:

void CURR_B_ADC_CLOCK_init(void)
{
     b7c:	b580      	push	{r7, lr}
     b7e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
     b80:	4804      	ldr	r0, [pc, #16]	; (b94 <CURR_B_ADC_CLOCK_init+0x18>)
     b82:	4b05      	ldr	r3, [pc, #20]	; (b98 <CURR_B_ADC_CLOCK_init+0x1c>)
     b84:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b86:	2240      	movs	r2, #64	; 0x40
     b88:	2129      	movs	r1, #41	; 0x29
     b8a:	4804      	ldr	r0, [pc, #16]	; (b9c <CURR_B_ADC_CLOCK_init+0x20>)
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <CURR_B_ADC_CLOCK_init+0x24>)
     b8e:	4798      	blx	r3
}
     b90:	bf00      	nop
     b92:	bd80      	pop	{r7, pc}
     b94:	40000800 	.word	0x40000800
     b98:	000004e9 	.word	0x000004e9
     b9c:	40001c00 	.word	0x40001c00
     ba0:	00000383 	.word	0x00000383

00000ba4 <CURR_B_ADC_init>:

void CURR_B_ADC_init(void)
{
     ba4:	b580      	push	{r7, lr}
     ba6:	af00      	add	r7, sp, #0
	CURR_B_ADC_CLOCK_init();
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <CURR_B_ADC_init+0x1c>)
     baa:	4798      	blx	r3
	CURR_B_ADC_PORT_init();
     bac:	4b05      	ldr	r3, [pc, #20]	; (bc4 <CURR_B_ADC_init+0x20>)
     bae:	4798      	blx	r3
	adc_sync_init(&CURR_B_ADC, ADC1, (void *)NULL);
     bb0:	2200      	movs	r2, #0
     bb2:	4905      	ldr	r1, [pc, #20]	; (bc8 <CURR_B_ADC_init+0x24>)
     bb4:	4805      	ldr	r0, [pc, #20]	; (bcc <CURR_B_ADC_init+0x28>)
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <CURR_B_ADC_init+0x2c>)
     bb8:	4798      	blx	r3
}
     bba:	bf00      	nop
     bbc:	bd80      	pop	{r7, pc}
     bbe:	bf00      	nop
     bc0:	00000b7d 	.word	0x00000b7d
     bc4:	00000b59 	.word	0x00000b59
     bc8:	43002000 	.word	0x43002000
     bcc:	200001a4 	.word	0x200001a4
     bd0:	00000f99 	.word	0x00000f99

00000bd4 <Hall_CCL_PORT_init>:

void Hall_CCL_PORT_init(void)
{
     bd4:	b480      	push	{r7}
     bd6:	af00      	add	r7, sp, #0
}
     bd8:	bf00      	nop
     bda:	46bd      	mov	sp, r7
     bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     be0:	4770      	bx	lr
	...

00000be4 <Hall_CCL_CLOCK_init>:

void Hall_CCL_CLOCK_init(void)
{
     be4:	b580      	push	{r7, lr}
     be6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_CCL_bit(MCLK);
     be8:	4804      	ldr	r0, [pc, #16]	; (bfc <Hall_CCL_CLOCK_init+0x18>)
     bea:	4b05      	ldr	r3, [pc, #20]	; (c00 <Hall_CCL_CLOCK_init+0x1c>)
     bec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CCL_GCLK_ID, CONF_GCLK_CCL_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     bee:	2240      	movs	r2, #64	; 0x40
     bf0:	2121      	movs	r1, #33	; 0x21
     bf2:	4804      	ldr	r0, [pc, #16]	; (c04 <Hall_CCL_CLOCK_init+0x20>)
     bf4:	4b04      	ldr	r3, [pc, #16]	; (c08 <Hall_CCL_CLOCK_init+0x24>)
     bf6:	4798      	blx	r3
}
     bf8:	bf00      	nop
     bfa:	bd80      	pop	{r7, pc}
     bfc:	40000800 	.word	0x40000800
     c00:	000004a9 	.word	0x000004a9
     c04:	40001c00 	.word	0x40001c00
     c08:	00000383 	.word	0x00000383

00000c0c <Hall_CCL_init>:

void Hall_CCL_init(void)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	af00      	add	r7, sp, #0
	Hall_CCL_CLOCK_init();
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <Hall_CCL_init+0x14>)
     c12:	4798      	blx	r3
	custom_logic_init();
     c14:	4b03      	ldr	r3, [pc, #12]	; (c24 <Hall_CCL_init+0x18>)
     c16:	4798      	blx	r3
	Hall_CCL_PORT_init();
     c18:	4b03      	ldr	r3, [pc, #12]	; (c28 <Hall_CCL_init+0x1c>)
     c1a:	4798      	blx	r3
}
     c1c:	bf00      	nop
     c1e:	bd80      	pop	{r7, pc}
     c20:	00000be5 	.word	0x00000be5
     c24:	00000ab5 	.word	0x00000ab5
     c28:	00000bd5 	.word	0x00000bd5

00000c2c <EVESYS_init>:

void EVESYS_init(void)
{
     c2c:	b580      	push	{r7, lr}
     c2e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c30:	2240      	movs	r2, #64	; 0x40
     c32:	210b      	movs	r1, #11
     c34:	4807      	ldr	r0, [pc, #28]	; (c54 <EVESYS_init+0x28>)
     c36:	4b08      	ldr	r3, [pc, #32]	; (c58 <EVESYS_init+0x2c>)
     c38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c3a:	2240      	movs	r2, #64	; 0x40
     c3c:	210c      	movs	r1, #12
     c3e:	4805      	ldr	r0, [pc, #20]	; (c54 <EVESYS_init+0x28>)
     c40:	4b05      	ldr	r3, [pc, #20]	; (c58 <EVESYS_init+0x2c>)
     c42:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     c44:	4805      	ldr	r0, [pc, #20]	; (c5c <EVESYS_init+0x30>)
     c46:	4b06      	ldr	r3, [pc, #24]	; (c60 <EVESYS_init+0x34>)
     c48:	4798      	blx	r3

	event_system_init();
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <EVESYS_init+0x38>)
     c4c:	4798      	blx	r3
}
     c4e:	bf00      	nop
     c50:	bd80      	pop	{r7, pc}
     c52:	bf00      	nop
     c54:	40001c00 	.word	0x40001c00
     c58:	00000383 	.word	0x00000383
     c5c:	40000800 	.word	0x40000800
     c60:	00000449 	.word	0x00000449
     c64:	00001079 	.word	0x00001079

00000c68 <ECAT_QSPI_PORT_init>:

void ECAT_QSPI_PORT_init(void)
{
     c68:	b580      	push	{r7, lr}
     c6a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
     c6c:	2101      	movs	r1, #1
     c6e:	202b      	movs	r0, #43	; 0x2b
     c70:	4b1b      	ldr	r3, [pc, #108]	; (ce0 <ECAT_QSPI_PORT_init+0x78>)
     c72:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB11,
     c74:	2100      	movs	r1, #0
     c76:	202b      	movs	r0, #43	; 0x2b
     c78:	4b1a      	ldr	r3, [pc, #104]	; (ce4 <ECAT_QSPI_PORT_init+0x7c>)
     c7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB11, PINMUX_PB11H_QSPI_CS);
     c7c:	491a      	ldr	r1, [pc, #104]	; (ce8 <ECAT_QSPI_PORT_init+0x80>)
     c7e:	202b      	movs	r0, #43	; 0x2b
     c80:	4b1a      	ldr	r3, [pc, #104]	; (cec <ECAT_QSPI_PORT_init+0x84>)
     c82:	4798      	blx	r3

	gpio_set_pin_direction(PA08,
     c84:	2102      	movs	r1, #2
     c86:	2008      	movs	r0, #8
     c88:	4b15      	ldr	r3, [pc, #84]	; (ce0 <ECAT_QSPI_PORT_init+0x78>)
     c8a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA08,
     c8c:	2100      	movs	r1, #0
     c8e:	2008      	movs	r0, #8
     c90:	4b17      	ldr	r3, [pc, #92]	; (cf0 <ECAT_QSPI_PORT_init+0x88>)
     c92:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA08,
     c94:	2100      	movs	r1, #0
     c96:	2008      	movs	r0, #8
     c98:	4b12      	ldr	r3, [pc, #72]	; (ce4 <ECAT_QSPI_PORT_init+0x7c>)
     c9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08,
     c9c:	4915      	ldr	r1, [pc, #84]	; (cf4 <ECAT_QSPI_PORT_init+0x8c>)
     c9e:	2008      	movs	r0, #8
     ca0:	4b12      	ldr	r3, [pc, #72]	; (cec <ECAT_QSPI_PORT_init+0x84>)
     ca2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(PA09,
     ca4:	2102      	movs	r1, #2
     ca6:	2009      	movs	r0, #9
     ca8:	4b0d      	ldr	r3, [pc, #52]	; (ce0 <ECAT_QSPI_PORT_init+0x78>)
     caa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA09,
     cac:	2100      	movs	r1, #0
     cae:	2009      	movs	r0, #9
     cb0:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <ECAT_QSPI_PORT_init+0x88>)
     cb2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA09,
     cb4:	2100      	movs	r1, #0
     cb6:	2009      	movs	r0, #9
     cb8:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <ECAT_QSPI_PORT_init+0x7c>)
     cba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09,
     cbc:	490e      	ldr	r1, [pc, #56]	; (cf8 <ECAT_QSPI_PORT_init+0x90>)
     cbe:	2009      	movs	r0, #9
     cc0:	4b0a      	ldr	r3, [pc, #40]	; (cec <ECAT_QSPI_PORT_init+0x84>)
     cc2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	// Set pin direction to input
	gpio_set_pin_direction(PB10, GPIO_DIRECTION_IN);
     cc4:	2101      	movs	r1, #1
     cc6:	202a      	movs	r0, #42	; 0x2a
     cc8:	4b05      	ldr	r3, [pc, #20]	; (ce0 <ECAT_QSPI_PORT_init+0x78>)
     cca:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB10,
     ccc:	2100      	movs	r1, #0
     cce:	202a      	movs	r0, #42	; 0x2a
     cd0:	4b04      	ldr	r3, [pc, #16]	; (ce4 <ECAT_QSPI_PORT_init+0x7c>)
     cd2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
     cd4:	4909      	ldr	r1, [pc, #36]	; (cfc <ECAT_QSPI_PORT_init+0x94>)
     cd6:	202a      	movs	r0, #42	; 0x2a
     cd8:	4b04      	ldr	r3, [pc, #16]	; (cec <ECAT_QSPI_PORT_init+0x84>)
     cda:	4798      	blx	r3
}
     cdc:	bf00      	nop
     cde:	bd80      	pop	{r7, pc}
     ce0:	00000a35 	.word	0x00000a35
     ce4:	000009e1 	.word	0x000009e1
     ce8:	002b0007 	.word	0x002b0007
     cec:	00000a15 	.word	0x00000a15
     cf0:	00000a6d 	.word	0x00000a6d
     cf4:	00080007 	.word	0x00080007
     cf8:	00090007 	.word	0x00090007
     cfc:	002a0007 	.word	0x002a0007

00000d00 <ECAT_QSPI_CLOCK_init>:

void ECAT_QSPI_CLOCK_init(void)
{
     d00:	b580      	push	{r7, lr}
     d02:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     d04:	4805      	ldr	r0, [pc, #20]	; (d1c <ECAT_QSPI_CLOCK_init+0x1c>)
     d06:	4b06      	ldr	r3, [pc, #24]	; (d20 <ECAT_QSPI_CLOCK_init+0x20>)
     d08:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     d0a:	4804      	ldr	r0, [pc, #16]	; (d1c <ECAT_QSPI_CLOCK_init+0x1c>)
     d0c:	4b05      	ldr	r3, [pc, #20]	; (d24 <ECAT_QSPI_CLOCK_init+0x24>)
     d0e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     d10:	4802      	ldr	r0, [pc, #8]	; (d1c <ECAT_QSPI_CLOCK_init+0x1c>)
     d12:	4b05      	ldr	r3, [pc, #20]	; (d28 <ECAT_QSPI_CLOCK_init+0x28>)
     d14:	4798      	blx	r3
}
     d16:	bf00      	nop
     d18:	bd80      	pop	{r7, pc}
     d1a:	bf00      	nop
     d1c:	40000800 	.word	0x40000800
     d20:	000003a9 	.word	0x000003a9
     d24:	000003c9 	.word	0x000003c9
     d28:	00000489 	.word	0x00000489

00000d2c <ECAT_QSPI_init>:

void ECAT_QSPI_init(void)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	af00      	add	r7, sp, #0
	ECAT_QSPI_CLOCK_init();
     d30:	4b04      	ldr	r3, [pc, #16]	; (d44 <ECAT_QSPI_init+0x18>)
     d32:	4798      	blx	r3
	qspi_sync_init(&ECAT_QSPI, QSPI);
     d34:	4904      	ldr	r1, [pc, #16]	; (d48 <ECAT_QSPI_init+0x1c>)
     d36:	4805      	ldr	r0, [pc, #20]	; (d4c <ECAT_QSPI_init+0x20>)
     d38:	4b05      	ldr	r3, [pc, #20]	; (d50 <ECAT_QSPI_init+0x24>)
     d3a:	4798      	blx	r3
	ECAT_QSPI_PORT_init();
     d3c:	4b05      	ldr	r3, [pc, #20]	; (d54 <ECAT_QSPI_init+0x28>)
     d3e:	4798      	blx	r3
}
     d40:	bf00      	nop
     d42:	bd80      	pop	{r7, pc}
     d44:	00000d01 	.word	0x00000d01
     d48:	42003400 	.word	0x42003400
     d4c:	200001a8 	.word	0x200001a8
     d50:	0000108d 	.word	0x0000108d
     d54:	00000c69 	.word	0x00000c69

00000d58 <ENC_SPI_PORT_init>:

void ENC_SPI_PORT_init(void)
{
     d58:	b580      	push	{r7, lr}
     d5a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA04,
     d5c:	2100      	movs	r1, #0
     d5e:	2004      	movs	r0, #4
     d60:	4b11      	ldr	r3, [pc, #68]	; (da8 <ENC_SPI_PORT_init+0x50>)
     d62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_OUT);
     d64:	2102      	movs	r1, #2
     d66:	2004      	movs	r0, #4
     d68:	4b10      	ldr	r3, [pc, #64]	; (dac <ENC_SPI_PORT_init+0x54>)
     d6a:	4798      	blx	r3

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);
     d6c:	4910      	ldr	r1, [pc, #64]	; (db0 <ENC_SPI_PORT_init+0x58>)
     d6e:	2004      	movs	r0, #4
     d70:	4b10      	ldr	r3, [pc, #64]	; (db4 <ENC_SPI_PORT_init+0x5c>)
     d72:	4798      	blx	r3

	gpio_set_pin_level(PA05,
     d74:	2100      	movs	r1, #0
     d76:	2005      	movs	r0, #5
     d78:	4b0b      	ldr	r3, [pc, #44]	; (da8 <ENC_SPI_PORT_init+0x50>)
     d7a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OUT);
     d7c:	2102      	movs	r1, #2
     d7e:	2005      	movs	r0, #5
     d80:	4b0a      	ldr	r3, [pc, #40]	; (dac <ENC_SPI_PORT_init+0x54>)
     d82:	4798      	blx	r3

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
     d84:	490c      	ldr	r1, [pc, #48]	; (db8 <ENC_SPI_PORT_init+0x60>)
     d86:	2005      	movs	r0, #5
     d88:	4b0a      	ldr	r3, [pc, #40]	; (db4 <ENC_SPI_PORT_init+0x5c>)
     d8a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
     d8c:	2101      	movs	r1, #1
     d8e:	2006      	movs	r0, #6
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <ENC_SPI_PORT_init+0x54>)
     d92:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
     d94:	2100      	movs	r1, #0
     d96:	2006      	movs	r0, #6
     d98:	4b08      	ldr	r3, [pc, #32]	; (dbc <ENC_SPI_PORT_init+0x64>)
     d9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
     d9c:	4908      	ldr	r1, [pc, #32]	; (dc0 <ENC_SPI_PORT_init+0x68>)
     d9e:	2006      	movs	r0, #6
     da0:	4b04      	ldr	r3, [pc, #16]	; (db4 <ENC_SPI_PORT_init+0x5c>)
     da2:	4798      	blx	r3
}
     da4:	bf00      	nop
     da6:	bd80      	pop	{r7, pc}
     da8:	00000a6d 	.word	0x00000a6d
     dac:	00000a35 	.word	0x00000a35
     db0:	00040003 	.word	0x00040003
     db4:	00000a15 	.word	0x00000a15
     db8:	00050003 	.word	0x00050003
     dbc:	000009e1 	.word	0x000009e1
     dc0:	00060003 	.word	0x00060003

00000dc4 <ENC_SPI_CLOCK_init>:

void ENC_SPI_CLOCK_init(void)
{
     dc4:	b580      	push	{r7, lr}
     dc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     dc8:	2240      	movs	r2, #64	; 0x40
     dca:	2107      	movs	r1, #7
     dcc:	4806      	ldr	r0, [pc, #24]	; (de8 <ENC_SPI_CLOCK_init+0x24>)
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <ENC_SPI_CLOCK_init+0x28>)
     dd0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     dd2:	2241      	movs	r2, #65	; 0x41
     dd4:	2103      	movs	r1, #3
     dd6:	4804      	ldr	r0, [pc, #16]	; (de8 <ENC_SPI_CLOCK_init+0x24>)
     dd8:	4b04      	ldr	r3, [pc, #16]	; (dec <ENC_SPI_CLOCK_init+0x28>)
     dda:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
     ddc:	4804      	ldr	r0, [pc, #16]	; (df0 <ENC_SPI_CLOCK_init+0x2c>)
     dde:	4b05      	ldr	r3, [pc, #20]	; (df4 <ENC_SPI_CLOCK_init+0x30>)
     de0:	4798      	blx	r3
}
     de2:	bf00      	nop
     de4:	bd80      	pop	{r7, pc}
     de6:	bf00      	nop
     de8:	40001c00 	.word	0x40001c00
     dec:	00000383 	.word	0x00000383
     df0:	40000800 	.word	0x40000800
     df4:	000003e9 	.word	0x000003e9

00000df8 <HALL_Timer_CLOCK_init>:

void HALL_Timer_CLOCK_init(void)
{
     df8:	b580      	push	{r7, lr}
     dfa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
     dfc:	4806      	ldr	r0, [pc, #24]	; (e18 <HALL_Timer_CLOCK_init+0x20>)
     dfe:	4b07      	ldr	r3, [pc, #28]	; (e1c <HALL_Timer_CLOCK_init+0x24>)
     e00:	4798      	blx	r3

	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
     e02:	4805      	ldr	r0, [pc, #20]	; (e18 <HALL_Timer_CLOCK_init+0x20>)
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <HALL_Timer_CLOCK_init+0x28>)
     e06:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e08:	2240      	movs	r2, #64	; 0x40
     e0a:	2109      	movs	r1, #9
     e0c:	4805      	ldr	r0, [pc, #20]	; (e24 <HALL_Timer_CLOCK_init+0x2c>)
     e0e:	4b06      	ldr	r3, [pc, #24]	; (e28 <HALL_Timer_CLOCK_init+0x30>)
     e10:	4798      	blx	r3
}
     e12:	bf00      	nop
     e14:	bd80      	pop	{r7, pc}
     e16:	bf00      	nop
     e18:	40000800 	.word	0x40000800
     e1c:	00000409 	.word	0x00000409
     e20:	00000429 	.word	0x00000429
     e24:	40001c00 	.word	0x40001c00
     e28:	00000383 	.word	0x00000383

00000e2c <Moror_PWM_PORT_init>:

void Moror_PWM_PORT_init(void)
{
     e2c:	b580      	push	{r7, lr}
     e2e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA21, PINMUX_PA21G_TCC0_WO1);
     e30:	490c      	ldr	r1, [pc, #48]	; (e64 <Moror_PWM_PORT_init+0x38>)
     e32:	2015      	movs	r0, #21
     e34:	4b0c      	ldr	r3, [pc, #48]	; (e68 <Moror_PWM_PORT_init+0x3c>)
     e36:	4798      	blx	r3

	gpio_set_pin_function(PA22, PINMUX_PA22G_TCC0_WO2);
     e38:	490c      	ldr	r1, [pc, #48]	; (e6c <Moror_PWM_PORT_init+0x40>)
     e3a:	2016      	movs	r0, #22
     e3c:	4b0a      	ldr	r3, [pc, #40]	; (e68 <Moror_PWM_PORT_init+0x3c>)
     e3e:	4798      	blx	r3

	gpio_set_pin_function(PA16, PINMUX_PA16G_TCC0_WO4);
     e40:	490b      	ldr	r1, [pc, #44]	; (e70 <Moror_PWM_PORT_init+0x44>)
     e42:	2010      	movs	r0, #16
     e44:	4b08      	ldr	r3, [pc, #32]	; (e68 <Moror_PWM_PORT_init+0x3c>)
     e46:	4798      	blx	r3

	gpio_set_pin_function(PA17, PINMUX_PA17G_TCC0_WO5);
     e48:	490a      	ldr	r1, [pc, #40]	; (e74 <Moror_PWM_PORT_init+0x48>)
     e4a:	2011      	movs	r0, #17
     e4c:	4b06      	ldr	r3, [pc, #24]	; (e68 <Moror_PWM_PORT_init+0x3c>)
     e4e:	4798      	blx	r3

	gpio_set_pin_function(PA18, PINMUX_PA18G_TCC0_WO6);
     e50:	4909      	ldr	r1, [pc, #36]	; (e78 <Moror_PWM_PORT_init+0x4c>)
     e52:	2012      	movs	r0, #18
     e54:	4b04      	ldr	r3, [pc, #16]	; (e68 <Moror_PWM_PORT_init+0x3c>)
     e56:	4798      	blx	r3

	gpio_set_pin_function(PA19, PINMUX_PA19G_TCC0_WO7);
     e58:	4908      	ldr	r1, [pc, #32]	; (e7c <Moror_PWM_PORT_init+0x50>)
     e5a:	2013      	movs	r0, #19
     e5c:	4b02      	ldr	r3, [pc, #8]	; (e68 <Moror_PWM_PORT_init+0x3c>)
     e5e:	4798      	blx	r3
}
     e60:	bf00      	nop
     e62:	bd80      	pop	{r7, pc}
     e64:	00150006 	.word	0x00150006
     e68:	00000a15 	.word	0x00000a15
     e6c:	00160006 	.word	0x00160006
     e70:	00100006 	.word	0x00100006
     e74:	00110006 	.word	0x00110006
     e78:	00120006 	.word	0x00120006
     e7c:	00130006 	.word	0x00130006

00000e80 <Moror_PWM_CLOCK_init>:

void Moror_PWM_CLOCK_init(void)
{
     e80:	b580      	push	{r7, lr}
     e82:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     e84:	4804      	ldr	r0, [pc, #16]	; (e98 <Moror_PWM_CLOCK_init+0x18>)
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <Moror_PWM_CLOCK_init+0x1c>)
     e88:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e8a:	2240      	movs	r2, #64	; 0x40
     e8c:	2119      	movs	r1, #25
     e8e:	4804      	ldr	r0, [pc, #16]	; (ea0 <Moror_PWM_CLOCK_init+0x20>)
     e90:	4b04      	ldr	r3, [pc, #16]	; (ea4 <Moror_PWM_CLOCK_init+0x24>)
     e92:	4798      	blx	r3
}
     e94:	bf00      	nop
     e96:	bd80      	pop	{r7, pc}
     e98:	40000800 	.word	0x40000800
     e9c:	00000469 	.word	0x00000469
     ea0:	40001c00 	.word	0x40001c00
     ea4:	00000383 	.word	0x00000383

00000ea8 <system_init>:

void system_init(void)
{
     ea8:	b580      	push	{r7, lr}
     eaa:	af00      	add	r7, sp, #0
	init_mcu();
     eac:	4b28      	ldr	r3, [pc, #160]	; (f50 <system_init+0xa8>)
     eae:	4798      	blx	r3

	// GPIO on PA14

	gpio_set_pin_level(ENC_CS,
     eb0:	2100      	movs	r1, #0
     eb2:	200e      	movs	r0, #14
     eb4:	4b27      	ldr	r3, [pc, #156]	; (f54 <system_init+0xac>)
     eb6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(ENC_CS, GPIO_DIRECTION_OUT);
     eb8:	2102      	movs	r1, #2
     eba:	200e      	movs	r0, #14
     ebc:	4b26      	ldr	r3, [pc, #152]	; (f58 <system_init+0xb0>)
     ebe:	4798      	blx	r3

	gpio_set_pin_function(ENC_CS, GPIO_PIN_FUNCTION_OFF);
     ec0:	f04f 31ff 	mov.w	r1, #4294967295
     ec4:	200e      	movs	r0, #14
     ec6:	4b25      	ldr	r3, [pc, #148]	; (f5c <system_init+0xb4>)
     ec8:	4798      	blx	r3

	// GPIO on PA23

	// Set pin direction to input
	gpio_set_pin_direction(Hall_B, GPIO_DIRECTION_IN);
     eca:	2101      	movs	r1, #1
     ecc:	2017      	movs	r0, #23
     ece:	4b22      	ldr	r3, [pc, #136]	; (f58 <system_init+0xb0>)
     ed0:	4798      	blx	r3

	gpio_set_pin_pull_mode(Hall_B,
     ed2:	2101      	movs	r1, #1
     ed4:	2017      	movs	r0, #23
     ed6:	4b22      	ldr	r3, [pc, #136]	; (f60 <system_init+0xb8>)
     ed8:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Hall_B, GPIO_PIN_FUNCTION_OFF);
     eda:	f04f 31ff 	mov.w	r1, #4294967295
     ede:	2017      	movs	r0, #23
     ee0:	4b1e      	ldr	r3, [pc, #120]	; (f5c <system_init+0xb4>)
     ee2:	4798      	blx	r3

	// GPIO on PA24

	// Set pin direction to input
	gpio_set_pin_direction(Hall_A, GPIO_DIRECTION_IN);
     ee4:	2101      	movs	r1, #1
     ee6:	2018      	movs	r0, #24
     ee8:	4b1b      	ldr	r3, [pc, #108]	; (f58 <system_init+0xb0>)
     eea:	4798      	blx	r3

	gpio_set_pin_pull_mode(Hall_A,
     eec:	2101      	movs	r1, #1
     eee:	2018      	movs	r0, #24
     ef0:	4b1b      	ldr	r3, [pc, #108]	; (f60 <system_init+0xb8>)
     ef2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Hall_A, GPIO_PIN_FUNCTION_OFF);
     ef4:	f04f 31ff 	mov.w	r1, #4294967295
     ef8:	2018      	movs	r0, #24
     efa:	4b18      	ldr	r3, [pc, #96]	; (f5c <system_init+0xb4>)
     efc:	4798      	blx	r3

	// GPIO on PB22

	// Set pin direction to input
	gpio_set_pin_direction(Hall_C, GPIO_DIRECTION_IN);
     efe:	2101      	movs	r1, #1
     f00:	2036      	movs	r0, #54	; 0x36
     f02:	4b15      	ldr	r3, [pc, #84]	; (f58 <system_init+0xb0>)
     f04:	4798      	blx	r3

	gpio_set_pin_pull_mode(Hall_C,
     f06:	2101      	movs	r1, #1
     f08:	2036      	movs	r0, #54	; 0x36
     f0a:	4b15      	ldr	r3, [pc, #84]	; (f60 <system_init+0xb8>)
     f0c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Hall_C, GPIO_PIN_FUNCTION_OFF);
     f0e:	f04f 31ff 	mov.w	r1, #4294967295
     f12:	2036      	movs	r0, #54	; 0x36
     f14:	4b11      	ldr	r3, [pc, #68]	; (f5c <system_init+0xb4>)
     f16:	4798      	blx	r3

	CURR_A_TRQ_ADC_init();
     f18:	4b12      	ldr	r3, [pc, #72]	; (f64 <system_init+0xbc>)
     f1a:	4798      	blx	r3

	CURR_B_ADC_init();
     f1c:	4b12      	ldr	r3, [pc, #72]	; (f68 <system_init+0xc0>)
     f1e:	4798      	blx	r3

	Hall_CCL_init();
     f20:	4b12      	ldr	r3, [pc, #72]	; (f6c <system_init+0xc4>)
     f22:	4798      	blx	r3

	EVESYS_init();
     f24:	4b12      	ldr	r3, [pc, #72]	; (f70 <system_init+0xc8>)
     f26:	4798      	blx	r3

	ECAT_QSPI_init();
     f28:	4b12      	ldr	r3, [pc, #72]	; (f74 <system_init+0xcc>)
     f2a:	4798      	blx	r3

	ENC_SPI_CLOCK_init();
     f2c:	4b12      	ldr	r3, [pc, #72]	; (f78 <system_init+0xd0>)
     f2e:	4798      	blx	r3
	ENC_SPI_init();
     f30:	4b12      	ldr	r3, [pc, #72]	; (f7c <system_init+0xd4>)
     f32:	4798      	blx	r3
	ENC_SPI_PORT_init();
     f34:	4b12      	ldr	r3, [pc, #72]	; (f80 <system_init+0xd8>)
     f36:	4798      	blx	r3

	HALL_Timer_CLOCK_init();
     f38:	4b12      	ldr	r3, [pc, #72]	; (f84 <system_init+0xdc>)
     f3a:	4798      	blx	r3

	HALL_Timer_init();
     f3c:	4b12      	ldr	r3, [pc, #72]	; (f88 <system_init+0xe0>)
     f3e:	4798      	blx	r3

	Moror_PWM_CLOCK_init();
     f40:	4b12      	ldr	r3, [pc, #72]	; (f8c <system_init+0xe4>)
     f42:	4798      	blx	r3

	Moror_PWM_PORT_init();
     f44:	4b12      	ldr	r3, [pc, #72]	; (f90 <system_init+0xe8>)
     f46:	4798      	blx	r3

	Moror_PWM_init();
     f48:	4b12      	ldr	r3, [pc, #72]	; (f94 <system_init+0xec>)
     f4a:	4798      	blx	r3
}
     f4c:	bf00      	nop
     f4e:	bd80      	pop	{r7, pc}
     f50:	00000aa5 	.word	0x00000aa5
     f54:	00000a6d 	.word	0x00000a6d
     f58:	00000a35 	.word	0x00000a35
     f5c:	00000a15 	.word	0x00000a15
     f60:	000009e1 	.word	0x000009e1
     f64:	00000b29 	.word	0x00000b29
     f68:	00000ba5 	.word	0x00000ba5
     f6c:	00000c0d 	.word	0x00000c0d
     f70:	00000c2d 	.word	0x00000c2d
     f74:	00000d2d 	.word	0x00000d2d
     f78:	00000dc5 	.word	0x00000dc5
     f7c:	00002b85 	.word	0x00002b85
     f80:	00000d59 	.word	0x00000d59
     f84:	00000df9 	.word	0x00000df9
     f88:	000030b9 	.word	0x000030b9
     f8c:	00000e81 	.word	0x00000e81
     f90:	00000e2d 	.word	0x00000e2d
     f94:	00002e65 	.word	0x00002e65

00000f98 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     f98:	b580      	push	{r7, lr}
     f9a:	b084      	sub	sp, #16
     f9c:	af00      	add	r7, sp, #0
     f9e:	60f8      	str	r0, [r7, #12]
     fa0:	60b9      	str	r1, [r7, #8]
     fa2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     fa4:	68fb      	ldr	r3, [r7, #12]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d004      	beq.n	fb4 <adc_sync_init+0x1c>
     faa:	68bb      	ldr	r3, [r7, #8]
     fac:	2b00      	cmp	r3, #0
     fae:	d001      	beq.n	fb4 <adc_sync_init+0x1c>
     fb0:	2301      	movs	r3, #1
     fb2:	e000      	b.n	fb6 <adc_sync_init+0x1e>
     fb4:	2300      	movs	r3, #0
     fb6:	f003 0301 	and.w	r3, r3, #1
     fba:	b2db      	uxtb	r3, r3
     fbc:	2239      	movs	r2, #57	; 0x39
     fbe:	4907      	ldr	r1, [pc, #28]	; (fdc <adc_sync_init+0x44>)
     fc0:	4618      	mov	r0, r3
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <adc_sync_init+0x48>)
     fc4:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	68b9      	ldr	r1, [r7, #8]
     fca:	4618      	mov	r0, r3
     fcc:	4b05      	ldr	r3, [pc, #20]	; (fe4 <adc_sync_init+0x4c>)
     fce:	4798      	blx	r3
     fd0:	4603      	mov	r3, r0
}
     fd2:	4618      	mov	r0, r3
     fd4:	3710      	adds	r7, #16
     fd6:	46bd      	mov	sp, r7
     fd8:	bd80      	pop	{r7, pc}
     fda:	bf00      	nop
     fdc:	000045e0 	.word	0x000045e0
     fe0:	00001161 	.word	0x00001161
     fe4:	00001be5 	.word	0x00001be5

00000fe8 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     fe8:	b580      	push	{r7, lr}
     fea:	b082      	sub	sp, #8
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
     ff0:	460b      	mov	r3, r1
     ff2:	70fb      	strb	r3, [r7, #3]
	ASSERT(descr);
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	2b00      	cmp	r3, #0
     ff8:	bf14      	ite	ne
     ffa:	2301      	movne	r3, #1
     ffc:	2300      	moveq	r3, #0
     ffe:	b2db      	uxtb	r3, r3
    1000:	224e      	movs	r2, #78	; 0x4e
    1002:	4907      	ldr	r1, [pc, #28]	; (1020 <adc_sync_enable_channel+0x38>)
    1004:	4618      	mov	r0, r3
    1006:	4b07      	ldr	r3, [pc, #28]	; (1024 <adc_sync_enable_channel+0x3c>)
    1008:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	78fa      	ldrb	r2, [r7, #3]
    100e:	4611      	mov	r1, r2
    1010:	4618      	mov	r0, r3
    1012:	4b05      	ldr	r3, [pc, #20]	; (1028 <adc_sync_enable_channel+0x40>)
    1014:	4798      	blx	r3

	return ERR_NONE;
    1016:	2300      	movs	r3, #0
}
    1018:	4618      	mov	r0, r3
    101a:	3708      	adds	r7, #8
    101c:	46bd      	mov	sp, r7
    101e:	bd80      	pop	{r7, pc}
    1020:	000045e0 	.word	0x000045e0
    1024:	00001161 	.word	0x00001161
    1028:	00001c39 	.word	0x00001c39

0000102c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    102c:	b480      	push	{r7}
    102e:	b085      	sub	sp, #20
    1030:	af00      	add	r7, sp, #0
    1032:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1034:	f3ef 8310 	mrs	r3, PRIMASK
    1038:	60fb      	str	r3, [r7, #12]
  return(result);
    103a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1040:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1042:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1046:	bf00      	nop
    1048:	3714      	adds	r7, #20
    104a:	46bd      	mov	sp, r7
    104c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1050:	4770      	bx	lr

00001052 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    1052:	b480      	push	{r7}
    1054:	b085      	sub	sp, #20
    1056:	af00      	add	r7, sp, #0
    1058:	6078      	str	r0, [r7, #4]
    105a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1064:	68fb      	ldr	r3, [r7, #12]
    1066:	f383 8810 	msr	PRIMASK, r3
}
    106a:	bf00      	nop
    106c:	3714      	adds	r7, #20
    106e:	46bd      	mov	sp, r7
    1070:	f85d 7b04 	ldr.w	r7, [sp], #4
    1074:	4770      	bx	lr
	...

00001078 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1078:	b580      	push	{r7, lr}
    107a:	af00      	add	r7, sp, #0
	return _event_system_init();
    107c:	4b02      	ldr	r3, [pc, #8]	; (1088 <event_system_init+0x10>)
    107e:	4798      	blx	r3
    1080:	4603      	mov	r3, r0
}
    1082:	4618      	mov	r0, r3
    1084:	bd80      	pop	{r7, pc}
    1086:	bf00      	nop
    1088:	00001e99 	.word	0x00001e99

0000108c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    108c:	b580      	push	{r7, lr}
    108e:	b082      	sub	sp, #8
    1090:	af00      	add	r7, sp, #0
    1092:	6078      	str	r0, [r7, #4]
    1094:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1096:	687b      	ldr	r3, [r7, #4]
    1098:	2b00      	cmp	r3, #0
    109a:	d004      	beq.n	10a6 <qspi_sync_init+0x1a>
    109c:	683b      	ldr	r3, [r7, #0]
    109e:	2b00      	cmp	r3, #0
    10a0:	d001      	beq.n	10a6 <qspi_sync_init+0x1a>
    10a2:	2301      	movs	r3, #1
    10a4:	e000      	b.n	10a8 <qspi_sync_init+0x1c>
    10a6:	2300      	movs	r3, #0
    10a8:	f003 0301 	and.w	r3, r3, #1
    10ac:	b2db      	uxtb	r3, r3
    10ae:	2231      	movs	r2, #49	; 0x31
    10b0:	4906      	ldr	r1, [pc, #24]	; (10cc <qspi_sync_init+0x40>)
    10b2:	4618      	mov	r0, r3
    10b4:	4b06      	ldr	r3, [pc, #24]	; (10d0 <qspi_sync_init+0x44>)
    10b6:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	6839      	ldr	r1, [r7, #0]
    10bc:	4618      	mov	r0, r3
    10be:	4b05      	ldr	r3, [pc, #20]	; (10d4 <qspi_sync_init+0x48>)
    10c0:	4798      	blx	r3
    10c2:	4603      	mov	r3, r0
}
    10c4:	4618      	mov	r0, r3
    10c6:	3708      	adds	r7, #8
    10c8:	46bd      	mov	sp, r7
    10ca:	bd80      	pop	{r7, pc}
    10cc:	000045fc 	.word	0x000045fc
    10d0:	00001161 	.word	0x00001161
    10d4:	00002669 	.word	0x00002669

000010d8 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    10d8:	b580      	push	{r7, lr}
    10da:	b082      	sub	sp, #8
    10dc:	af00      	add	r7, sp, #0
    10de:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	2b00      	cmp	r3, #0
    10e4:	bf14      	ite	ne
    10e6:	2301      	movne	r3, #1
    10e8:	2300      	moveq	r3, #0
    10ea:	b2db      	uxtb	r3, r3
    10ec:	223f      	movs	r2, #63	; 0x3f
    10ee:	4906      	ldr	r1, [pc, #24]	; (1108 <qspi_sync_enable+0x30>)
    10f0:	4618      	mov	r0, r3
    10f2:	4b06      	ldr	r3, [pc, #24]	; (110c <qspi_sync_enable+0x34>)
    10f4:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	4618      	mov	r0, r3
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <qspi_sync_enable+0x38>)
    10fc:	4798      	blx	r3
    10fe:	4603      	mov	r3, r0
}
    1100:	4618      	mov	r0, r3
    1102:	3708      	adds	r7, #8
    1104:	46bd      	mov	sp, r7
    1106:	bd80      	pop	{r7, pc}
    1108:	000045fc 	.word	0x000045fc
    110c:	00001161 	.word	0x00001161
    1110:	000026d9 	.word	0x000026d9

00001114 <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1114:	b580      	push	{r7, lr}
    1116:	b082      	sub	sp, #8
    1118:	af00      	add	r7, sp, #0
    111a:	6078      	str	r0, [r7, #4]
    111c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	2b00      	cmp	r3, #0
    1122:	d004      	beq.n	112e <qspi_sync_serial_run_command+0x1a>
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d001      	beq.n	112e <qspi_sync_serial_run_command+0x1a>
    112a:	2301      	movs	r3, #1
    112c:	e000      	b.n	1130 <qspi_sync_serial_run_command+0x1c>
    112e:	2300      	movs	r3, #0
    1130:	f003 0301 	and.w	r3, r3, #1
    1134:	b2db      	uxtb	r3, r3
    1136:	224d      	movs	r2, #77	; 0x4d
    1138:	4906      	ldr	r1, [pc, #24]	; (1154 <qspi_sync_serial_run_command+0x40>)
    113a:	4618      	mov	r0, r3
    113c:	4b06      	ldr	r3, [pc, #24]	; (1158 <qspi_sync_serial_run_command+0x44>)
    113e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1140:	687b      	ldr	r3, [r7, #4]
    1142:	6839      	ldr	r1, [r7, #0]
    1144:	4618      	mov	r0, r3
    1146:	4b05      	ldr	r3, [pc, #20]	; (115c <qspi_sync_serial_run_command+0x48>)
    1148:	4798      	blx	r3
    114a:	4603      	mov	r3, r0
}
    114c:	4618      	mov	r0, r3
    114e:	3708      	adds	r7, #8
    1150:	46bd      	mov	sp, r7
    1152:	bd80      	pop	{r7, pc}
    1154:	000045fc 	.word	0x000045fc
    1158:	00001161 	.word	0x00001161
    115c:	00002825 	.word	0x00002825

00001160 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1160:	b480      	push	{r7}
    1162:	b085      	sub	sp, #20
    1164:	af00      	add	r7, sp, #0
    1166:	4603      	mov	r3, r0
    1168:	60b9      	str	r1, [r7, #8]
    116a:	607a      	str	r2, [r7, #4]
    116c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    116e:	7bfb      	ldrb	r3, [r7, #15]
    1170:	f083 0301 	eor.w	r3, r3, #1
    1174:	b2db      	uxtb	r3, r3
    1176:	2b00      	cmp	r3, #0
    1178:	d000      	beq.n	117c <assert+0x1c>
		__asm("BKPT #0");
    117a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    117c:	bf00      	nop
    117e:	3714      	adds	r7, #20
    1180:	46bd      	mov	sp, r7
    1182:	f85d 7b04 	ldr.w	r7, [sp], #4
    1186:	4770      	bx	lr

00001188 <hri_port_set_OUT_reg>:
{
    1188:	b480      	push	{r7}
    118a:	b085      	sub	sp, #20
    118c:	af00      	add	r7, sp, #0
    118e:	60f8      	str	r0, [r7, #12]
    1190:	460b      	mov	r3, r1
    1192:	607a      	str	r2, [r7, #4]
    1194:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1196:	7afb      	ldrb	r3, [r7, #11]
    1198:	68fa      	ldr	r2, [r7, #12]
    119a:	01db      	lsls	r3, r3, #7
    119c:	4413      	add	r3, r2
    119e:	3318      	adds	r3, #24
    11a0:	687a      	ldr	r2, [r7, #4]
    11a2:	601a      	str	r2, [r3, #0]
}
    11a4:	bf00      	nop
    11a6:	3714      	adds	r7, #20
    11a8:	46bd      	mov	sp, r7
    11aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    11ae:	4770      	bx	lr

000011b0 <hri_port_clear_OUT_reg>:
{
    11b0:	b480      	push	{r7}
    11b2:	b085      	sub	sp, #20
    11b4:	af00      	add	r7, sp, #0
    11b6:	60f8      	str	r0, [r7, #12]
    11b8:	460b      	mov	r3, r1
    11ba:	607a      	str	r2, [r7, #4]
    11bc:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11be:	7afb      	ldrb	r3, [r7, #11]
    11c0:	68fa      	ldr	r2, [r7, #12]
    11c2:	01db      	lsls	r3, r3, #7
    11c4:	4413      	add	r3, r2
    11c6:	3314      	adds	r3, #20
    11c8:	687a      	ldr	r2, [r7, #4]
    11ca:	601a      	str	r2, [r3, #0]
}
    11cc:	bf00      	nop
    11ce:	3714      	adds	r7, #20
    11d0:	46bd      	mov	sp, r7
    11d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    11d6:	4770      	bx	lr

000011d8 <_gpio_set_level>:
{
    11d8:	b580      	push	{r7, lr}
    11da:	b082      	sub	sp, #8
    11dc:	af00      	add	r7, sp, #0
    11de:	4603      	mov	r3, r0
    11e0:	6039      	str	r1, [r7, #0]
    11e2:	71fb      	strb	r3, [r7, #7]
    11e4:	4613      	mov	r3, r2
    11e6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    11e8:	79bb      	ldrb	r3, [r7, #6]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d006      	beq.n	11fc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    11ee:	79fb      	ldrb	r3, [r7, #7]
    11f0:	683a      	ldr	r2, [r7, #0]
    11f2:	4619      	mov	r1, r3
    11f4:	4806      	ldr	r0, [pc, #24]	; (1210 <_gpio_set_level+0x38>)
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <_gpio_set_level+0x3c>)
    11f8:	4798      	blx	r3
}
    11fa:	e005      	b.n	1208 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    11fc:	79fb      	ldrb	r3, [r7, #7]
    11fe:	683a      	ldr	r2, [r7, #0]
    1200:	4619      	mov	r1, r3
    1202:	4803      	ldr	r0, [pc, #12]	; (1210 <_gpio_set_level+0x38>)
    1204:	4b04      	ldr	r3, [pc, #16]	; (1218 <_gpio_set_level+0x40>)
    1206:	4798      	blx	r3
}
    1208:	bf00      	nop
    120a:	3708      	adds	r7, #8
    120c:	46bd      	mov	sp, r7
    120e:	bd80      	pop	{r7, pc}
    1210:	41008000 	.word	0x41008000
    1214:	00001189 	.word	0x00001189
    1218:	000011b1 	.word	0x000011b1

0000121c <gpio_set_pin_level>:
{
    121c:	b580      	push	{r7, lr}
    121e:	b082      	sub	sp, #8
    1220:	af00      	add	r7, sp, #0
    1222:	4603      	mov	r3, r0
    1224:	460a      	mov	r2, r1
    1226:	71fb      	strb	r3, [r7, #7]
    1228:	4613      	mov	r3, r2
    122a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    122c:	79fb      	ldrb	r3, [r7, #7]
    122e:	095b      	lsrs	r3, r3, #5
    1230:	b2d8      	uxtb	r0, r3
    1232:	79fb      	ldrb	r3, [r7, #7]
    1234:	f003 031f 	and.w	r3, r3, #31
    1238:	2201      	movs	r2, #1
    123a:	fa02 f303 	lsl.w	r3, r2, r3
    123e:	79ba      	ldrb	r2, [r7, #6]
    1240:	4619      	mov	r1, r3
    1242:	4b03      	ldr	r3, [pc, #12]	; (1250 <gpio_set_pin_level+0x34>)
    1244:	4798      	blx	r3
}
    1246:	bf00      	nop
    1248:	3708      	adds	r7, #8
    124a:	46bd      	mov	sp, r7
    124c:	bd80      	pop	{r7, pc}
    124e:	bf00      	nop
    1250:	000011d9 	.word	0x000011d9

00001254 <ECAT_QSPI_send>:
uint8_t encoder_crc_inv = 0;

float Fs = 25000; //Control loop frequency

void ECAT_QSPI_send(uint32_t* message, int buf_size, uint8_t instr,uint16_t address)
{
    1254:	b580      	push	{r7, lr}
    1256:	b08a      	sub	sp, #40	; 0x28
    1258:	af00      	add	r7, sp, #0
    125a:	60f8      	str	r0, [r7, #12]
    125c:	60b9      	str	r1, [r7, #8]
    125e:	4611      	mov	r1, r2
    1260:	461a      	mov	r2, r3
    1262:	460b      	mov	r3, r1
    1264:	71fb      	strb	r3, [r7, #7]
    1266:	4613      	mov	r3, r2
    1268:	80bb      	strh	r3, [r7, #4]

	struct _qspi_command cmd    = {
    126a:	f107 0310 	add.w	r3, r7, #16
    126e:	2200      	movs	r2, #0
    1270:	601a      	str	r2, [r3, #0]
    1272:	605a      	str	r2, [r3, #4]
    1274:	609a      	str	r2, [r3, #8]
    1276:	60da      	str	r2, [r3, #12]
    1278:	611a      	str	r2, [r3, #16]
    127a:	615a      	str	r2, [r3, #20]
    127c:	7c3b      	ldrb	r3, [r7, #16]
    127e:	f043 0320 	orr.w	r3, r3, #32
    1282:	743b      	strb	r3, [r7, #16]
    1284:	7c3b      	ldrb	r3, [r7, #16]
    1286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    128a:	743b      	strb	r3, [r7, #16]
    128c:	7c7b      	ldrb	r3, [r7, #17]
    128e:	2202      	movs	r2, #2
    1290:	f362 1305 	bfi	r3, r2, #4, #2
    1294:	747b      	strb	r3, [r7, #17]
    1296:	79fb      	ldrb	r3, [r7, #7]
    1298:	753b      	strb	r3, [r7, #20]
		.inst_frame.bits.width = 0,
		.inst_frame.bits.addr_en  = 1,
		.inst_frame.bits.data_en  = 1,
		.inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
		.address =					address + (instr<<16),
    129a:	88ba      	ldrh	r2, [r7, #4]
    129c:	79fb      	ldrb	r3, [r7, #7]
    129e:	041b      	lsls	r3, r3, #16
    12a0:	4413      	add	r3, r2
	struct _qspi_command cmd    = {
    12a2:	61bb      	str	r3, [r7, #24]
    12a4:	68bb      	ldr	r3, [r7, #8]
    12a6:	61fb      	str	r3, [r7, #28]
    12a8:	68fb      	ldr	r3, [r7, #12]
    12aa:	623b      	str	r3, [r7, #32]
		.instruction              = instr,
		.buf_len                  = buf_size,
		.tx_buf                   = message,
	};

	qspi_sync_serial_run_command(&ECAT_QSPI, &cmd);
    12ac:	f107 0310 	add.w	r3, r7, #16
    12b0:	4619      	mov	r1, r3
    12b2:	4803      	ldr	r0, [pc, #12]	; (12c0 <ECAT_QSPI_send+0x6c>)
    12b4:	4b03      	ldr	r3, [pc, #12]	; (12c4 <ECAT_QSPI_send+0x70>)
    12b6:	4798      	blx	r3
	//qspi_sync_deinit(&QUAD_SPI_0);
}
    12b8:	bf00      	nop
    12ba:	3728      	adds	r7, #40	; 0x28
    12bc:	46bd      	mov	sp, r7
    12be:	bd80      	pop	{r7, pc}
    12c0:	200001a8 	.word	0x200001a8
    12c4:	00001115 	.word	0x00001115

000012c8 <ECAT_QSPI_read>:

void ECAT_QSPI_read(uint32_t* message, int buf_size, uint8_t instr,uint16_t address)
{
    12c8:	b580      	push	{r7, lr}
    12ca:	b08a      	sub	sp, #40	; 0x28
    12cc:	af00      	add	r7, sp, #0
    12ce:	60f8      	str	r0, [r7, #12]
    12d0:	60b9      	str	r1, [r7, #8]
    12d2:	4611      	mov	r1, r2
    12d4:	461a      	mov	r2, r3
    12d6:	460b      	mov	r3, r1
    12d8:	71fb      	strb	r3, [r7, #7]
    12da:	4613      	mov	r3, r2
    12dc:	80bb      	strh	r3, [r7, #4]

	struct _qspi_command cmd    = {
    12de:	f107 0310 	add.w	r3, r7, #16
    12e2:	2200      	movs	r2, #0
    12e4:	601a      	str	r2, [r3, #0]
    12e6:	605a      	str	r2, [r3, #4]
    12e8:	609a      	str	r2, [r3, #8]
    12ea:	60da      	str	r2, [r3, #12]
    12ec:	611a      	str	r2, [r3, #16]
    12ee:	615a      	str	r2, [r3, #20]
    12f0:	7c3b      	ldrb	r3, [r7, #16]
    12f2:	f043 0320 	orr.w	r3, r3, #32
    12f6:	743b      	strb	r3, [r7, #16]
    12f8:	7c3b      	ldrb	r3, [r7, #16]
    12fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    12fe:	743b      	strb	r3, [r7, #16]
    1300:	2303      	movs	r3, #3
    1302:	753b      	strb	r3, [r7, #20]
    1304:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1308:	61bb      	str	r3, [r7, #24]
    130a:	2340      	movs	r3, #64	; 0x40
    130c:	61fb      	str	r3, [r7, #28]
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	627b      	str	r3, [r7, #36]	; 0x24
		.instruction              = 0x03,
		.buf_len                  = 64,
		.rx_buf                   = message,
	};

	qspi_sync_serial_run_command(&ECAT_QSPI, &cmd);
    1312:	f107 0310 	add.w	r3, r7, #16
    1316:	4619      	mov	r1, r3
    1318:	4803      	ldr	r0, [pc, #12]	; (1328 <ECAT_QSPI_read+0x60>)
    131a:	4b04      	ldr	r3, [pc, #16]	; (132c <ECAT_QSPI_read+0x64>)
    131c:	4798      	blx	r3
	//qspi_sync_deinit(&QUAD_SPI_0);
}
    131e:	bf00      	nop
    1320:	3728      	adds	r7, #40	; 0x28
    1322:	46bd      	mov	sp, r7
    1324:	bd80      	pop	{r7, pc}
    1326:	bf00      	nop
    1328:	200001a8 	.word	0x200001a8
    132c:	00001115 	.word	0x00001115

00001330 <pi_controller>:

void pi_controller(float *out, float y_d, float y, float Kp, float Ki, float maxval)
{
    1330:	b480      	push	{r7}
    1332:	b087      	sub	sp, #28
    1334:	af00      	add	r7, sp, #0
    1336:	60f8      	str	r0, [r7, #12]
    1338:	60b9      	str	r1, [r7, #8]
    133a:	607a      	str	r2, [r7, #4]
    133c:	603b      	str	r3, [r7, #0]
	volatile float e = (y_d -y);
    133e:	ed97 7a02 	vldr	s14, [r7, #8]
    1342:	edd7 7a01 	vldr	s15, [r7, #4]
    1346:	ee77 7a67 	vsub.f32	s15, s14, s15
    134a:	edc7 7a05 	vstr	s15, [r7, #20]
	out[0]= out[1]+ Kp*((e-out[2])+ (Ki*(e+out[2]))/Fs/2);
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	3304      	adds	r3, #4
    1352:	ed93 7a00 	vldr	s14, [r3]
    1356:	edd7 6a05 	vldr	s13, [r7, #20]
    135a:	68fb      	ldr	r3, [r7, #12]
    135c:	3308      	adds	r3, #8
    135e:	edd3 7a00 	vldr	s15, [r3]
    1362:	ee76 6ae7 	vsub.f32	s13, s13, s15
    1366:	68fb      	ldr	r3, [r7, #12]
    1368:	3308      	adds	r3, #8
    136a:	ed93 6a00 	vldr	s12, [r3]
    136e:	edd7 7a05 	vldr	s15, [r7, #20]
    1372:	ee36 6a27 	vadd.f32	s12, s12, s15
    1376:	edd7 7a08 	vldr	s15, [r7, #32]
    137a:	ee66 5a27 	vmul.f32	s11, s12, s15
    137e:	4b22      	ldr	r3, [pc, #136]	; (1408 <pi_controller+0xd8>)
    1380:	edd3 7a00 	vldr	s15, [r3]
    1384:	ee85 6aa7 	vdiv.f32	s12, s11, s15
    1388:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    138c:	eec6 7a25 	vdiv.f32	s15, s12, s11
    1390:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1394:	edd7 7a00 	vldr	s15, [r7]
    1398:	ee66 7aa7 	vmul.f32	s15, s13, s15
    139c:	ee77 7a27 	vadd.f32	s15, s14, s15
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	edc3 7a00 	vstr	s15, [r3]
	
	if (out[0]>maxval) out[0] = maxval;
    13a6:	68fb      	ldr	r3, [r7, #12]
    13a8:	ed93 7a00 	vldr	s14, [r3]
    13ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    13b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    13b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13b8:	dd03      	ble.n	13c2 <pi_controller+0x92>
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    13be:	601a      	str	r2, [r3, #0]
    13c0:	e012      	b.n	13e8 <pi_controller+0xb8>
	else if (out[0]<-maxval) out[0] = -maxval;
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	ed93 7a00 	vldr	s14, [r3]
    13c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    13cc:	eef1 7a67 	vneg.f32	s15, s15
    13d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    13d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13d8:	d506      	bpl.n	13e8 <pi_controller+0xb8>
    13da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    13de:	eef1 7a67 	vneg.f32	s15, s15
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	edc3 7a00 	vstr	s15, [r3]
	
	out[1]= out[0];
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	3304      	adds	r3, #4
    13ec:	68fa      	ldr	r2, [r7, #12]
    13ee:	6812      	ldr	r2, [r2, #0]
    13f0:	601a      	str	r2, [r3, #0]
	out[2]= e;
    13f2:	68fb      	ldr	r3, [r7, #12]
    13f4:	3308      	adds	r3, #8
    13f6:	697a      	ldr	r2, [r7, #20]
    13f8:	601a      	str	r2, [r3, #0]
}
    13fa:	bf00      	nop
    13fc:	371c      	adds	r7, #28
    13fe:	46bd      	mov	sp, r7
    1400:	f85d 7b04 	ldr.w	r7, [sp], #4
    1404:	4770      	bx	lr
    1406:	bf00      	nop
    1408:	20000008 	.word	0x20000008

0000140c <p_controller>:

void p_controller(float *out, float y_d, float y, float Kp, float maxval)
{
    140c:	b480      	push	{r7}
    140e:	b087      	sub	sp, #28
    1410:	af00      	add	r7, sp, #0
    1412:	60f8      	str	r0, [r7, #12]
    1414:	60b9      	str	r1, [r7, #8]
    1416:	607a      	str	r2, [r7, #4]
    1418:	603b      	str	r3, [r7, #0]
	volatile float e = (y_d -y);
    141a:	ed97 7a02 	vldr	s14, [r7, #8]
    141e:	edd7 7a01 	vldr	s15, [r7, #4]
    1422:	ee77 7a67 	vsub.f32	s15, s14, s15
    1426:	edc7 7a05 	vstr	s15, [r7, #20]
	out[0]=  Kp*e;
    142a:	ed97 7a05 	vldr	s14, [r7, #20]
    142e:	edd7 7a00 	vldr	s15, [r7]
    1432:	ee67 7a27 	vmul.f32	s15, s14, s15
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	edc3 7a00 	vstr	s15, [r3]
	if (out[0]>maxval) out[0] = maxval;
    143c:	68fb      	ldr	r3, [r7, #12]
    143e:	ed93 7a00 	vldr	s14, [r3]
    1442:	edd7 7a08 	vldr	s15, [r7, #32]
    1446:	eeb4 7ae7 	vcmpe.f32	s14, s15
    144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    144e:	dd03      	ble.n	1458 <p_controller+0x4c>
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	6a3a      	ldr	r2, [r7, #32]
    1454:	601a      	str	r2, [r3, #0]
	else if (out[0]<-maxval) out[0] = -maxval;
	
}
    1456:	e013      	b.n	1480 <p_controller+0x74>
	else if (out[0]<-maxval) out[0] = -maxval;
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	ed93 7a00 	vldr	s14, [r3]
    145e:	edd7 7a08 	vldr	s15, [r7, #32]
    1462:	eef1 7a67 	vneg.f32	s15, s15
    1466:	eeb4 7ae7 	vcmpe.f32	s14, s15
    146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    146e:	d400      	bmi.n	1472 <p_controller+0x66>
}
    1470:	e006      	b.n	1480 <p_controller+0x74>
	else if (out[0]<-maxval) out[0] = -maxval;
    1472:	edd7 7a08 	vldr	s15, [r7, #32]
    1476:	eef1 7a67 	vneg.f32	s15, s15
    147a:	68fb      	ldr	r3, [r7, #12]
    147c:	edc3 7a00 	vstr	s15, [r3]
}
    1480:	bf00      	nop
    1482:	371c      	adds	r7, #28
    1484:	46bd      	mov	sp, r7
    1486:	f85d 7b04 	ldr.w	r7, [sp], #4
    148a:	4770      	bx	lr

0000148c <set_encoder_offset_zero>:
		b++;
	}
}

void set_encoder_offset_zero()
{
    148c:	b580      	push	{r7, lr}
    148e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(ENC_CS, 0);
    1490:	2100      	movs	r1, #0
    1492:	200e      	movs	r0, #14
    1494:	4b1c      	ldr	r3, [pc, #112]	; (1508 <set_encoder_offset_zero+0x7c>)
    1496:	4798      	blx	r3
	ENC_SPI_read_block((void *)encoder_raw_data, 6); // output sensor data here
    1498:	2106      	movs	r1, #6
    149a:	481c      	ldr	r0, [pc, #112]	; (150c <set_encoder_offset_zero+0x80>)
    149c:	4b1c      	ldr	r3, [pc, #112]	; (1510 <set_encoder_offset_zero+0x84>)
    149e:	4798      	blx	r3
	encoder_multiturn_counter = (encoder_raw_data[0] << 8) | (encoder_raw_data[1] & 0xff);
    14a0:	4b1a      	ldr	r3, [pc, #104]	; (150c <set_encoder_offset_zero+0x80>)
    14a2:	781b      	ldrb	r3, [r3, #0]
    14a4:	021b      	lsls	r3, r3, #8
    14a6:	b21a      	sxth	r2, r3
    14a8:	4b18      	ldr	r3, [pc, #96]	; (150c <set_encoder_offset_zero+0x80>)
    14aa:	785b      	ldrb	r3, [r3, #1]
    14ac:	b21b      	sxth	r3, r3
    14ae:	4313      	orrs	r3, r2
    14b0:	b21b      	sxth	r3, r3
    14b2:	b29a      	uxth	r2, r3
    14b4:	4b17      	ldr	r3, [pc, #92]	; (1514 <set_encoder_offset_zero+0x88>)
    14b6:	801a      	strh	r2, [r3, #0]
	encoder_offset = (float)((encoder_raw_data[2] << 14) | (encoder_raw_data[3] << 6) | (encoder_raw_data[4] >> 2));
    14b8:	4b14      	ldr	r3, [pc, #80]	; (150c <set_encoder_offset_zero+0x80>)
    14ba:	789b      	ldrb	r3, [r3, #2]
    14bc:	039a      	lsls	r2, r3, #14
    14be:	4b13      	ldr	r3, [pc, #76]	; (150c <set_encoder_offset_zero+0x80>)
    14c0:	78db      	ldrb	r3, [r3, #3]
    14c2:	019b      	lsls	r3, r3, #6
    14c4:	4313      	orrs	r3, r2
    14c6:	4a11      	ldr	r2, [pc, #68]	; (150c <set_encoder_offset_zero+0x80>)
    14c8:	7912      	ldrb	r2, [r2, #4]
    14ca:	0892      	lsrs	r2, r2, #2
    14cc:	b2d2      	uxtb	r2, r2
    14ce:	4313      	orrs	r3, r2
    14d0:	ee07 3a90 	vmov	s15, r3
    14d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    14d8:	4b0f      	ldr	r3, [pc, #60]	; (1518 <set_encoder_offset_zero+0x8c>)
    14da:	edc3 7a00 	vstr	s15, [r3]
	encoder_Err = encoder_raw_data[4] & 0x02;
    14de:	4b0b      	ldr	r3, [pc, #44]	; (150c <set_encoder_offset_zero+0x80>)
    14e0:	791b      	ldrb	r3, [r3, #4]
    14e2:	f003 0302 	and.w	r3, r3, #2
    14e6:	b2da      	uxtb	r2, r3
    14e8:	4b0c      	ldr	r3, [pc, #48]	; (151c <set_encoder_offset_zero+0x90>)
    14ea:	701a      	strb	r2, [r3, #0]
	encoder_Not_Warning = encoder_raw_data[4] & 0x01;
    14ec:	4b07      	ldr	r3, [pc, #28]	; (150c <set_encoder_offset_zero+0x80>)
    14ee:	791b      	ldrb	r3, [r3, #4]
    14f0:	f003 0301 	and.w	r3, r3, #1
    14f4:	b2da      	uxtb	r2, r3
    14f6:	4b0a      	ldr	r3, [pc, #40]	; (1520 <set_encoder_offset_zero+0x94>)
    14f8:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(ENC_CS, 1);
    14fa:	2101      	movs	r1, #1
    14fc:	200e      	movs	r0, #14
    14fe:	4b02      	ldr	r3, [pc, #8]	; (1508 <set_encoder_offset_zero+0x7c>)
    1500:	4798      	blx	r3
}
    1502:	bf00      	nop
    1504:	bd80      	pop	{r7, pc}
    1506:	bf00      	nop
    1508:	0000121d 	.word	0x0000121d
    150c:	20000000 	.word	0x20000000
    1510:	00002c55 	.word	0x00002c55
    1514:	200000c8 	.word	0x200000c8
    1518:	200000d4 	.word	0x200000d4
    151c:	200000d8 	.word	0x200000d8
    1520:	200000d9 	.word	0x200000d9
    1524:	00000000 	.word	0x00000000

00001528 <receive_data_from_encoder>:


void receive_data_from_encoder()
{
    1528:	b598      	push	{r3, r4, r7, lr}
    152a:	af00      	add	r7, sp, #0
	//Encoder Counter in 21 Bit big
	gpio_set_pin_level(ENC_CS, 0);
    152c:	2100      	movs	r1, #0
    152e:	200e      	movs	r0, #14
    1530:	4b33      	ldr	r3, [pc, #204]	; (1600 <receive_data_from_encoder+0xd8>)
    1532:	4798      	blx	r3
	ENC_SPI_read_block((void *)encoder_raw_data, 6); // output sensor data here
    1534:	2106      	movs	r1, #6
    1536:	4833      	ldr	r0, [pc, #204]	; (1604 <receive_data_from_encoder+0xdc>)
    1538:	4b33      	ldr	r3, [pc, #204]	; (1608 <receive_data_from_encoder+0xe0>)
    153a:	4798      	blx	r3
	encoder_multiturn_counter = (encoder_raw_data[0] << 8) | (encoder_raw_data[1] & 0xff);
    153c:	4b31      	ldr	r3, [pc, #196]	; (1604 <receive_data_from_encoder+0xdc>)
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	021b      	lsls	r3, r3, #8
    1542:	b21a      	sxth	r2, r3
    1544:	4b2f      	ldr	r3, [pc, #188]	; (1604 <receive_data_from_encoder+0xdc>)
    1546:	785b      	ldrb	r3, [r3, #1]
    1548:	b21b      	sxth	r3, r3
    154a:	4313      	orrs	r3, r2
    154c:	b21b      	sxth	r3, r3
    154e:	b29a      	uxth	r2, r3
    1550:	4b2e      	ldr	r3, [pc, #184]	; (160c <receive_data_from_encoder+0xe4>)
    1552:	801a      	strh	r2, [r3, #0]
	encoder_position = (float)((encoder_raw_data[2] << 14) | (encoder_raw_data[3] << 6) | (encoder_raw_data[4] >> 2));
    1554:	4b2b      	ldr	r3, [pc, #172]	; (1604 <receive_data_from_encoder+0xdc>)
    1556:	789b      	ldrb	r3, [r3, #2]
    1558:	039a      	lsls	r2, r3, #14
    155a:	4b2a      	ldr	r3, [pc, #168]	; (1604 <receive_data_from_encoder+0xdc>)
    155c:	78db      	ldrb	r3, [r3, #3]
    155e:	019b      	lsls	r3, r3, #6
    1560:	4313      	orrs	r3, r2
    1562:	4a28      	ldr	r2, [pc, #160]	; (1604 <receive_data_from_encoder+0xdc>)
    1564:	7912      	ldrb	r2, [r2, #4]
    1566:	0892      	lsrs	r2, r2, #2
    1568:	b2d2      	uxtb	r2, r2
    156a:	4313      	orrs	r3, r2
    156c:	ee07 3a90 	vmov	s15, r3
    1570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1574:	4b26      	ldr	r3, [pc, #152]	; (1610 <receive_data_from_encoder+0xe8>)
    1576:	edc3 7a00 	vstr	s15, [r3]
	encoder_position -= encoder_offset;
    157a:	4b25      	ldr	r3, [pc, #148]	; (1610 <receive_data_from_encoder+0xe8>)
    157c:	ed93 7a00 	vldr	s14, [r3]
    1580:	4b24      	ldr	r3, [pc, #144]	; (1614 <receive_data_from_encoder+0xec>)
    1582:	edd3 7a00 	vldr	s15, [r3]
    1586:	ee77 7a67 	vsub.f32	s15, s14, s15
    158a:	4b21      	ldr	r3, [pc, #132]	; (1610 <receive_data_from_encoder+0xe8>)
    158c:	edc3 7a00 	vstr	s15, [r3]
	encoder_position_in_rad = (encoder_position / 2097151) * 2 * 3.141592; // 2^21-1
    1590:	4b1f      	ldr	r3, [pc, #124]	; (1610 <receive_data_from_encoder+0xe8>)
    1592:	ed93 7a00 	vldr	s14, [r3]
    1596:	eddf 6a20 	vldr	s13, [pc, #128]	; 1618 <receive_data_from_encoder+0xf0>
    159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
    159e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    15a2:	4b1e      	ldr	r3, [pc, #120]	; (161c <receive_data_from_encoder+0xf4>)
    15a4:	ee17 0a90 	vmov	r0, s15
    15a8:	4798      	blx	r3
    15aa:	4c1d      	ldr	r4, [pc, #116]	; (1620 <receive_data_from_encoder+0xf8>)
    15ac:	a312      	add	r3, pc, #72	; (adr r3, 15f8 <receive_data_from_encoder+0xd0>)
    15ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b2:	47a0      	blx	r4
    15b4:	4603      	mov	r3, r0
    15b6:	460c      	mov	r4, r1
    15b8:	4619      	mov	r1, r3
    15ba:	4622      	mov	r2, r4
    15bc:	4b19      	ldr	r3, [pc, #100]	; (1624 <receive_data_from_encoder+0xfc>)
    15be:	4608      	mov	r0, r1
    15c0:	4611      	mov	r1, r2
    15c2:	4798      	blx	r3
    15c4:	4602      	mov	r2, r0
    15c6:	4b18      	ldr	r3, [pc, #96]	; (1628 <receive_data_from_encoder+0x100>)
    15c8:	601a      	str	r2, [r3, #0]
	encoder_Err = encoder_raw_data[4] & 0x02;
    15ca:	4b0e      	ldr	r3, [pc, #56]	; (1604 <receive_data_from_encoder+0xdc>)
    15cc:	791b      	ldrb	r3, [r3, #4]
    15ce:	f003 0302 	and.w	r3, r3, #2
    15d2:	b2da      	uxtb	r2, r3
    15d4:	4b15      	ldr	r3, [pc, #84]	; (162c <receive_data_from_encoder+0x104>)
    15d6:	701a      	strb	r2, [r3, #0]
	encoder_Not_Warning = encoder_raw_data[4] & 0x01;
    15d8:	4b0a      	ldr	r3, [pc, #40]	; (1604 <receive_data_from_encoder+0xdc>)
    15da:	791b      	ldrb	r3, [r3, #4]
    15dc:	f003 0301 	and.w	r3, r3, #1
    15e0:	b2da      	uxtb	r2, r3
    15e2:	4b13      	ldr	r3, [pc, #76]	; (1630 <receive_data_from_encoder+0x108>)
    15e4:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(ENC_CS, 1);
    15e6:	2101      	movs	r1, #1
    15e8:	200e      	movs	r0, #14
    15ea:	4b05      	ldr	r3, [pc, #20]	; (1600 <receive_data_from_encoder+0xd8>)
    15ec:	4798      	blx	r3
}
    15ee:	bf00      	nop
    15f0:	bd98      	pop	{r3, r4, r7, pc}
    15f2:	bf00      	nop
    15f4:	f3af 8000 	nop.w
    15f8:	fc8b007a 	.word	0xfc8b007a
    15fc:	400921fa 	.word	0x400921fa
    1600:	0000121d 	.word	0x0000121d
    1604:	20000000 	.word	0x20000000
    1608:	00002c55 	.word	0x00002c55
    160c:	200000c8 	.word	0x200000c8
    1610:	200000cc 	.word	0x200000cc
    1614:	200000d4 	.word	0x200000d4
    1618:	49fffff8 	.word	0x49fffff8
    161c:	00004011 	.word	0x00004011
    1620:	000040b9 	.word	0x000040b9
    1624:	000044dd 	.word	0x000044dd
    1628:	200000d0 	.word	0x200000d0
    162c:	200000d8 	.word	0x200000d8
    1630:	200000d9 	.word	0x200000d9

00001634 <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_sampctrl_reg_t;
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    1634:	b480      	push	{r7}
    1636:	b083      	sub	sp, #12
    1638:	af00      	add	r7, sp, #0
    163a:	6078      	str	r0, [r7, #4]
    163c:	6039      	str	r1, [r7, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    163e:	bf00      	nop
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1644:	683b      	ldr	r3, [r7, #0]
    1646:	4013      	ands	r3, r2
    1648:	2b00      	cmp	r3, #0
    164a:	d1f9      	bne.n	1640 <hri_adc_wait_for_sync+0xc>
	};
}
    164c:	bf00      	nop
    164e:	370c      	adds	r7, #12
    1650:	46bd      	mov	sp, r7
    1652:	f85d 7b04 	ldr.w	r7, [sp], #4
    1656:	4770      	bx	lr

00001658 <hri_adc_is_syncing>:

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    1658:	b480      	push	{r7}
    165a:	b083      	sub	sp, #12
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	6039      	str	r1, [r7, #0]
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1666:	683b      	ldr	r3, [r7, #0]
    1668:	4013      	ands	r3, r2
    166a:	2b00      	cmp	r3, #0
    166c:	bf14      	ite	ne
    166e:	2301      	movne	r3, #1
    1670:	2300      	moveq	r3, #0
    1672:	b2db      	uxtb	r3, r3
}
    1674:	4618      	mov	r0, r3
    1676:	370c      	adds	r7, #12
    1678:	46bd      	mov	sp, r7
    167a:	f85d 7b04 	ldr.w	r7, [sp], #4
    167e:	4770      	bx	lr

00001680 <hri_adc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & ADC_CTRLA_SWRST) >> ADC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_adc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1680:	b580      	push	{r7, lr}
    1682:	b082      	sub	sp, #8
    1684:	af00      	add	r7, sp, #0
    1686:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	881b      	ldrh	r3, [r3, #0]
    168c:	b29b      	uxth	r3, r3
    168e:	f043 0302 	orr.w	r3, r3, #2
    1692:	b29a      	uxth	r2, r3
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	801a      	strh	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1698:	2103      	movs	r1, #3
    169a:	6878      	ldr	r0, [r7, #4]
    169c:	4b02      	ldr	r3, [pc, #8]	; (16a8 <hri_adc_set_CTRLA_ENABLE_bit+0x28>)
    169e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    16a0:	bf00      	nop
    16a2:	3708      	adds	r7, #8
    16a4:	46bd      	mov	sp, r7
    16a6:	bd80      	pop	{r7, pc}
    16a8:	00001635 	.word	0x00001635

000016ac <hri_adc_clear_CTRLA_ENABLE_bit>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    16ac:	b580      	push	{r7, lr}
    16ae:	b082      	sub	sp, #8
    16b0:	af00      	add	r7, sp, #0
    16b2:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	881b      	ldrh	r3, [r3, #0]
    16b8:	b29b      	uxth	r3, r3
    16ba:	f023 0302 	bic.w	r3, r3, #2
    16be:	b29a      	uxth	r2, r3
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	801a      	strh	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    16c4:	2103      	movs	r1, #3
    16c6:	6878      	ldr	r0, [r7, #4]
    16c8:	4b02      	ldr	r3, [pc, #8]	; (16d4 <hri_adc_clear_CTRLA_ENABLE_bit+0x28>)
    16ca:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    16cc:	bf00      	nop
    16ce:	3708      	adds	r7, #8
    16d0:	46bd      	mov	sp, r7
    16d2:	bd80      	pop	{r7, pc}
    16d4:	00001635 	.word	0x00001635

000016d8 <hri_adc_get_CTRLA_reg>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b084      	sub	sp, #16
    16dc:	af00      	add	r7, sp, #0
    16de:	6078      	str	r0, [r7, #4]
    16e0:	460b      	mov	r3, r1
    16e2:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    16e4:	2103      	movs	r1, #3
    16e6:	6878      	ldr	r0, [r7, #4]
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <hri_adc_get_CTRLA_reg+0x2c>)
    16ea:	4798      	blx	r3
	tmp = ((Adc *)hw)->CTRLA.reg;
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	881b      	ldrh	r3, [r3, #0]
    16f0:	81fb      	strh	r3, [r7, #14]
	tmp &= mask;
    16f2:	89fa      	ldrh	r2, [r7, #14]
    16f4:	887b      	ldrh	r3, [r7, #2]
    16f6:	4013      	ands	r3, r2
    16f8:	81fb      	strh	r3, [r7, #14]
	return tmp;
    16fa:	89fb      	ldrh	r3, [r7, #14]
}
    16fc:	4618      	mov	r0, r3
    16fe:	3710      	adds	r7, #16
    1700:	46bd      	mov	sp, r7
    1702:	bd80      	pop	{r7, pc}
    1704:	00001635 	.word	0x00001635

00001708 <hri_adc_write_CTRLA_reg>:

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    1710:	460b      	mov	r3, r1
    1712:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	887a      	ldrh	r2, [r7, #2]
    1718:	801a      	strh	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    171a:	2103      	movs	r1, #3
    171c:	6878      	ldr	r0, [r7, #4]
    171e:	4b03      	ldr	r3, [pc, #12]	; (172c <hri_adc_write_CTRLA_reg+0x24>)
    1720:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1722:	bf00      	nop
    1724:	3708      	adds	r7, #8
    1726:	46bd      	mov	sp, r7
    1728:	bd80      	pop	{r7, pc}
    172a:	bf00      	nop
    172c:	00001635 	.word	0x00001635

00001730 <hri_adc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
    1730:	b480      	push	{r7}
    1732:	b083      	sub	sp, #12
    1734:	af00      	add	r7, sp, #0
    1736:	6078      	str	r0, [r7, #4]
    1738:	460b      	mov	r3, r1
    173a:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	78fa      	ldrb	r2, [r7, #3]
    1740:	709a      	strb	r2, [r3, #2]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1742:	bf00      	nop
    1744:	370c      	adds	r7, #12
    1746:	46bd      	mov	sp, r7
    1748:	f85d 7b04 	ldr.w	r7, [sp], #4
    174c:	4770      	bx	lr

0000174e <hri_adc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
    174e:	b480      	push	{r7}
    1750:	b083      	sub	sp, #12
    1752:	af00      	add	r7, sp, #0
    1754:	6078      	str	r0, [r7, #4]
    1756:	460b      	mov	r3, r1
    1758:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	78fa      	ldrb	r2, [r7, #3]
    175e:	70da      	strb	r2, [r3, #3]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1760:	bf00      	nop
    1762:	370c      	adds	r7, #12
    1764:	46bd      	mov	sp, r7
    1766:	f85d 7b04 	ldr.w	r7, [sp], #4
    176a:	4770      	bx	lr

0000176c <hri_adc_write_INPUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
    176c:	b580      	push	{r7, lr}
    176e:	b082      	sub	sp, #8
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
    1774:	460b      	mov	r3, r1
    1776:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	887a      	ldrh	r2, [r7, #2]
    177c:	809a      	strh	r2, [r3, #4]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    177e:	f640 71ff 	movw	r1, #4095	; 0xfff
    1782:	6878      	ldr	r0, [r7, #4]
    1784:	4b02      	ldr	r3, [pc, #8]	; (1790 <hri_adc_write_INPUTCTRL_reg+0x24>)
    1786:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1788:	bf00      	nop
    178a:	3708      	adds	r7, #8
    178c:	46bd      	mov	sp, r7
    178e:	bd80      	pop	{r7, pc}
    1790:	00001635 	.word	0x00001635

00001794 <hri_adc_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
    1794:	b580      	push	{r7, lr}
    1796:	b082      	sub	sp, #8
    1798:	af00      	add	r7, sp, #0
    179a:	6078      	str	r0, [r7, #4]
    179c:	460b      	mov	r3, r1
    179e:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	887a      	ldrh	r2, [r7, #2]
    17a4:	80da      	strh	r2, [r3, #6]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    17a6:	f640 71ff 	movw	r1, #4095	; 0xfff
    17aa:	6878      	ldr	r0, [r7, #4]
    17ac:	4b02      	ldr	r3, [pc, #8]	; (17b8 <hri_adc_write_CTRLB_reg+0x24>)
    17ae:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    17b0:	bf00      	nop
    17b2:	3708      	adds	r7, #8
    17b4:	46bd      	mov	sp, r7
    17b6:	bd80      	pop	{r7, pc}
    17b8:	00001635 	.word	0x00001635

000017bc <hri_adc_write_REFCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
    17bc:	b580      	push	{r7, lr}
    17be:	b082      	sub	sp, #8
    17c0:	af00      	add	r7, sp, #0
    17c2:	6078      	str	r0, [r7, #4]
    17c4:	460b      	mov	r3, r1
    17c6:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	78fa      	ldrb	r2, [r7, #3]
    17cc:	721a      	strb	r2, [r3, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    17ce:	f640 71ff 	movw	r1, #4095	; 0xfff
    17d2:	6878      	ldr	r0, [r7, #4]
    17d4:	4b02      	ldr	r3, [pc, #8]	; (17e0 <hri_adc_write_REFCTRL_reg+0x24>)
    17d6:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    17d8:	bf00      	nop
    17da:	3708      	adds	r7, #8
    17dc:	46bd      	mov	sp, r7
    17de:	bd80      	pop	{r7, pc}
    17e0:	00001635 	.word	0x00001635

000017e4 <hri_adc_write_AVGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
    17e4:	b580      	push	{r7, lr}
    17e6:	b082      	sub	sp, #8
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
    17ec:	460b      	mov	r3, r1
    17ee:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	78fa      	ldrb	r2, [r7, #3]
    17f4:	729a      	strb	r2, [r3, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    17f6:	f640 71ff 	movw	r1, #4095	; 0xfff
    17fa:	6878      	ldr	r0, [r7, #4]
    17fc:	4b02      	ldr	r3, [pc, #8]	; (1808 <hri_adc_write_AVGCTRL_reg+0x24>)
    17fe:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1800:	bf00      	nop
    1802:	3708      	adds	r7, #8
    1804:	46bd      	mov	sp, r7
    1806:	bd80      	pop	{r7, pc}
    1808:	00001635 	.word	0x00001635

0000180c <hri_adc_write_SAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
    180c:	b580      	push	{r7, lr}
    180e:	b082      	sub	sp, #8
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
    1814:	460b      	mov	r3, r1
    1816:	70fb      	strb	r3, [r7, #3]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1818:	687b      	ldr	r3, [r7, #4]
    181a:	78fa      	ldrb	r2, [r7, #3]
    181c:	72da      	strb	r2, [r3, #11]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    181e:	f640 71ff 	movw	r1, #4095	; 0xfff
    1822:	6878      	ldr	r0, [r7, #4]
    1824:	4b02      	ldr	r3, [pc, #8]	; (1830 <hri_adc_write_SAMPCTRL_reg+0x24>)
    1826:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1828:	bf00      	nop
    182a:	3708      	adds	r7, #8
    182c:	46bd      	mov	sp, r7
    182e:	bd80      	pop	{r7, pc}
    1830:	00001635 	.word	0x00001635

00001834 <hri_adc_write_WINLT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
    1834:	b580      	push	{r7, lr}
    1836:	b082      	sub	sp, #8
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
    183c:	460b      	mov	r3, r1
    183e:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	887a      	ldrh	r2, [r7, #2]
    1844:	819a      	strh	r2, [r3, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
    1846:	2180      	movs	r1, #128	; 0x80
    1848:	6878      	ldr	r0, [r7, #4]
    184a:	4b03      	ldr	r3, [pc, #12]	; (1858 <hri_adc_write_WINLT_reg+0x24>)
    184c:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    184e:	bf00      	nop
    1850:	3708      	adds	r7, #8
    1852:	46bd      	mov	sp, r7
    1854:	bd80      	pop	{r7, pc}
    1856:	bf00      	nop
    1858:	00001635 	.word	0x00001635

0000185c <hri_adc_write_WINUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	6078      	str	r0, [r7, #4]
    1864:	460b      	mov	r3, r1
    1866:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	887a      	ldrh	r2, [r7, #2]
    186c:	81da      	strh	r2, [r3, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
    186e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1872:	6878      	ldr	r0, [r7, #4]
    1874:	4b02      	ldr	r3, [pc, #8]	; (1880 <hri_adc_write_WINUT_reg+0x24>)
    1876:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1878:	bf00      	nop
    187a:	3708      	adds	r7, #8
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}
    1880:	00001635 	.word	0x00001635

00001884 <hri_adc_write_GAINCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
    1884:	b580      	push	{r7, lr}
    1886:	b082      	sub	sp, #8
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
    188c:	460b      	mov	r3, r1
    188e:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1890:	687b      	ldr	r3, [r7, #4]
    1892:	887a      	ldrh	r2, [r7, #2]
    1894:	821a      	strh	r2, [r3, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
    1896:	f44f 7100 	mov.w	r1, #512	; 0x200
    189a:	6878      	ldr	r0, [r7, #4]
    189c:	4b02      	ldr	r3, [pc, #8]	; (18a8 <hri_adc_write_GAINCORR_reg+0x24>)
    189e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    18a0:	bf00      	nop
    18a2:	3708      	adds	r7, #8
    18a4:	46bd      	mov	sp, r7
    18a6:	bd80      	pop	{r7, pc}
    18a8:	00001635 	.word	0x00001635

000018ac <hri_adc_write_OFFSETCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
    18b4:	460b      	mov	r3, r1
    18b6:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    18b8:	687b      	ldr	r3, [r7, #4]
    18ba:	887a      	ldrh	r2, [r7, #2]
    18bc:	825a      	strh	r2, [r3, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
    18be:	f44f 6180 	mov.w	r1, #1024	; 0x400
    18c2:	6878      	ldr	r0, [r7, #4]
    18c4:	4b02      	ldr	r3, [pc, #8]	; (18d0 <hri_adc_write_OFFSETCORR_reg+0x24>)
    18c6:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    18c8:	bf00      	nop
    18ca:	3708      	adds	r7, #8
    18cc:	46bd      	mov	sp, r7
    18ce:	bd80      	pop	{r7, pc}
    18d0:	00001635 	.word	0x00001635

000018d4 <hri_adc_write_CALIB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
    18d4:	b480      	push	{r7}
    18d6:	b083      	sub	sp, #12
    18d8:	af00      	add	r7, sp, #0
    18da:	6078      	str	r0, [r7, #4]
    18dc:	460b      	mov	r3, r1
    18de:	807b      	strh	r3, [r7, #2]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	887a      	ldrh	r2, [r7, #2]
    18e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	ADC_CRITICAL_SECTION_LEAVE();
}
    18e8:	bf00      	nop
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <_adc_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
    18f4:	b480      	push	{r7}
    18f6:	b083      	sub	sp, #12
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    18fc:	687b      	ldr	r3, [r7, #4]
    18fe:	f103 433d 	add.w	r3, r3, #3170893824	; 0xbd000000
    1902:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
    1906:	0a9b      	lsrs	r3, r3, #10
    1908:	b2db      	uxtb	r3, r3
}
    190a:	4618      	mov	r0, r3
    190c:	370c      	adds	r7, #12
    190e:	46bd      	mov	sp, r7
    1910:	f85d 7b04 	ldr.w	r7, [sp], #4
    1914:	4770      	bx	lr
	...

00001918 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    1918:	b580      	push	{r7, lr}
    191a:	b084      	sub	sp, #16
    191c:	af00      	add	r7, sp, #0
    191e:	6078      	str	r0, [r7, #4]
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	4618      	mov	r0, r3
    1924:	4b11      	ldr	r3, [pc, #68]	; (196c <_adc_get_regs+0x54>)
    1926:	4798      	blx	r3
    1928:	4603      	mov	r3, r0
    192a:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    192c:	2300      	movs	r3, #0
    192e:	73fb      	strb	r3, [r7, #15]
    1930:	e00e      	b.n	1950 <_adc_get_regs+0x38>
		if (_adcs[i].number == n) {
    1932:	7bfb      	ldrb	r3, [r7, #15]
    1934:	4a0e      	ldr	r2, [pc, #56]	; (1970 <_adc_get_regs+0x58>)
    1936:	2116      	movs	r1, #22
    1938:	fb01 f303 	mul.w	r3, r1, r3
    193c:	4413      	add	r3, r2
    193e:	781b      	ldrb	r3, [r3, #0]
    1940:	7bba      	ldrb	r2, [r7, #14]
    1942:	429a      	cmp	r2, r3
    1944:	d101      	bne.n	194a <_adc_get_regs+0x32>
			return i;
    1946:	7bfb      	ldrb	r3, [r7, #15]
    1948:	e00b      	b.n	1962 <_adc_get_regs+0x4a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    194a:	7bfb      	ldrb	r3, [r7, #15]
    194c:	3301      	adds	r3, #1
    194e:	73fb      	strb	r3, [r7, #15]
    1950:	7bfb      	ldrb	r3, [r7, #15]
    1952:	2b01      	cmp	r3, #1
    1954:	d9ed      	bls.n	1932 <_adc_get_regs+0x1a>
		}
	}

	ASSERT(false);
    1956:	2288      	movs	r2, #136	; 0x88
    1958:	4906      	ldr	r1, [pc, #24]	; (1974 <_adc_get_regs+0x5c>)
    195a:	2000      	movs	r0, #0
    195c:	4b06      	ldr	r3, [pc, #24]	; (1978 <_adc_get_regs+0x60>)
    195e:	4798      	blx	r3
	return 0;
    1960:	2300      	movs	r3, #0
}
    1962:	4618      	mov	r0, r3
    1964:	3710      	adds	r7, #16
    1966:	46bd      	mov	sp, r7
    1968:	bd80      	pop	{r7, pc}
    196a:	bf00      	nop
    196c:	000018f5 	.word	0x000018f5
    1970:	00004618 	.word	0x00004618
    1974:	00004644 	.word	0x00004644
    1978:	00001161 	.word	0x00001161

0000197c <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    197c:	b580      	push	{r7, lr}
    197e:	b084      	sub	sp, #16
    1980:	af00      	add	r7, sp, #0
    1982:	6078      	str	r0, [r7, #4]
    1984:	460b      	mov	r3, r1
    1986:	70fb      	strb	r3, [r7, #3]
	uint16_t calib_reg = 0;
    1988:	2300      	movs	r3, #0
    198a:	81fb      	strh	r3, [r7, #14]
	if (hw == ADC0) {
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	4a81      	ldr	r2, [pc, #516]	; (1b94 <_adc_init+0x218>)
    1990:	4293      	cmp	r3, r2
    1992:	d120      	bne.n	19d6 <_adc_init+0x5a>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    1994:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	095b      	lsrs	r3, r3, #5
    199c:	b29b      	uxth	r3, r3
    199e:	021b      	lsls	r3, r3, #8
    19a0:	b29b      	uxth	r3, r3
    19a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    19a6:	b29a      	uxth	r2, r3
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
    19a8:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	0a1b      	lsrs	r3, r3, #8
    19b0:	b29b      	uxth	r3, r3
    19b2:	011b      	lsls	r3, r3, #4
    19b4:	b29b      	uxth	r3, r3
    19b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    19ba:	b29b      	uxth	r3, r3
    19bc:	4313      	orrs	r3, r2
    19be:	b29a      	uxth	r2, r3
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
    19c0:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    19c4:	681b      	ldr	r3, [r3, #0]
    19c6:	089b      	lsrs	r3, r3, #2
    19c8:	b29b      	uxth	r3, r3
    19ca:	f003 0307 	and.w	r3, r3, #7
    19ce:	b29b      	uxth	r3, r3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
    19d0:	4313      	orrs	r3, r2
    19d2:	81fb      	strh	r3, [r7, #14]
    19d4:	e023      	b.n	1a1e <_adc_init+0xa2>
	} else if (hw == ADC1) {
    19d6:	687b      	ldr	r3, [r7, #4]
    19d8:	4a6f      	ldr	r2, [pc, #444]	; (1b98 <_adc_init+0x21c>)
    19da:	4293      	cmp	r3, r2
    19dc:	d11f      	bne.n	1a1e <_adc_init+0xa2>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    19de:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    19e2:	681b      	ldr	r3, [r3, #0]
    19e4:	0cdb      	lsrs	r3, r3, #19
    19e6:	b29b      	uxth	r3, r3
    19e8:	021b      	lsls	r3, r3, #8
    19ea:	b29b      	uxth	r3, r3
    19ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    19f0:	b29a      	uxth	r2, r3
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
    19f2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	0d9b      	lsrs	r3, r3, #22
    19fa:	b29b      	uxth	r3, r3
    19fc:	011b      	lsls	r3, r3, #4
    19fe:	b29b      	uxth	r3, r3
    1a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
    1a04:	b29b      	uxth	r3, r3
    1a06:	4313      	orrs	r3, r2
    1a08:	b29a      	uxth	r2, r3
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
    1a0a:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	0c1b      	lsrs	r3, r3, #16
    1a12:	b29b      	uxth	r3, r3
    1a14:	f003 0307 	and.w	r3, r3, #7
    1a18:	b29b      	uxth	r3, r3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
    1a1a:	4313      	orrs	r3, r2
    1a1c:	81fb      	strh	r3, [r7, #14]
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1a1e:	2101      	movs	r1, #1
    1a20:	6878      	ldr	r0, [r7, #4]
    1a22:	4b5e      	ldr	r3, [pc, #376]	; (1b9c <_adc_init+0x220>)
    1a24:	4798      	blx	r3
    1a26:	4603      	mov	r3, r0
    1a28:	f083 0301 	eor.w	r3, r3, #1
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d011      	beq.n	1a56 <_adc_init+0xda>
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1a32:	2102      	movs	r1, #2
    1a34:	6878      	ldr	r0, [r7, #4]
    1a36:	4b5a      	ldr	r3, [pc, #360]	; (1ba0 <_adc_init+0x224>)
    1a38:	4798      	blx	r3
    1a3a:	4603      	mov	r3, r0
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d006      	beq.n	1a4e <_adc_init+0xd2>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    1a40:	6878      	ldr	r0, [r7, #4]
    1a42:	4b58      	ldr	r3, [pc, #352]	; (1ba4 <_adc_init+0x228>)
    1a44:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    1a46:	2102      	movs	r1, #2
    1a48:	6878      	ldr	r0, [r7, #4]
    1a4a:	4b57      	ldr	r3, [pc, #348]	; (1ba8 <_adc_init+0x22c>)
    1a4c:	4798      	blx	r3
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
    1a4e:	2101      	movs	r1, #1
    1a50:	6878      	ldr	r0, [r7, #4]
    1a52:	4b56      	ldr	r3, [pc, #344]	; (1bac <_adc_init+0x230>)
    1a54:	4798      	blx	r3
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    1a56:	2101      	movs	r1, #1
    1a58:	6878      	ldr	r0, [r7, #4]
    1a5a:	4b53      	ldr	r3, [pc, #332]	; (1ba8 <_adc_init+0x22c>)
    1a5c:	4798      	blx	r3

	hri_adc_write_CALIB_reg(hw, calib_reg);
    1a5e:	89fb      	ldrh	r3, [r7, #14]
    1a60:	4619      	mov	r1, r3
    1a62:	6878      	ldr	r0, [r7, #4]
    1a64:	4b52      	ldr	r3, [pc, #328]	; (1bb0 <_adc_init+0x234>)
    1a66:	4798      	blx	r3
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1a68:	78fb      	ldrb	r3, [r7, #3]
    1a6a:	4a52      	ldr	r2, [pc, #328]	; (1bb4 <_adc_init+0x238>)
    1a6c:	2116      	movs	r1, #22
    1a6e:	fb01 f303 	mul.w	r3, r1, r3
    1a72:	4413      	add	r3, r2
    1a74:	3304      	adds	r3, #4
    1a76:	881b      	ldrh	r3, [r3, #0]
    1a78:	4619      	mov	r1, r3
    1a7a:	6878      	ldr	r0, [r7, #4]
    1a7c:	4b4e      	ldr	r3, [pc, #312]	; (1bb8 <_adc_init+0x23c>)
    1a7e:	4798      	blx	r3
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1a80:	78fb      	ldrb	r3, [r7, #3]
    1a82:	4a4c      	ldr	r2, [pc, #304]	; (1bb4 <_adc_init+0x238>)
    1a84:	2116      	movs	r1, #22
    1a86:	fb01 f303 	mul.w	r3, r1, r3
    1a8a:	4413      	add	r3, r2
    1a8c:	3306      	adds	r3, #6
    1a8e:	781b      	ldrb	r3, [r3, #0]
    1a90:	4619      	mov	r1, r3
    1a92:	6878      	ldr	r0, [r7, #4]
    1a94:	4b49      	ldr	r3, [pc, #292]	; (1bbc <_adc_init+0x240>)
    1a96:	4798      	blx	r3
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1a98:	78fb      	ldrb	r3, [r7, #3]
    1a9a:	4a46      	ldr	r2, [pc, #280]	; (1bb4 <_adc_init+0x238>)
    1a9c:	2116      	movs	r1, #22
    1a9e:	fb01 f303 	mul.w	r3, r1, r3
    1aa2:	4413      	add	r3, r2
    1aa4:	3307      	adds	r3, #7
    1aa6:	781b      	ldrb	r3, [r3, #0]
    1aa8:	4619      	mov	r1, r3
    1aaa:	6878      	ldr	r0, [r7, #4]
    1aac:	4b44      	ldr	r3, [pc, #272]	; (1bc0 <_adc_init+0x244>)
    1aae:	4798      	blx	r3
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1ab0:	78fb      	ldrb	r3, [r7, #3]
    1ab2:	4a40      	ldr	r2, [pc, #256]	; (1bb4 <_adc_init+0x238>)
    1ab4:	2116      	movs	r1, #22
    1ab6:	fb01 f303 	mul.w	r3, r1, r3
    1aba:	4413      	add	r3, r2
    1abc:	3308      	adds	r3, #8
    1abe:	881b      	ldrh	r3, [r3, #0]
    1ac0:	4619      	mov	r1, r3
    1ac2:	6878      	ldr	r0, [r7, #4]
    1ac4:	4b3f      	ldr	r3, [pc, #252]	; (1bc4 <_adc_init+0x248>)
    1ac6:	4798      	blx	r3
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1ac8:	78fb      	ldrb	r3, [r7, #3]
    1aca:	4a3a      	ldr	r2, [pc, #232]	; (1bb4 <_adc_init+0x238>)
    1acc:	2116      	movs	r1, #22
    1ace:	fb01 f303 	mul.w	r3, r1, r3
    1ad2:	4413      	add	r3, r2
    1ad4:	330a      	adds	r3, #10
    1ad6:	781b      	ldrb	r3, [r3, #0]
    1ad8:	4619      	mov	r1, r3
    1ada:	6878      	ldr	r0, [r7, #4]
    1adc:	4b3a      	ldr	r3, [pc, #232]	; (1bc8 <_adc_init+0x24c>)
    1ade:	4798      	blx	r3
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1ae0:	78fb      	ldrb	r3, [r7, #3]
    1ae2:	4a34      	ldr	r2, [pc, #208]	; (1bb4 <_adc_init+0x238>)
    1ae4:	2116      	movs	r1, #22
    1ae6:	fb01 f303 	mul.w	r3, r1, r3
    1aea:	4413      	add	r3, r2
    1aec:	330b      	adds	r3, #11
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	4619      	mov	r1, r3
    1af2:	6878      	ldr	r0, [r7, #4]
    1af4:	4b35      	ldr	r3, [pc, #212]	; (1bcc <_adc_init+0x250>)
    1af6:	4798      	blx	r3
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1af8:	78fb      	ldrb	r3, [r7, #3]
    1afa:	4a2e      	ldr	r2, [pc, #184]	; (1bb4 <_adc_init+0x238>)
    1afc:	2116      	movs	r1, #22
    1afe:	fb01 f303 	mul.w	r3, r1, r3
    1b02:	4413      	add	r3, r2
    1b04:	330c      	adds	r3, #12
    1b06:	881b      	ldrh	r3, [r3, #0]
    1b08:	4619      	mov	r1, r3
    1b0a:	6878      	ldr	r0, [r7, #4]
    1b0c:	4b30      	ldr	r3, [pc, #192]	; (1bd0 <_adc_init+0x254>)
    1b0e:	4798      	blx	r3
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1b10:	78fb      	ldrb	r3, [r7, #3]
    1b12:	4a28      	ldr	r2, [pc, #160]	; (1bb4 <_adc_init+0x238>)
    1b14:	2116      	movs	r1, #22
    1b16:	fb01 f303 	mul.w	r3, r1, r3
    1b1a:	4413      	add	r3, r2
    1b1c:	330e      	adds	r3, #14
    1b1e:	881b      	ldrh	r3, [r3, #0]
    1b20:	4619      	mov	r1, r3
    1b22:	6878      	ldr	r0, [r7, #4]
    1b24:	4b2b      	ldr	r3, [pc, #172]	; (1bd4 <_adc_init+0x258>)
    1b26:	4798      	blx	r3
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1b28:	78fb      	ldrb	r3, [r7, #3]
    1b2a:	4a22      	ldr	r2, [pc, #136]	; (1bb4 <_adc_init+0x238>)
    1b2c:	2116      	movs	r1, #22
    1b2e:	fb01 f303 	mul.w	r3, r1, r3
    1b32:	4413      	add	r3, r2
    1b34:	3310      	adds	r3, #16
    1b36:	881b      	ldrh	r3, [r3, #0]
    1b38:	4619      	mov	r1, r3
    1b3a:	6878      	ldr	r0, [r7, #4]
    1b3c:	4b26      	ldr	r3, [pc, #152]	; (1bd8 <_adc_init+0x25c>)
    1b3e:	4798      	blx	r3
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1b40:	78fb      	ldrb	r3, [r7, #3]
    1b42:	4a1c      	ldr	r2, [pc, #112]	; (1bb4 <_adc_init+0x238>)
    1b44:	2116      	movs	r1, #22
    1b46:	fb01 f303 	mul.w	r3, r1, r3
    1b4a:	4413      	add	r3, r2
    1b4c:	3312      	adds	r3, #18
    1b4e:	881b      	ldrh	r3, [r3, #0]
    1b50:	4619      	mov	r1, r3
    1b52:	6878      	ldr	r0, [r7, #4]
    1b54:	4b21      	ldr	r3, [pc, #132]	; (1bdc <_adc_init+0x260>)
    1b56:	4798      	blx	r3
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1b58:	78fb      	ldrb	r3, [r7, #3]
    1b5a:	4a16      	ldr	r2, [pc, #88]	; (1bb4 <_adc_init+0x238>)
    1b5c:	2116      	movs	r1, #22
    1b5e:	fb01 f303 	mul.w	r3, r1, r3
    1b62:	4413      	add	r3, r2
    1b64:	3314      	adds	r3, #20
    1b66:	781b      	ldrb	r3, [r3, #0]
    1b68:	4619      	mov	r1, r3
    1b6a:	6878      	ldr	r0, [r7, #4]
    1b6c:	4b1c      	ldr	r3, [pc, #112]	; (1be0 <_adc_init+0x264>)
    1b6e:	4798      	blx	r3
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1b70:	78fb      	ldrb	r3, [r7, #3]
    1b72:	4a10      	ldr	r2, [pc, #64]	; (1bb4 <_adc_init+0x238>)
    1b74:	2116      	movs	r1, #22
    1b76:	fb01 f303 	mul.w	r3, r1, r3
    1b7a:	4413      	add	r3, r2
    1b7c:	3302      	adds	r3, #2
    1b7e:	881b      	ldrh	r3, [r3, #0]
    1b80:	4619      	mov	r1, r3
    1b82:	6878      	ldr	r0, [r7, #4]
    1b84:	4b09      	ldr	r3, [pc, #36]	; (1bac <_adc_init+0x230>)
    1b86:	4798      	blx	r3

	return ERR_NONE;
    1b88:	2300      	movs	r3, #0
}
    1b8a:	4618      	mov	r0, r3
    1b8c:	3710      	adds	r7, #16
    1b8e:	46bd      	mov	sp, r7
    1b90:	bd80      	pop	{r7, pc}
    1b92:	bf00      	nop
    1b94:	43001c00 	.word	0x43001c00
    1b98:	43002000 	.word	0x43002000
    1b9c:	00001659 	.word	0x00001659
    1ba0:	000016d9 	.word	0x000016d9
    1ba4:	000016ad 	.word	0x000016ad
    1ba8:	00001635 	.word	0x00001635
    1bac:	00001709 	.word	0x00001709
    1bb0:	000018d5 	.word	0x000018d5
    1bb4:	00004618 	.word	0x00004618
    1bb8:	00001795 	.word	0x00001795
    1bbc:	000017bd 	.word	0x000017bd
    1bc0:	00001731 	.word	0x00001731
    1bc4:	0000176d 	.word	0x0000176d
    1bc8:	000017e5 	.word	0x000017e5
    1bcc:	0000180d 	.word	0x0000180d
    1bd0:	00001835 	.word	0x00001835
    1bd4:	0000185d 	.word	0x0000185d
    1bd8:	00001885 	.word	0x00001885
    1bdc:	000018ad 	.word	0x000018ad
    1be0:	0000174f 	.word	0x0000174f

00001be4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1be4:	b580      	push	{r7, lr}
    1be6:	b082      	sub	sp, #8
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
    1bec:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	bf14      	ite	ne
    1bf4:	2301      	movne	r3, #1
    1bf6:	2300      	moveq	r3, #0
    1bf8:	b2db      	uxtb	r3, r3
    1bfa:	22d9      	movs	r2, #217	; 0xd9
    1bfc:	490a      	ldr	r1, [pc, #40]	; (1c28 <_adc_sync_init+0x44>)
    1bfe:	4618      	mov	r0, r3
    1c00:	4b0a      	ldr	r3, [pc, #40]	; (1c2c <_adc_sync_init+0x48>)
    1c02:	4798      	blx	r3

	device->hw = hw;
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	683a      	ldr	r2, [r7, #0]
    1c08:	601a      	str	r2, [r3, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1c0a:	683b      	ldr	r3, [r7, #0]
    1c0c:	4618      	mov	r0, r3
    1c0e:	4b08      	ldr	r3, [pc, #32]	; (1c30 <_adc_sync_init+0x4c>)
    1c10:	4798      	blx	r3
    1c12:	4603      	mov	r3, r0
    1c14:	4619      	mov	r1, r3
    1c16:	6838      	ldr	r0, [r7, #0]
    1c18:	4b06      	ldr	r3, [pc, #24]	; (1c34 <_adc_sync_init+0x50>)
    1c1a:	4798      	blx	r3
    1c1c:	4603      	mov	r3, r0
}
    1c1e:	4618      	mov	r0, r3
    1c20:	3708      	adds	r7, #8
    1c22:	46bd      	mov	sp, r7
    1c24:	bd80      	pop	{r7, pc}
    1c26:	bf00      	nop
    1c28:	00004644 	.word	0x00004644
    1c2c:	00001161 	.word	0x00001161
    1c30:	00001919 	.word	0x00001919
    1c34:	0000197d 	.word	0x0000197d

00001c38 <_adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	b082      	sub	sp, #8
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	6078      	str	r0, [r7, #4]
    1c40:	460b      	mov	r3, r1
    1c42:	70fb      	strb	r3, [r7, #3]
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	681b      	ldr	r3, [r3, #0]
    1c48:	4618      	mov	r0, r3
    1c4a:	4b03      	ldr	r3, [pc, #12]	; (1c58 <_adc_sync_enable_channel+0x20>)
    1c4c:	4798      	blx	r3
}
    1c4e:	bf00      	nop
    1c50:	3708      	adds	r7, #8
    1c52:	46bd      	mov	sp, r7
    1c54:	bd80      	pop	{r7, pc}
    1c56:	bf00      	nop
    1c58:	00001681 	.word	0x00001681

00001c5c <hri_ccl_set_CTRL_ENABLE_bit>:
	tmp = (tmp & CCL_CTRL_SWRST) >> CCL_CTRL_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_ccl_set_CTRL_ENABLE_bit(const void *const hw)
{
    1c5c:	b480      	push	{r7}
    1c5e:	b083      	sub	sp, #12
    1c60:	af00      	add	r7, sp, #0
    1c62:	6078      	str	r0, [r7, #4]
	CCL_CRITICAL_SECTION_ENTER();
	((Ccl *)hw)->CTRL.reg |= CCL_CTRL_ENABLE;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	781b      	ldrb	r3, [r3, #0]
    1c68:	b2db      	uxtb	r3, r3
    1c6a:	f043 0302 	orr.w	r3, r3, #2
    1c6e:	b2da      	uxtb	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	701a      	strb	r2, [r3, #0]
	CCL_CRITICAL_SECTION_LEAVE();
}
    1c74:	bf00      	nop
    1c76:	370c      	adds	r7, #12
    1c78:	46bd      	mov	sp, r7
    1c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c7e:	4770      	bx	lr

00001c80 <hri_ccl_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_ccl_write_CTRL_reg(const void *const hw, hri_ccl_ctrl_reg_t data)
{
    1c80:	b480      	push	{r7}
    1c82:	b083      	sub	sp, #12
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
    1c88:	460b      	mov	r3, r1
    1c8a:	70fb      	strb	r3, [r7, #3]
	CCL_CRITICAL_SECTION_ENTER();
	((Ccl *)hw)->CTRL.reg = data;
    1c8c:	687b      	ldr	r3, [r7, #4]
    1c8e:	78fa      	ldrb	r2, [r7, #3]
    1c90:	701a      	strb	r2, [r3, #0]
	CCL_CRITICAL_SECTION_LEAVE();
}
    1c92:	bf00      	nop
    1c94:	370c      	adds	r7, #12
    1c96:	46bd      	mov	sp, r7
    1c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c9c:	4770      	bx	lr

00001c9e <hri_ccl_write_SEQCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_ccl_write_SEQCTRL_reg(const void *const hw, uint8_t index, hri_ccl_seqctrl_reg_t data)
{
    1c9e:	b480      	push	{r7}
    1ca0:	b083      	sub	sp, #12
    1ca2:	af00      	add	r7, sp, #0
    1ca4:	6078      	str	r0, [r7, #4]
    1ca6:	460b      	mov	r3, r1
    1ca8:	70fb      	strb	r3, [r7, #3]
    1caa:	4613      	mov	r3, r2
    1cac:	70bb      	strb	r3, [r7, #2]
	CCL_CRITICAL_SECTION_ENTER();
	((Ccl *)hw)->SEQCTRL[index].reg = data;
    1cae:	78fb      	ldrb	r3, [r7, #3]
    1cb0:	687a      	ldr	r2, [r7, #4]
    1cb2:	4413      	add	r3, r2
    1cb4:	78ba      	ldrb	r2, [r7, #2]
    1cb6:	711a      	strb	r2, [r3, #4]
	CCL_CRITICAL_SECTION_LEAVE();
}
    1cb8:	bf00      	nop
    1cba:	370c      	adds	r7, #12
    1cbc:	46bd      	mov	sp, r7
    1cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc2:	4770      	bx	lr

00001cc4 <hri_ccl_write_LUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_ccl_write_LUTCTRL_reg(const void *const hw, uint8_t index, hri_ccl_lutctrl_reg_t data)
{
    1cc4:	b480      	push	{r7}
    1cc6:	b085      	sub	sp, #20
    1cc8:	af00      	add	r7, sp, #0
    1cca:	60f8      	str	r0, [r7, #12]
    1ccc:	460b      	mov	r3, r1
    1cce:	607a      	str	r2, [r7, #4]
    1cd0:	72fb      	strb	r3, [r7, #11]
	CCL_CRITICAL_SECTION_ENTER();
	((Ccl *)hw)->LUTCTRL[index].reg = data;
    1cd2:	7afa      	ldrb	r2, [r7, #11]
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	3202      	adds	r2, #2
    1cd8:	6879      	ldr	r1, [r7, #4]
    1cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CCL_CRITICAL_SECTION_LEAVE();
}
    1cde:	bf00      	nop
    1ce0:	3714      	adds	r7, #20
    1ce2:	46bd      	mov	sp, r7
    1ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ce8:	4770      	bx	lr
	...

00001cec <_custom_logic_init>:
const struct _ccl_regs _ccl_reg_cfgs = {{REPEAT_MACRO(_CCL_LUTCTRL, unused, REG_LUTCTRL_NUM)},
                                        {REPEAT_MACRO(_CCL_SEQCTRL, unused, REG_SEQCTRL_NUM)},
                                        _CCL_CTRL()};

int32_t _custom_logic_init(void)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	b082      	sub	sp, #8
    1cf0:	af00      	add	r7, sp, #0
	uint8_t i;

	hri_ccl_write_CTRL_reg(CCL, 0);
    1cf2:	2100      	movs	r1, #0
    1cf4:	481a      	ldr	r0, [pc, #104]	; (1d60 <_custom_logic_init+0x74>)
    1cf6:	4b1b      	ldr	r3, [pc, #108]	; (1d64 <_custom_logic_init+0x78>)
    1cf8:	4798      	blx	r3
	hri_ccl_write_CTRL_reg(CCL, CCL_CTRL_SWRST);
    1cfa:	2101      	movs	r1, #1
    1cfc:	4818      	ldr	r0, [pc, #96]	; (1d60 <_custom_logic_init+0x74>)
    1cfe:	4b19      	ldr	r3, [pc, #100]	; (1d64 <_custom_logic_init+0x78>)
    1d00:	4798      	blx	r3

	for (i = 0; i < REG_SEQCTRL_NUM; i++) {
    1d02:	2300      	movs	r3, #0
    1d04:	71fb      	strb	r3, [r7, #7]
    1d06:	e00b      	b.n	1d20 <_custom_logic_init+0x34>
		hri_ccl_write_SEQCTRL_reg(CCL, i, _ccl_reg_cfgs.seqctrl[i]);
    1d08:	79fb      	ldrb	r3, [r7, #7]
    1d0a:	4a17      	ldr	r2, [pc, #92]	; (1d68 <_custom_logic_init+0x7c>)
    1d0c:	4413      	add	r3, r2
    1d0e:	7c1a      	ldrb	r2, [r3, #16]
    1d10:	79fb      	ldrb	r3, [r7, #7]
    1d12:	4619      	mov	r1, r3
    1d14:	4812      	ldr	r0, [pc, #72]	; (1d60 <_custom_logic_init+0x74>)
    1d16:	4b15      	ldr	r3, [pc, #84]	; (1d6c <_custom_logic_init+0x80>)
    1d18:	4798      	blx	r3
	for (i = 0; i < REG_SEQCTRL_NUM; i++) {
    1d1a:	79fb      	ldrb	r3, [r7, #7]
    1d1c:	3301      	adds	r3, #1
    1d1e:	71fb      	strb	r3, [r7, #7]
    1d20:	79fb      	ldrb	r3, [r7, #7]
    1d22:	2b01      	cmp	r3, #1
    1d24:	d9f0      	bls.n	1d08 <_custom_logic_init+0x1c>
	}
	for (i = 0; i < REG_LUTCTRL_NUM; i++) {
    1d26:	2300      	movs	r3, #0
    1d28:	71fb      	strb	r3, [r7, #7]
    1d2a:	e00b      	b.n	1d44 <_custom_logic_init+0x58>
		hri_ccl_write_LUTCTRL_reg(CCL, i, _ccl_reg_cfgs.lutctrl[i]);
    1d2c:	79fb      	ldrb	r3, [r7, #7]
    1d2e:	4a0e      	ldr	r2, [pc, #56]	; (1d68 <_custom_logic_init+0x7c>)
    1d30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1d34:	79fb      	ldrb	r3, [r7, #7]
    1d36:	4619      	mov	r1, r3
    1d38:	4809      	ldr	r0, [pc, #36]	; (1d60 <_custom_logic_init+0x74>)
    1d3a:	4b0d      	ldr	r3, [pc, #52]	; (1d70 <_custom_logic_init+0x84>)
    1d3c:	4798      	blx	r3
	for (i = 0; i < REG_LUTCTRL_NUM; i++) {
    1d3e:	79fb      	ldrb	r3, [r7, #7]
    1d40:	3301      	adds	r3, #1
    1d42:	71fb      	strb	r3, [r7, #7]
    1d44:	79fb      	ldrb	r3, [r7, #7]
    1d46:	2b03      	cmp	r3, #3
    1d48:	d9f0      	bls.n	1d2c <_custom_logic_init+0x40>
	}

	hri_ccl_write_CTRL_reg(CCL, _ccl_reg_cfgs.ctrl);
    1d4a:	2300      	movs	r3, #0
    1d4c:	4619      	mov	r1, r3
    1d4e:	4804      	ldr	r0, [pc, #16]	; (1d60 <_custom_logic_init+0x74>)
    1d50:	4b04      	ldr	r3, [pc, #16]	; (1d64 <_custom_logic_init+0x78>)
    1d52:	4798      	blx	r3
	return ERR_NONE;
    1d54:	2300      	movs	r3, #0
}
    1d56:	4618      	mov	r0, r3
    1d58:	3708      	adds	r7, #8
    1d5a:	46bd      	mov	sp, r7
    1d5c:	bd80      	pop	{r7, pc}
    1d5e:	bf00      	nop
    1d60:	42003800 	.word	0x42003800
    1d64:	00001c81 	.word	0x00001c81
    1d68:	0000465c 	.word	0x0000465c
    1d6c:	00001c9f 	.word	0x00001c9f
    1d70:	00001cc5 	.word	0x00001cc5

00001d74 <_custom_logic_enable>:
	hri_ccl_clear_CTRL_ENABLE_bit(CCL);
	hri_ccl_write_CTRL_reg(CCL, CCL_CTRL_SWRST);
}

int32_t _custom_logic_enable(void)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	af00      	add	r7, sp, #0
	hri_ccl_set_CTRL_ENABLE_bit(CCL);
    1d78:	4802      	ldr	r0, [pc, #8]	; (1d84 <_custom_logic_enable+0x10>)
    1d7a:	4b03      	ldr	r3, [pc, #12]	; (1d88 <_custom_logic_enable+0x14>)
    1d7c:	4798      	blx	r3
	return ERR_NONE;
    1d7e:	2300      	movs	r3, #0
}
    1d80:	4618      	mov	r0, r3
    1d82:	bd80      	pop	{r7, pc}
    1d84:	42003800 	.word	0x42003800
    1d88:	00001c5d 	.word	0x00001c5d

00001d8c <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1d8c:	b480      	push	{r7}
    1d8e:	b083      	sub	sp, #12
    1d90:	af00      	add	r7, sp, #0
    1d92:	6078      	str	r0, [r7, #4]
    1d94:	460b      	mov	r3, r1
    1d96:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	881b      	ldrh	r3, [r3, #0]
    1d9c:	b29a      	uxth	r2, r3
    1d9e:	887b      	ldrh	r3, [r7, #2]
    1da0:	021b      	lsls	r3, r3, #8
    1da2:	b29b      	uxth	r3, r3
    1da4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1da8:	b29b      	uxth	r3, r3
    1daa:	4313      	orrs	r3, r2
    1dac:	b29a      	uxth	r2, r3
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1db2:	bf00      	nop
    1db4:	370c      	adds	r7, #12
    1db6:	46bd      	mov	sp, r7
    1db8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dbc:	4770      	bx	lr
	...

00001dc0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1dc4:	2105      	movs	r1, #5
    1dc6:	480a      	ldr	r0, [pc, #40]	; (1df0 <_init_chip+0x30>)
    1dc8:	4b0a      	ldr	r3, [pc, #40]	; (1df4 <_init_chip+0x34>)
    1dca:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1dcc:	4b0a      	ldr	r3, [pc, #40]	; (1df8 <_init_chip+0x38>)
    1dce:	4798      	blx	r3
	_oscctrl_init_sources();
    1dd0:	4b0a      	ldr	r3, [pc, #40]	; (1dfc <_init_chip+0x3c>)
    1dd2:	4798      	blx	r3
	_mclk_init();
    1dd4:	4b0a      	ldr	r3, [pc, #40]	; (1e00 <_init_chip+0x40>)
    1dd6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1dd8:	2002      	movs	r0, #2
    1dda:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <_init_chip+0x44>)
    1ddc:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    1dde:	4b0a      	ldr	r3, [pc, #40]	; (1e08 <_init_chip+0x48>)
    1de0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1de2:	f640 70fd 	movw	r0, #4093	; 0xffd
    1de6:	4b07      	ldr	r3, [pc, #28]	; (1e04 <_init_chip+0x44>)
    1de8:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    1dea:	bf00      	nop
    1dec:	bd80      	pop	{r7, pc}
    1dee:	bf00      	nop
    1df0:	41004000 	.word	0x41004000
    1df4:	00001d8d 	.word	0x00001d8d
    1df8:	00002065 	.word	0x00002065
    1dfc:	0000233d 	.word	0x0000233d
    1e00:	00001fe1 	.word	0x00001fe1
    1e04:	00001f79 	.word	0x00001f79
    1e08:	00002359 	.word	0x00002359

00001e0c <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b085      	sub	sp, #20
    1e10:	af00      	add	r7, sp, #0
    1e12:	60f8      	str	r0, [r7, #12]
    1e14:	460b      	mov	r3, r1
    1e16:	607a      	str	r2, [r7, #4]
    1e18:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1e1a:	7afa      	ldrb	r2, [r7, #11]
    1e1c:	68fb      	ldr	r3, [r7, #12]
    1e1e:	3248      	adds	r2, #72	; 0x48
    1e20:	6879      	ldr	r1, [r7, #4]
    1e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    1e26:	bf00      	nop
    1e28:	3714      	adds	r7, #20
    1e2a:	46bd      	mov	sp, r7
    1e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e30:	4770      	bx	lr

00001e32 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    1e32:	b480      	push	{r7}
    1e34:	b083      	sub	sp, #12
    1e36:	af00      	add	r7, sp, #0
    1e38:	6078      	str	r0, [r7, #4]
    1e3a:	460b      	mov	r3, r1
    1e3c:	70fb      	strb	r3, [r7, #3]
    1e3e:	4613      	mov	r3, r2
    1e40:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1e42:	78fb      	ldrb	r3, [r7, #3]
    1e44:	687a      	ldr	r2, [r7, #4]
    1e46:	3304      	adds	r3, #4
    1e48:	00db      	lsls	r3, r3, #3
    1e4a:	4413      	add	r3, r2
    1e4c:	78ba      	ldrb	r2, [r7, #2]
    1e4e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1e50:	78fb      	ldrb	r3, [r7, #3]
    1e52:	78ba      	ldrb	r2, [r7, #2]
    1e54:	43d2      	mvns	r2, r2
    1e56:	b2d1      	uxtb	r1, r2
    1e58:	687a      	ldr	r2, [r7, #4]
    1e5a:	3304      	adds	r3, #4
    1e5c:	00db      	lsls	r3, r3, #3
    1e5e:	4413      	add	r3, r2
    1e60:	460a      	mov	r2, r1
    1e62:	711a      	strb	r2, [r3, #4]
}
    1e64:	bf00      	nop
    1e66:	370c      	adds	r7, #12
    1e68:	46bd      	mov	sp, r7
    1e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e6e:	4770      	bx	lr

00001e70 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    1e70:	b480      	push	{r7}
    1e72:	b085      	sub	sp, #20
    1e74:	af00      	add	r7, sp, #0
    1e76:	60f8      	str	r0, [r7, #12]
    1e78:	460b      	mov	r3, r1
    1e7a:	607a      	str	r2, [r7, #4]
    1e7c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1e7e:	7afa      	ldrb	r2, [r7, #11]
    1e80:	68fb      	ldr	r3, [r7, #12]
    1e82:	3204      	adds	r2, #4
    1e84:	6879      	ldr	r1, [r7, #4]
    1e86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    1e8a:	bf00      	nop
    1e8c:	3714      	adds	r7, #20
    1e8e:	46bd      	mov	sp, r7
    1e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e94:	4770      	bx	lr
	...

00001e98 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b082      	sub	sp, #8
    1e9c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1e9e:	2300      	movs	r3, #0
    1ea0:	71fb      	strb	r3, [r7, #7]
    1ea2:	e00b      	b.n	1ebc <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1ea4:	79fb      	ldrb	r3, [r7, #7]
    1ea6:	4a18      	ldr	r2, [pc, #96]	; (1f08 <_event_system_init+0x70>)
    1ea8:	5cd3      	ldrb	r3, [r2, r3]
    1eaa:	461a      	mov	r2, r3
    1eac:	79fb      	ldrb	r3, [r7, #7]
    1eae:	4619      	mov	r1, r3
    1eb0:	4816      	ldr	r0, [pc, #88]	; (1f0c <_event_system_init+0x74>)
    1eb2:	4b17      	ldr	r3, [pc, #92]	; (1f10 <_event_system_init+0x78>)
    1eb4:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    1eb6:	79fb      	ldrb	r3, [r7, #7]
    1eb8:	3301      	adds	r3, #1
    1eba:	71fb      	strb	r3, [r7, #7]
    1ebc:	79fb      	ldrb	r3, [r7, #7]
    1ebe:	2b42      	cmp	r3, #66	; 0x42
    1ec0:	d9f0      	bls.n	1ea4 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1ec2:	2300      	movs	r3, #0
    1ec4:	71fb      	strb	r3, [r7, #7]
    1ec6:	e016      	b.n	1ef6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1ec8:	79fb      	ldrb	r3, [r7, #7]
    1eca:	4a12      	ldr	r2, [pc, #72]	; (1f14 <_event_system_init+0x7c>)
    1ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    1ed0:	461a      	mov	r2, r3
    1ed2:	79fb      	ldrb	r3, [r7, #7]
    1ed4:	4619      	mov	r1, r3
    1ed6:	480d      	ldr	r0, [pc, #52]	; (1f0c <_event_system_init+0x74>)
    1ed8:	4b0f      	ldr	r3, [pc, #60]	; (1f18 <_event_system_init+0x80>)
    1eda:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1edc:	79fb      	ldrb	r3, [r7, #7]
    1ede:	4a0f      	ldr	r2, [pc, #60]	; (1f1c <_event_system_init+0x84>)
    1ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ee4:	b2da      	uxtb	r2, r3
    1ee6:	79fb      	ldrb	r3, [r7, #7]
    1ee8:	4619      	mov	r1, r3
    1eea:	4808      	ldr	r0, [pc, #32]	; (1f0c <_event_system_init+0x74>)
    1eec:	4b0c      	ldr	r3, [pc, #48]	; (1f20 <_event_system_init+0x88>)
    1eee:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1ef0:	79fb      	ldrb	r3, [r7, #7]
    1ef2:	3301      	adds	r3, #1
    1ef4:	71fb      	strb	r3, [r7, #7]
    1ef6:	79fb      	ldrb	r3, [r7, #7]
    1ef8:	2b1f      	cmp	r3, #31
    1efa:	d9e5      	bls.n	1ec8 <_event_system_init+0x30>
	}

	return ERR_NONE;
    1efc:	2300      	movs	r3, #0
}
    1efe:	4618      	mov	r0, r3
    1f00:	3708      	adds	r7, #8
    1f02:	46bd      	mov	sp, r7
    1f04:	bd80      	pop	{r7, pc}
    1f06:	bf00      	nop
    1f08:	00004670 	.word	0x00004670
    1f0c:	4100e000 	.word	0x4100e000
    1f10:	00001e0d 	.word	0x00001e0d
    1f14:	000046b4 	.word	0x000046b4
    1f18:	00001e71 	.word	0x00001e71
    1f1c:	000046f4 	.word	0x000046f4
    1f20:	00001e33 	.word	0x00001e33

00001f24 <hri_gclk_wait_for_sync>:
{
    1f24:	b480      	push	{r7}
    1f26:	b083      	sub	sp, #12
    1f28:	af00      	add	r7, sp, #0
    1f2a:	6078      	str	r0, [r7, #4]
    1f2c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f2e:	bf00      	nop
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	685a      	ldr	r2, [r3, #4]
    1f34:	683b      	ldr	r3, [r7, #0]
    1f36:	4013      	ands	r3, r2
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d1f9      	bne.n	1f30 <hri_gclk_wait_for_sync+0xc>
}
    1f3c:	bf00      	nop
    1f3e:	370c      	adds	r7, #12
    1f40:	46bd      	mov	sp, r7
    1f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f46:	4770      	bx	lr

00001f48 <hri_gclk_write_GENCTRL_reg>:
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	b084      	sub	sp, #16
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	60f8      	str	r0, [r7, #12]
    1f50:	460b      	mov	r3, r1
    1f52:	607a      	str	r2, [r7, #4]
    1f54:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1f56:	7afa      	ldrb	r2, [r7, #11]
    1f58:	68fb      	ldr	r3, [r7, #12]
    1f5a:	3208      	adds	r2, #8
    1f5c:	6879      	ldr	r1, [r7, #4]
    1f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    1f62:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    1f66:	68f8      	ldr	r0, [r7, #12]
    1f68:	4b02      	ldr	r3, [pc, #8]	; (1f74 <hri_gclk_write_GENCTRL_reg+0x2c>)
    1f6a:	4798      	blx	r3
}
    1f6c:	bf00      	nop
    1f6e:	3710      	adds	r7, #16
    1f70:	46bd      	mov	sp, r7
    1f72:	bd80      	pop	{r7, pc}
    1f74:	00001f25 	.word	0x00001f25

00001f78 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1f80:	687b      	ldr	r3, [r7, #4]
    1f82:	f003 0301 	and.w	r3, r3, #1
    1f86:	2b00      	cmp	r3, #0
    1f88:	d004      	beq.n	1f94 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1f8a:	4a09      	ldr	r2, [pc, #36]	; (1fb0 <_gclk_init_generators_by_fref+0x38>)
    1f8c:	2100      	movs	r1, #0
    1f8e:	4809      	ldr	r0, [pc, #36]	; (1fb4 <_gclk_init_generators_by_fref+0x3c>)
    1f90:	4b09      	ldr	r3, [pc, #36]	; (1fb8 <_gclk_init_generators_by_fref+0x40>)
    1f92:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1f94:	687b      	ldr	r3, [r7, #4]
    1f96:	f003 0302 	and.w	r3, r3, #2
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d004      	beq.n	1fa8 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    1f9e:	4a07      	ldr	r2, [pc, #28]	; (1fbc <_gclk_init_generators_by_fref+0x44>)
    1fa0:	2101      	movs	r1, #1
    1fa2:	4804      	ldr	r0, [pc, #16]	; (1fb4 <_gclk_init_generators_by_fref+0x3c>)
    1fa4:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <_gclk_init_generators_by_fref+0x40>)
    1fa6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    1fa8:	bf00      	nop
    1faa:	3708      	adds	r7, #8
    1fac:	46bd      	mov	sp, r7
    1fae:	bd80      	pop	{r7, pc}
    1fb0:	00010906 	.word	0x00010906
    1fb4:	40001c00 	.word	0x40001c00
    1fb8:	00001f49 	.word	0x00001f49
    1fbc:	00010104 	.word	0x00010104

00001fc0 <hri_mclk_write_CPUDIV_reg>:
{
    1fc0:	b480      	push	{r7}
    1fc2:	b083      	sub	sp, #12
    1fc4:	af00      	add	r7, sp, #0
    1fc6:	6078      	str	r0, [r7, #4]
    1fc8:	460b      	mov	r3, r1
    1fca:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	78fa      	ldrb	r2, [r7, #3]
    1fd0:	715a      	strb	r2, [r3, #5]
}
    1fd2:	bf00      	nop
    1fd4:	370c      	adds	r7, #12
    1fd6:	46bd      	mov	sp, r7
    1fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fdc:	4770      	bx	lr
	...

00001fe0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    1fe0:	b580      	push	{r7, lr}
    1fe2:	b082      	sub	sp, #8
    1fe4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    1fe6:	4b05      	ldr	r3, [pc, #20]	; (1ffc <_mclk_init+0x1c>)
    1fe8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    1fea:	2101      	movs	r1, #1
    1fec:	6878      	ldr	r0, [r7, #4]
    1fee:	4b04      	ldr	r3, [pc, #16]	; (2000 <_mclk_init+0x20>)
    1ff0:	4798      	blx	r3
}
    1ff2:	bf00      	nop
    1ff4:	3708      	adds	r7, #8
    1ff6:	46bd      	mov	sp, r7
    1ff8:	bd80      	pop	{r7, pc}
    1ffa:	bf00      	nop
    1ffc:	40000800 	.word	0x40000800
    2000:	00001fc1 	.word	0x00001fc1

00002004 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    2004:	b480      	push	{r7}
    2006:	b083      	sub	sp, #12
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
    200c:	460b      	mov	r3, r1
    200e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	78fa      	ldrb	r2, [r7, #3]
    2014:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2016:	bf00      	nop
    2018:	370c      	adds	r7, #12
    201a:	46bd      	mov	sp, r7
    201c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2020:	4770      	bx	lr

00002022 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    2022:	b480      	push	{r7}
    2024:	b085      	sub	sp, #20
    2026:	af00      	add	r7, sp, #0
    2028:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    202a:	687b      	ldr	r3, [r7, #4]
    202c:	69db      	ldr	r3, [r3, #28]
    202e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    2030:	68fb      	ldr	r3, [r7, #12]
    2032:	0a1b      	lsrs	r3, r3, #8
    2034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2038:	60fb      	str	r3, [r7, #12]
	return tmp;
    203a:	68fb      	ldr	r3, [r7, #12]
}
    203c:	4618      	mov	r0, r3
    203e:	3714      	adds	r7, #20
    2040:	46bd      	mov	sp, r7
    2042:	f85d 7b04 	ldr.w	r7, [sp], #4
    2046:	4770      	bx	lr

00002048 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    2048:	b480      	push	{r7}
    204a:	b083      	sub	sp, #12
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
    2050:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2052:	687b      	ldr	r3, [r7, #4]
    2054:	683a      	ldr	r2, [r7, #0]
    2056:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2058:	bf00      	nop
    205a:	370c      	adds	r7, #12
    205c:	46bd      	mov	sp, r7
    205e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2062:	4770      	bx	lr

00002064 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    2064:	b580      	push	{r7, lr}
    2066:	b082      	sub	sp, #8
    2068:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    206a:	4b0c      	ldr	r3, [pc, #48]	; (209c <_osc32kctrl_init_sources+0x38>)
    206c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    206e:	2300      	movs	r3, #0
    2070:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    2072:	6878      	ldr	r0, [r7, #4]
    2074:	4b0a      	ldr	r3, [pc, #40]	; (20a0 <_osc32kctrl_init_sources+0x3c>)
    2076:	4798      	blx	r3
    2078:	4603      	mov	r3, r0
    207a:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    207c:	887b      	ldrh	r3, [r7, #2]
    207e:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    2080:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2084:	4619      	mov	r1, r3
    2086:	6878      	ldr	r0, [r7, #4]
    2088:	4b06      	ldr	r3, [pc, #24]	; (20a4 <_osc32kctrl_init_sources+0x40>)
    208a:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    208c:	2101      	movs	r1, #1
    208e:	6878      	ldr	r0, [r7, #4]
    2090:	4b05      	ldr	r3, [pc, #20]	; (20a8 <_osc32kctrl_init_sources+0x44>)
    2092:	4798      	blx	r3
	(void)calib;
}
    2094:	bf00      	nop
    2096:	3708      	adds	r7, #8
    2098:	46bd      	mov	sp, r7
    209a:	bd80      	pop	{r7, pc}
    209c:	40001400 	.word	0x40001400
    20a0:	00002023 	.word	0x00002023
    20a4:	00002049 	.word	0x00002049
    20a8:	00002005 	.word	0x00002005

000020ac <hri_gclk_wait_for_sync>:
{
    20ac:	b480      	push	{r7}
    20ae:	b083      	sub	sp, #12
    20b0:	af00      	add	r7, sp, #0
    20b2:	6078      	str	r0, [r7, #4]
    20b4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    20b6:	bf00      	nop
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	685a      	ldr	r2, [r3, #4]
    20bc:	683b      	ldr	r3, [r7, #0]
    20be:	4013      	ands	r3, r2
    20c0:	2b00      	cmp	r3, #0
    20c2:	d1f9      	bne.n	20b8 <hri_gclk_wait_for_sync+0xc>
}
    20c4:	bf00      	nop
    20c6:	370c      	adds	r7, #12
    20c8:	46bd      	mov	sp, r7
    20ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ce:	4770      	bx	lr

000020d0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    20d0:	b480      	push	{r7}
    20d2:	b083      	sub	sp, #12
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	685b      	ldr	r3, [r3, #4]
    20dc:	089b      	lsrs	r3, r3, #2
    20de:	f003 0301 	and.w	r3, r3, #1
    20e2:	2b00      	cmp	r3, #0
    20e4:	bf14      	ite	ne
    20e6:	2301      	movne	r3, #1
    20e8:	2300      	moveq	r3, #0
    20ea:	b2db      	uxtb	r3, r3
}
    20ec:	4618      	mov	r0, r3
    20ee:	370c      	adds	r7, #12
    20f0:	46bd      	mov	sp, r7
    20f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    20f6:	4770      	bx	lr

000020f8 <hri_gclk_read_SYNCBUSY_reg>:
{
    20f8:	b480      	push	{r7}
    20fa:	b083      	sub	sp, #12
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	685b      	ldr	r3, [r3, #4]
}
    2104:	4618      	mov	r0, r3
    2106:	370c      	adds	r7, #12
    2108:	46bd      	mov	sp, r7
    210a:	f85d 7b04 	ldr.w	r7, [sp], #4
    210e:	4770      	bx	lr

00002110 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    2110:	b580      	push	{r7, lr}
    2112:	b086      	sub	sp, #24
    2114:	af00      	add	r7, sp, #0
    2116:	60f8      	str	r0, [r7, #12]
    2118:	460b      	mov	r3, r1
    211a:	607a      	str	r2, [r7, #4]
    211c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    211e:	7afa      	ldrb	r2, [r7, #11]
    2120:	68fb      	ldr	r3, [r7, #12]
    2122:	3208      	adds	r2, #8
    2124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2128:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    212a:	697b      	ldr	r3, [r7, #20]
    212c:	f023 030f 	bic.w	r3, r3, #15
    2130:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	f003 030f 	and.w	r3, r3, #15
    2138:	697a      	ldr	r2, [r7, #20]
    213a:	4313      	orrs	r3, r2
    213c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    213e:	7afa      	ldrb	r2, [r7, #11]
    2140:	68fb      	ldr	r3, [r7, #12]
    2142:	3208      	adds	r2, #8
    2144:	6979      	ldr	r1, [r7, #20]
    2146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    214a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    214e:	68f8      	ldr	r0, [r7, #12]
    2150:	4b02      	ldr	r3, [pc, #8]	; (215c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    2152:	4798      	blx	r3
}
    2154:	bf00      	nop
    2156:	3718      	adds	r7, #24
    2158:	46bd      	mov	sp, r7
    215a:	bd80      	pop	{r7, pc}
    215c:	000020ad 	.word	0x000020ad

00002160 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    2160:	b480      	push	{r7}
    2162:	b083      	sub	sp, #12
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	691b      	ldr	r3, [r3, #16]
    216c:	0a1b      	lsrs	r3, r3, #8
    216e:	f003 0301 	and.w	r3, r3, #1
    2172:	2b00      	cmp	r3, #0
    2174:	bf14      	ite	ne
    2176:	2301      	movne	r3, #1
    2178:	2300      	moveq	r3, #0
    217a:	b2db      	uxtb	r3, r3
}
    217c:	4618      	mov	r0, r3
    217e:	370c      	adds	r7, #12
    2180:	46bd      	mov	sp, r7
    2182:	f85d 7b04 	ldr.w	r7, [sp], #4
    2186:	4770      	bx	lr

00002188 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    2188:	b480      	push	{r7}
    218a:	b085      	sub	sp, #20
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
    2190:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2192:	687b      	ldr	r3, [r7, #4]
    2194:	691b      	ldr	r3, [r3, #16]
    2196:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2198:	68fa      	ldr	r2, [r7, #12]
    219a:	683b      	ldr	r3, [r7, #0]
    219c:	4013      	ands	r3, r2
    219e:	60fb      	str	r3, [r7, #12]
	return tmp;
    21a0:	68fb      	ldr	r3, [r7, #12]
}
    21a2:	4618      	mov	r0, r3
    21a4:	3714      	adds	r7, #20
    21a6:	46bd      	mov	sp, r7
    21a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ac:	4770      	bx	lr

000021ae <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    21ae:	b480      	push	{r7}
    21b0:	b083      	sub	sp, #12
    21b2:	af00      	add	r7, sp, #0
    21b4:	6078      	str	r0, [r7, #4]
    21b6:	460b      	mov	r3, r1
    21b8:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	78fa      	ldrb	r2, [r7, #3]
    21be:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    21c0:	bf00      	nop
    21c2:	370c      	adds	r7, #12
    21c4:	46bd      	mov	sp, r7
    21c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ca:	4770      	bx	lr

000021cc <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    21cc:	b480      	push	{r7}
    21ce:	b085      	sub	sp, #20
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    21d4:	687b      	ldr	r3, [r7, #4]
    21d6:	f893 3020 	ldrb.w	r3, [r3, #32]
    21da:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    21dc:	7bfb      	ldrb	r3, [r7, #15]
    21de:	f003 0301 	and.w	r3, r3, #1
    21e2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    21e4:	7bfb      	ldrb	r3, [r7, #15]
    21e6:	2b00      	cmp	r3, #0
    21e8:	bf14      	ite	ne
    21ea:	2301      	movne	r3, #1
    21ec:	2300      	moveq	r3, #0
    21ee:	b2db      	uxtb	r3, r3
}
    21f0:	4618      	mov	r0, r3
    21f2:	3714      	adds	r7, #20
    21f4:	46bd      	mov	sp, r7
    21f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    21fa:	4770      	bx	lr

000021fc <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    21fc:	b480      	push	{r7}
    21fe:	b083      	sub	sp, #12
    2200:	af00      	add	r7, sp, #0
    2202:	6078      	str	r0, [r7, #4]
    2204:	460b      	mov	r3, r1
    2206:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	78fa      	ldrb	r2, [r7, #3]
    220c:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2210:	bf00      	nop
    2212:	370c      	adds	r7, #12
    2214:	46bd      	mov	sp, r7
    2216:	f85d 7b04 	ldr.w	r7, [sp], #4
    221a:	4770      	bx	lr

0000221c <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    221c:	b480      	push	{r7}
    221e:	b083      	sub	sp, #12
    2220:	af00      	add	r7, sp, #0
    2222:	6078      	str	r0, [r7, #4]
    2224:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	683a      	ldr	r2, [r7, #0]
    222a:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    222c:	bf00      	nop
    222e:	370c      	adds	r7, #12
    2230:	46bd      	mov	sp, r7
    2232:	f85d 7b04 	ldr.w	r7, [sp], #4
    2236:	4770      	bx	lr

00002238 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    2238:	b480      	push	{r7}
    223a:	b083      	sub	sp, #12
    223c:	af00      	add	r7, sp, #0
    223e:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    2244:	4618      	mov	r0, r3
    2246:	370c      	adds	r7, #12
    2248:	46bd      	mov	sp, r7
    224a:	f85d 7b04 	ldr.w	r7, [sp], #4
    224e:	4770      	bx	lr

00002250 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    2250:	b480      	push	{r7}
    2252:	b083      	sub	sp, #12
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
    2258:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    225a:	687b      	ldr	r3, [r7, #4]
    225c:	683a      	ldr	r2, [r7, #0]
    225e:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2260:	bf00      	nop
    2262:	370c      	adds	r7, #12
    2264:	46bd      	mov	sp, r7
    2266:	f85d 7b04 	ldr.w	r7, [sp], #4
    226a:	4770      	bx	lr

0000226c <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    226c:	b480      	push	{r7}
    226e:	b085      	sub	sp, #20
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    227a:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    227c:	7bfb      	ldrb	r3, [r7, #15]
    227e:	085b      	lsrs	r3, r3, #1
    2280:	b2db      	uxtb	r3, r3
    2282:	f003 0301 	and.w	r3, r3, #1
    2286:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    2288:	7bfb      	ldrb	r3, [r7, #15]
    228a:	2b00      	cmp	r3, #0
    228c:	bf14      	ite	ne
    228e:	2301      	movne	r3, #1
    2290:	2300      	moveq	r3, #0
    2292:	b2db      	uxtb	r3, r3
}
    2294:	4618      	mov	r0, r3
    2296:	3714      	adds	r7, #20
    2298:	46bd      	mov	sp, r7
    229a:	f85d 7b04 	ldr.w	r7, [sp], #4
    229e:	4770      	bx	lr

000022a0 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    22a0:	b480      	push	{r7}
    22a2:	b085      	sub	sp, #20
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    22ae:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    22b0:	7bfb      	ldrb	r3, [r7, #15]
    22b2:	089b      	lsrs	r3, r3, #2
    22b4:	b2db      	uxtb	r3, r3
    22b6:	f003 0301 	and.w	r3, r3, #1
    22ba:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    22bc:	7bfb      	ldrb	r3, [r7, #15]
    22be:	2b00      	cmp	r3, #0
    22c0:	bf14      	ite	ne
    22c2:	2301      	movne	r3, #1
    22c4:	2300      	moveq	r3, #0
    22c6:	b2db      	uxtb	r3, r3
}
    22c8:	4618      	mov	r0, r3
    22ca:	3714      	adds	r7, #20
    22cc:	46bd      	mov	sp, r7
    22ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    22d2:	4770      	bx	lr

000022d4 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    22d4:	b480      	push	{r7}
    22d6:	b085      	sub	sp, #20
    22d8:	af00      	add	r7, sp, #0
    22da:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    22e2:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    22e4:	7bfb      	ldrb	r3, [r7, #15]
    22e6:	08db      	lsrs	r3, r3, #3
    22e8:	b2db      	uxtb	r3, r3
    22ea:	f003 0301 	and.w	r3, r3, #1
    22ee:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    22f0:	7bfb      	ldrb	r3, [r7, #15]
    22f2:	2b00      	cmp	r3, #0
    22f4:	bf14      	ite	ne
    22f6:	2301      	movne	r3, #1
    22f8:	2300      	moveq	r3, #0
    22fa:	b2db      	uxtb	r3, r3
}
    22fc:	4618      	mov	r0, r3
    22fe:	3714      	adds	r7, #20
    2300:	46bd      	mov	sp, r7
    2302:	f85d 7b04 	ldr.w	r7, [sp], #4
    2306:	4770      	bx	lr

00002308 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    2308:	b480      	push	{r7}
    230a:	b085      	sub	sp, #20
    230c:	af00      	add	r7, sp, #0
    230e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2310:	687b      	ldr	r3, [r7, #4]
    2312:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    2316:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    2318:	7bfb      	ldrb	r3, [r7, #15]
    231a:	091b      	lsrs	r3, r3, #4
    231c:	b2db      	uxtb	r3, r3
    231e:	f003 0301 	and.w	r3, r3, #1
    2322:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    2324:	7bfb      	ldrb	r3, [r7, #15]
    2326:	2b00      	cmp	r3, #0
    2328:	bf14      	ite	ne
    232a:	2301      	movne	r3, #1
    232c:	2300      	moveq	r3, #0
    232e:	b2db      	uxtb	r3, r3
}
    2330:	4618      	mov	r0, r3
    2332:	3714      	adds	r7, #20
    2334:	46bd      	mov	sp, r7
    2336:	f85d 7b04 	ldr.w	r7, [sp], #4
    233a:	4770      	bx	lr

0000233c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    233c:	b480      	push	{r7}
    233e:	b083      	sub	sp, #12
    2340:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    2342:	4b04      	ldr	r3, [pc, #16]	; (2354 <_oscctrl_init_sources+0x18>)
    2344:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    2346:	bf00      	nop
    2348:	370c      	adds	r7, #12
    234a:	46bd      	mov	sp, r7
    234c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2350:	4770      	bx	lr
    2352:	bf00      	nop
    2354:	40001000 	.word	0x40001000

00002358 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2358:	b580      	push	{r7, lr}
    235a:	b084      	sub	sp, #16
    235c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    235e:	4b46      	ldr	r3, [pc, #280]	; (2478 <_oscctrl_init_referenced_generators+0x120>)
    2360:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    2362:	2204      	movs	r2, #4
    2364:	2100      	movs	r1, #0
    2366:	4845      	ldr	r0, [pc, #276]	; (247c <_oscctrl_init_referenced_generators+0x124>)
    2368:	4b45      	ldr	r3, [pc, #276]	; (2480 <_oscctrl_init_referenced_generators+0x128>)
    236a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    236c:	bf00      	nop
    236e:	4843      	ldr	r0, [pc, #268]	; (247c <_oscctrl_init_referenced_generators+0x124>)
    2370:	4b44      	ldr	r3, [pc, #272]	; (2484 <_oscctrl_init_referenced_generators+0x12c>)
    2372:	4798      	blx	r3
    2374:	4603      	mov	r3, r0
    2376:	2b00      	cmp	r3, #0
    2378:	d1f9      	bne.n	236e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    237a:	2100      	movs	r1, #0
    237c:	68f8      	ldr	r0, [r7, #12]
    237e:	4b42      	ldr	r3, [pc, #264]	; (2488 <_oscctrl_init_referenced_generators+0x130>)
    2380:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    2382:	4942      	ldr	r1, [pc, #264]	; (248c <_oscctrl_init_referenced_generators+0x134>)
    2384:	68f8      	ldr	r0, [r7, #12]
    2386:	4b42      	ldr	r3, [pc, #264]	; (2490 <_oscctrl_init_referenced_generators+0x138>)
    2388:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    238a:	bf00      	nop
    238c:	68f8      	ldr	r0, [r7, #12]
    238e:	4b41      	ldr	r3, [pc, #260]	; (2494 <_oscctrl_init_referenced_generators+0x13c>)
    2390:	4798      	blx	r3
    2392:	4603      	mov	r3, r0
    2394:	2b00      	cmp	r3, #0
    2396:	d1f9      	bne.n	238c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    2398:	2100      	movs	r1, #0
    239a:	68f8      	ldr	r0, [r7, #12]
    239c:	4b3e      	ldr	r3, [pc, #248]	; (2498 <_oscctrl_init_referenced_generators+0x140>)
    239e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    23a0:	bf00      	nop
    23a2:	68f8      	ldr	r0, [r7, #12]
    23a4:	4b3d      	ldr	r3, [pc, #244]	; (249c <_oscctrl_init_referenced_generators+0x144>)
    23a6:	4798      	blx	r3
    23a8:	4603      	mov	r3, r0
    23aa:	2b00      	cmp	r3, #0
    23ac:	d1f9      	bne.n	23a2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    23ae:	2342      	movs	r3, #66	; 0x42
    23b0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    23b2:	7afb      	ldrb	r3, [r7, #11]
    23b4:	4619      	mov	r1, r3
    23b6:	68f8      	ldr	r0, [r7, #12]
    23b8:	4b33      	ldr	r3, [pc, #204]	; (2488 <_oscctrl_init_referenced_generators+0x130>)
    23ba:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    23bc:	bf00      	nop
    23be:	68f8      	ldr	r0, [r7, #12]
    23c0:	4b37      	ldr	r3, [pc, #220]	; (24a0 <_oscctrl_init_referenced_generators+0x148>)
    23c2:	4798      	blx	r3
    23c4:	4603      	mov	r3, r0
    23c6:	2b00      	cmp	r3, #0
    23c8:	d1f9      	bne.n	23be <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
    23ca:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    23ce:	68f8      	ldr	r0, [r7, #12]
    23d0:	4b34      	ldr	r3, [pc, #208]	; (24a4 <_oscctrl_init_referenced_generators+0x14c>)
    23d2:	4798      	blx	r3
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    23d4:	68f8      	ldr	r0, [r7, #12]
    23d6:	4b34      	ldr	r3, [pc, #208]	; (24a8 <_oscctrl_init_referenced_generators+0x150>)
    23d8:	4798      	blx	r3
    23da:	4603      	mov	r3, r0
    23dc:	4619      	mov	r1, r3
    23de:	68f8      	ldr	r0, [r7, #12]
    23e0:	4b30      	ldr	r3, [pc, #192]	; (24a4 <_oscctrl_init_referenced_generators+0x14c>)
    23e2:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    23e4:	bf00      	nop
    23e6:	68f8      	ldr	r0, [r7, #12]
    23e8:	4b30      	ldr	r3, [pc, #192]	; (24ac <_oscctrl_init_referenced_generators+0x154>)
    23ea:	4798      	blx	r3
    23ec:	4603      	mov	r3, r0
    23ee:	2b00      	cmp	r3, #0
    23f0:	d1f9      	bne.n	23e6 <_oscctrl_init_referenced_generators+0x8e>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    23f2:	2380      	movs	r3, #128	; 0x80
    23f4:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    23f6:	7afb      	ldrb	r3, [r7, #11]
    23f8:	4619      	mov	r1, r3
    23fa:	68f8      	ldr	r0, [r7, #12]
    23fc:	4b26      	ldr	r3, [pc, #152]	; (2498 <_oscctrl_init_referenced_generators+0x140>)
    23fe:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2400:	bf00      	nop
    2402:	68f8      	ldr	r0, [r7, #12]
    2404:	4b25      	ldr	r3, [pc, #148]	; (249c <_oscctrl_init_referenced_generators+0x144>)
    2406:	4798      	blx	r3
    2408:	4603      	mov	r3, r0
    240a:	2b00      	cmp	r3, #0
    240c:	d1f9      	bne.n	2402 <_oscctrl_init_referenced_generators+0xaa>
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    240e:	68f8      	ldr	r0, [r7, #12]
    2410:	4b27      	ldr	r3, [pc, #156]	; (24b0 <_oscctrl_init_referenced_generators+0x158>)
    2412:	4798      	blx	r3
    2414:	4603      	mov	r3, r0
    2416:	2b00      	cmp	r3, #0
    2418:	d00c      	beq.n	2434 <_oscctrl_init_referenced_generators+0xdc>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    241a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    241e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2420:	bf00      	nop
    2422:	6879      	ldr	r1, [r7, #4]
    2424:	68f8      	ldr	r0, [r7, #12]
    2426:	4b23      	ldr	r3, [pc, #140]	; (24b4 <_oscctrl_init_referenced_generators+0x15c>)
    2428:	4798      	blx	r3
    242a:	4602      	mov	r2, r0
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	429a      	cmp	r2, r3
    2430:	d1f7      	bne.n	2422 <_oscctrl_init_referenced_generators+0xca>
    2432:	e009      	b.n	2448 <_oscctrl_init_referenced_generators+0xf0>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2434:	bf00      	nop
    2436:	68f8      	ldr	r0, [r7, #12]
    2438:	4b1f      	ldr	r3, [pc, #124]	; (24b8 <_oscctrl_init_referenced_generators+0x160>)
    243a:	4798      	blx	r3
    243c:	4603      	mov	r3, r0
    243e:	f083 0301 	eor.w	r3, r3, #1
    2442:	b2db      	uxtb	r3, r3
    2444:	2b00      	cmp	r3, #0
    2446:	d1f6      	bne.n	2436 <_oscctrl_init_referenced_generators+0xde>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2448:	bf00      	nop
    244a:	480c      	ldr	r0, [pc, #48]	; (247c <_oscctrl_init_referenced_generators+0x124>)
    244c:	4b1b      	ldr	r3, [pc, #108]	; (24bc <_oscctrl_init_referenced_generators+0x164>)
    244e:	4798      	blx	r3
    2450:	4603      	mov	r3, r0
    2452:	2b00      	cmp	r3, #0
    2454:	d1f9      	bne.n	244a <_oscctrl_init_referenced_generators+0xf2>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    2456:	2206      	movs	r2, #6
    2458:	2100      	movs	r1, #0
    245a:	4808      	ldr	r0, [pc, #32]	; (247c <_oscctrl_init_referenced_generators+0x124>)
    245c:	4b08      	ldr	r3, [pc, #32]	; (2480 <_oscctrl_init_referenced_generators+0x128>)
    245e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2460:	bf00      	nop
    2462:	4806      	ldr	r0, [pc, #24]	; (247c <_oscctrl_init_referenced_generators+0x124>)
    2464:	4b07      	ldr	r3, [pc, #28]	; (2484 <_oscctrl_init_referenced_generators+0x12c>)
    2466:	4798      	blx	r3
    2468:	4603      	mov	r3, r0
    246a:	2b00      	cmp	r3, #0
    246c:	d1f9      	bne.n	2462 <_oscctrl_init_referenced_generators+0x10a>
		;
#endif
	(void)hw;
}
    246e:	bf00      	nop
    2470:	3710      	adds	r7, #16
    2472:	46bd      	mov	sp, r7
    2474:	bd80      	pop	{r7, pc}
    2476:	bf00      	nop
    2478:	40001000 	.word	0x40001000
    247c:	40001c00 	.word	0x40001c00
    2480:	00002111 	.word	0x00002111
    2484:	000020d1 	.word	0x000020d1
    2488:	000021af 	.word	0x000021af
    248c:	04010000 	.word	0x04010000
    2490:	00002251 	.word	0x00002251
    2494:	00002309 	.word	0x00002309
    2498:	000021fd 	.word	0x000021fd
    249c:	000022a1 	.word	0x000022a1
    24a0:	0000226d 	.word	0x0000226d
    24a4:	0000221d 	.word	0x0000221d
    24a8:	00002239 	.word	0x00002239
    24ac:	000022d5 	.word	0x000022d5
    24b0:	000021cd 	.word	0x000021cd
    24b4:	00002189 	.word	0x00002189
    24b8:	00002161 	.word	0x00002161
    24bc:	000020f9 	.word	0x000020f9

000024c0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    24c0:	b480      	push	{r7}
    24c2:	b083      	sub	sp, #12
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	69db      	ldr	r3, [r3, #28]
    24cc:	0a9b      	lsrs	r3, r3, #10
    24ce:	f003 0301 	and.w	r3, r3, #1
    24d2:	2b00      	cmp	r3, #0
    24d4:	bf14      	ite	ne
    24d6:	2301      	movne	r3, #1
    24d8:	2300      	moveq	r3, #0
    24da:	b2db      	uxtb	r3, r3
}
    24dc:	4618      	mov	r0, r3
    24de:	370c      	adds	r7, #12
    24e0:	46bd      	mov	sp, r7
    24e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e6:	4770      	bx	lr

000024e8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    24e8:	b480      	push	{r7}
    24ea:	b083      	sub	sp, #12
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    24f0:	687b      	ldr	r3, [r7, #4]
    24f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    24f6:	61da      	str	r2, [r3, #28]
}
    24f8:	bf00      	nop
    24fa:	370c      	adds	r7, #12
    24fc:	46bd      	mov	sp, r7
    24fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2502:	4770      	bx	lr

00002504 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    2504:	b480      	push	{r7}
    2506:	b083      	sub	sp, #12
    2508:	af00      	add	r7, sp, #0
    250a:	6078      	str	r0, [r7, #4]
    250c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    250e:	687b      	ldr	r3, [r7, #4]
    2510:	683a      	ldr	r2, [r7, #0]
    2512:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    2514:	bf00      	nop
    2516:	370c      	adds	r7, #12
    2518:	46bd      	mov	sp, r7
    251a:	f85d 7b04 	ldr.w	r7, [sp], #4
    251e:	4770      	bx	lr

00002520 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    2520:	b480      	push	{r7}
    2522:	b083      	sub	sp, #12
    2524:	af00      	add	r7, sp, #0
    2526:	6078      	str	r0, [r7, #4]
    2528:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    252a:	687b      	ldr	r3, [r7, #4]
    252c:	683a      	ldr	r2, [r7, #0]
    252e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    2530:	bf00      	nop
    2532:	370c      	adds	r7, #12
    2534:	46bd      	mov	sp, r7
    2536:	f85d 7b04 	ldr.w	r7, [sp], #4
    253a:	4770      	bx	lr

0000253c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    253c:	b480      	push	{r7}
    253e:	b083      	sub	sp, #12
    2540:	af00      	add	r7, sp, #0
    2542:	6078      	str	r0, [r7, #4]
    2544:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	683a      	ldr	r2, [r7, #0]
    254a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    254c:	bf00      	nop
    254e:	370c      	adds	r7, #12
    2550:	46bd      	mov	sp, r7
    2552:	f85d 7b04 	ldr.w	r7, [sp], #4
    2556:	4770      	bx	lr

00002558 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    2558:	b480      	push	{r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    2562:	687b      	ldr	r3, [r7, #4]
    2564:	683a      	ldr	r2, [r7, #0]
    2566:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    2568:	bf00      	nop
    256a:	370c      	adds	r7, #12
    256c:	46bd      	mov	sp, r7
    256e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2572:	4770      	bx	lr

00002574 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    2574:	b480      	push	{r7}
    2576:	b085      	sub	sp, #20
    2578:	af00      	add	r7, sp, #0
    257a:	6078      	str	r0, [r7, #4]
    257c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2582:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    2584:	68fb      	ldr	r3, [r7, #12]
    2586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    258a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    258c:	683b      	ldr	r3, [r7, #0]
    258e:	b2db      	uxtb	r3, r3
    2590:	68fa      	ldr	r2, [r7, #12]
    2592:	4313      	orrs	r3, r2
    2594:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    2596:	687b      	ldr	r3, [r7, #4]
    2598:	68fa      	ldr	r2, [r7, #12]
    259a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    259c:	bf00      	nop
    259e:	3714      	adds	r7, #20
    25a0:	46bd      	mov	sp, r7
    25a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    25a6:	4770      	bx	lr

000025a8 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    25a8:	b480      	push	{r7}
    25aa:	b085      	sub	sp, #20
    25ac:	af00      	add	r7, sp, #0
    25ae:	6078      	str	r0, [r7, #4]
    25b0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    25b2:	687b      	ldr	r3, [r7, #4]
    25b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    25b6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    25be:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    25c0:	683b      	ldr	r3, [r7, #0]
    25c2:	041b      	lsls	r3, r3, #16
    25c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    25c8:	68fa      	ldr	r2, [r7, #12]
    25ca:	4313      	orrs	r3, r2
    25cc:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	68fa      	ldr	r2, [r7, #12]
    25d2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    25d4:	bf00      	nop
    25d6:	3714      	adds	r7, #20
    25d8:	46bd      	mov	sp, r7
    25da:	f85d 7b04 	ldr.w	r7, [sp], #4
    25de:	4770      	bx	lr

000025e0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    25e0:	b480      	push	{r7}
    25e2:	b083      	sub	sp, #12
    25e4:	af00      	add	r7, sp, #0
    25e6:	6078      	str	r0, [r7, #4]
    25e8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	683a      	ldr	r2, [r7, #0]
    25ee:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    25f0:	bf00      	nop
    25f2:	370c      	adds	r7, #12
    25f4:	46bd      	mov	sp, r7
    25f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    25fa:	4770      	bx	lr

000025fc <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    25fc:	b480      	push	{r7}
    25fe:	b083      	sub	sp, #12
    2600:	af00      	add	r7, sp, #0
    2602:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    2608:	4618      	mov	r0, r3
    260a:	370c      	adds	r7, #12
    260c:	46bd      	mov	sp, r7
    260e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2612:	4770      	bx	lr

00002614 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    2614:	b480      	push	{r7}
    2616:	b085      	sub	sp, #20
    2618:	af00      	add	r7, sp, #0
    261a:	60f8      	str	r0, [r7, #12]
    261c:	60b9      	str	r1, [r7, #8]
    261e:	607a      	str	r2, [r7, #4]
	while (count--) {
    2620:	e007      	b.n	2632 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	1c5a      	adds	r2, r3, #1
    2626:	60fa      	str	r2, [r7, #12]
    2628:	68ba      	ldr	r2, [r7, #8]
    262a:	1c51      	adds	r1, r2, #1
    262c:	60b9      	str	r1, [r7, #8]
    262e:	7812      	ldrb	r2, [r2, #0]
    2630:	701a      	strb	r2, [r3, #0]
	while (count--) {
    2632:	687b      	ldr	r3, [r7, #4]
    2634:	1e5a      	subs	r2, r3, #1
    2636:	607a      	str	r2, [r7, #4]
    2638:	2b00      	cmp	r3, #0
    263a:	d1f2      	bne.n	2622 <_qspi_memcpy+0xe>
	}
}
    263c:	bf00      	nop
    263e:	3714      	adds	r7, #20
    2640:	46bd      	mov	sp, r7
    2642:	f85d 7b04 	ldr.w	r7, [sp], #4
    2646:	4770      	bx	lr

00002648 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    2648:	b580      	push	{r7, lr}
    264a:	b082      	sub	sp, #8
    264c:	af00      	add	r7, sp, #0
    264e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    2650:	4903      	ldr	r1, [pc, #12]	; (2660 <_qspi_end_transfer+0x18>)
    2652:	6878      	ldr	r0, [r7, #4]
    2654:	4b03      	ldr	r3, [pc, #12]	; (2664 <_qspi_end_transfer+0x1c>)
    2656:	4798      	blx	r3
}
    2658:	bf00      	nop
    265a:	3708      	adds	r7, #8
    265c:	46bd      	mov	sp, r7
    265e:	bd80      	pop	{r7, pc}
    2660:	01000002 	.word	0x01000002
    2664:	00002505 	.word	0x00002505

00002668 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    2668:	b580      	push	{r7, lr}
    266a:	b082      	sub	sp, #8
    266c:	af00      	add	r7, sp, #0
    266e:	6078      	str	r0, [r7, #4]
    2670:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    2672:	687b      	ldr	r3, [r7, #4]
    2674:	2b00      	cmp	r3, #0
    2676:	d004      	beq.n	2682 <_qspi_sync_init+0x1a>
    2678:	683b      	ldr	r3, [r7, #0]
    267a:	2b00      	cmp	r3, #0
    267c:	d001      	beq.n	2682 <_qspi_sync_init+0x1a>
    267e:	2301      	movs	r3, #1
    2680:	e000      	b.n	2684 <_qspi_sync_init+0x1c>
    2682:	2300      	movs	r3, #0
    2684:	f003 0301 	and.w	r3, r3, #1
    2688:	b2db      	uxtb	r3, r3
    268a:	2240      	movs	r2, #64	; 0x40
    268c:	490d      	ldr	r1, [pc, #52]	; (26c4 <_qspi_sync_init+0x5c>)
    268e:	4618      	mov	r0, r3
    2690:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <_qspi_sync_init+0x60>)
    2692:	4798      	blx	r3
	dev->prvt = hw;
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	683a      	ldr	r2, [r7, #0]
    2698:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    269a:	687b      	ldr	r3, [r7, #4]
    269c:	681b      	ldr	r3, [r3, #0]
    269e:	2101      	movs	r1, #1
    26a0:	4618      	mov	r0, r3
    26a2:	4b0a      	ldr	r3, [pc, #40]	; (26cc <_qspi_sync_init+0x64>)
    26a4:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    26a6:	2111      	movs	r1, #17
    26a8:	6838      	ldr	r0, [r7, #0]
    26aa:	4b09      	ldr	r3, [pc, #36]	; (26d0 <_qspi_sync_init+0x68>)
    26ac:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    26ae:	f44f 6130 	mov.w	r1, #2816	; 0xb00
    26b2:	6838      	ldr	r0, [r7, #0]
    26b4:	4b07      	ldr	r3, [pc, #28]	; (26d4 <_qspi_sync_init+0x6c>)
    26b6:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    26b8:	2300      	movs	r3, #0
}
    26ba:	4618      	mov	r0, r3
    26bc:	3708      	adds	r7, #8
    26be:	46bd      	mov	sp, r7
    26c0:	bd80      	pop	{r7, pc}
    26c2:	bf00      	nop
    26c4:	00004774 	.word	0x00004774
    26c8:	00001161 	.word	0x00001161
    26cc:	00002505 	.word	0x00002505
    26d0:	00002521 	.word	0x00002521
    26d4:	0000253d 	.word	0x0000253d

000026d8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    26d8:	b580      	push	{r7, lr}
    26da:	b082      	sub	sp, #8
    26dc:	af00      	add	r7, sp, #0
    26de:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	681b      	ldr	r3, [r3, #0]
    26e4:	2102      	movs	r1, #2
    26e6:	4618      	mov	r0, r3
    26e8:	4b03      	ldr	r3, [pc, #12]	; (26f8 <_qspi_sync_enable+0x20>)
    26ea:	4798      	blx	r3
	return ERR_NONE;
    26ec:	2300      	movs	r3, #0
}
    26ee:	4618      	mov	r0, r3
    26f0:	3708      	adds	r7, #8
    26f2:	46bd      	mov	sp, r7
    26f4:	bd80      	pop	{r7, pc}
    26f6:	bf00      	nop
    26f8:	00002505 	.word	0x00002505

000026fc <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b084      	sub	sp, #16
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
    2704:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	681b      	ldr	r3, [r3, #0]
    270a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    270c:	683b      	ldr	r3, [r7, #0]
    270e:	781b      	ldrb	r3, [r3, #0]
    2710:	f003 0320 	and.w	r3, r3, #32
    2714:	b2db      	uxtb	r3, r3
    2716:	2b00      	cmp	r3, #0
    2718:	d005      	beq.n	2726 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    271a:	683b      	ldr	r3, [r7, #0]
    271c:	689b      	ldr	r3, [r3, #8]
    271e:	4619      	mov	r1, r3
    2720:	68f8      	ldr	r0, [r7, #12]
    2722:	4b13      	ldr	r3, [pc, #76]	; (2770 <_qspi_sync_command_set_ifr+0x74>)
    2724:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    2726:	683b      	ldr	r3, [r7, #0]
    2728:	781b      	ldrb	r3, [r3, #0]
    272a:	f003 0310 	and.w	r3, r3, #16
    272e:	b2db      	uxtb	r3, r3
    2730:	2b00      	cmp	r3, #0
    2732:	d005      	beq.n	2740 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    2734:	683b      	ldr	r3, [r7, #0]
    2736:	791b      	ldrb	r3, [r3, #4]
    2738:	4619      	mov	r1, r3
    273a:	68f8      	ldr	r0, [r7, #12]
    273c:	4b0d      	ldr	r3, [pc, #52]	; (2774 <_qspi_sync_command_set_ifr+0x78>)
    273e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    2740:	683b      	ldr	r3, [r7, #0]
    2742:	781b      	ldrb	r3, [r3, #0]
    2744:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2748:	b2db      	uxtb	r3, r3
    274a:	2b00      	cmp	r3, #0
    274c:	d005      	beq.n	275a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    274e:	683b      	ldr	r3, [r7, #0]
    2750:	795b      	ldrb	r3, [r3, #5]
    2752:	4619      	mov	r1, r3
    2754:	68f8      	ldr	r0, [r7, #12]
    2756:	4b08      	ldr	r3, [pc, #32]	; (2778 <_qspi_sync_command_set_ifr+0x7c>)
    2758:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    275a:	683b      	ldr	r3, [r7, #0]
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	4619      	mov	r1, r3
    2760:	68f8      	ldr	r0, [r7, #12]
    2762:	4b06      	ldr	r3, [pc, #24]	; (277c <_qspi_sync_command_set_ifr+0x80>)
    2764:	4798      	blx	r3
}
    2766:	bf00      	nop
    2768:	3710      	adds	r7, #16
    276a:	46bd      	mov	sp, r7
    276c:	bd80      	pop	{r7, pc}
    276e:	bf00      	nop
    2770:	00002559 	.word	0x00002559
    2774:	00002575 	.word	0x00002575
    2778:	000025a9 	.word	0x000025a9
    277c:	000025e1 	.word	0x000025e1

00002780 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    2780:	b580      	push	{r7, lr}
    2782:	b084      	sub	sp, #16
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
    2788:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	681b      	ldr	r3, [r3, #0]
    278e:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    2790:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2794:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    2796:	683b      	ldr	r3, [r7, #0]
    2798:	781b      	ldrb	r3, [r3, #0]
    279a:	f003 0320 	and.w	r3, r3, #32
    279e:	b2db      	uxtb	r3, r3
    27a0:	2b00      	cmp	r3, #0
    27a2:	d004      	beq.n	27ae <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    27a4:	683b      	ldr	r3, [r7, #0]
    27a6:	689b      	ldr	r3, [r3, #8]
    27a8:	68fa      	ldr	r2, [r7, #12]
    27aa:	4413      	add	r3, r2
    27ac:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    27ae:	68b8      	ldr	r0, [r7, #8]
    27b0:	4b18      	ldr	r3, [pc, #96]	; (2814 <_qspi_sync_run_transfer+0x94>)
    27b2:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    27b4:	683b      	ldr	r3, [r7, #0]
    27b6:	691b      	ldr	r3, [r3, #16]
    27b8:	2b00      	cmp	r3, #0
    27ba:	d103      	bne.n	27c4 <_qspi_sync_run_transfer+0x44>
    27bc:	683b      	ldr	r3, [r7, #0]
    27be:	695b      	ldr	r3, [r3, #20]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d001      	beq.n	27c8 <_qspi_sync_run_transfer+0x48>
    27c4:	2301      	movs	r3, #1
    27c6:	e000      	b.n	27ca <_qspi_sync_run_transfer+0x4a>
    27c8:	2300      	movs	r3, #0
    27ca:	f003 0301 	and.w	r3, r3, #1
    27ce:	b2db      	uxtb	r3, r3
    27d0:	2282      	movs	r2, #130	; 0x82
    27d2:	4911      	ldr	r1, [pc, #68]	; (2818 <_qspi_sync_run_transfer+0x98>)
    27d4:	4618      	mov	r0, r3
    27d6:	4b11      	ldr	r3, [pc, #68]	; (281c <_qspi_sync_run_transfer+0x9c>)
    27d8:	4798      	blx	r3

	if (cmd->tx_buf) {
    27da:	683b      	ldr	r3, [r7, #0]
    27dc:	691b      	ldr	r3, [r3, #16]
    27de:	2b00      	cmp	r3, #0
    27e0:	d008      	beq.n	27f4 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    27e2:	683b      	ldr	r3, [r7, #0]
    27e4:	6919      	ldr	r1, [r3, #16]
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	68db      	ldr	r3, [r3, #12]
    27ea:	461a      	mov	r2, r3
    27ec:	68f8      	ldr	r0, [r7, #12]
    27ee:	4b0c      	ldr	r3, [pc, #48]	; (2820 <_qspi_sync_run_transfer+0xa0>)
    27f0:	4798      	blx	r3
    27f2:	e007      	b.n	2804 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    27f4:	683b      	ldr	r3, [r7, #0]
    27f6:	6958      	ldr	r0, [r3, #20]
    27f8:	683b      	ldr	r3, [r7, #0]
    27fa:	68db      	ldr	r3, [r3, #12]
    27fc:	461a      	mov	r2, r3
    27fe:	68f9      	ldr	r1, [r7, #12]
    2800:	4b07      	ldr	r3, [pc, #28]	; (2820 <_qspi_sync_run_transfer+0xa0>)
    2802:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    2804:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2808:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    280c:	bf00      	nop
    280e:	3710      	adds	r7, #16
    2810:	46bd      	mov	sp, r7
    2812:	bd80      	pop	{r7, pc}
    2814:	000025fd 	.word	0x000025fd
    2818:	00004774 	.word	0x00004774
    281c:	00001161 	.word	0x00001161
    2820:	00002615 	.word	0x00002615

00002824 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    2824:	b580      	push	{r7, lr}
    2826:	b082      	sub	sp, #8
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
    282c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    282e:	6839      	ldr	r1, [r7, #0]
    2830:	6878      	ldr	r0, [r7, #4]
    2832:	4b14      	ldr	r3, [pc, #80]	; (2884 <_qspi_sync_serial_run_command+0x60>)
    2834:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    2836:	683b      	ldr	r3, [r7, #0]
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    283e:	b2db      	uxtb	r3, r3
    2840:	2b00      	cmp	r3, #0
    2842:	d003      	beq.n	284c <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    2844:	6839      	ldr	r1, [r7, #0]
    2846:	6878      	ldr	r0, [r7, #4]
    2848:	4b0f      	ldr	r3, [pc, #60]	; (2888 <_qspi_sync_serial_run_command+0x64>)
    284a:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	681b      	ldr	r3, [r3, #0]
    2850:	4618      	mov	r0, r3
    2852:	4b0e      	ldr	r3, [pc, #56]	; (288c <_qspi_sync_serial_run_command+0x68>)
    2854:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    2856:	bf00      	nop
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	4618      	mov	r0, r3
    285e:	4b0c      	ldr	r3, [pc, #48]	; (2890 <_qspi_sync_serial_run_command+0x6c>)
    2860:	4798      	blx	r3
    2862:	4603      	mov	r3, r0
    2864:	f083 0301 	eor.w	r3, r3, #1
    2868:	b2db      	uxtb	r3, r3
    286a:	2b00      	cmp	r3, #0
    286c:	d1f4      	bne.n	2858 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	4618      	mov	r0, r3
    2874:	4b07      	ldr	r3, [pc, #28]	; (2894 <_qspi_sync_serial_run_command+0x70>)
    2876:	4798      	blx	r3
	return ERR_NONE;
    2878:	2300      	movs	r3, #0
}
    287a:	4618      	mov	r0, r3
    287c:	3708      	adds	r7, #8
    287e:	46bd      	mov	sp, r7
    2880:	bd80      	pop	{r7, pc}
    2882:	bf00      	nop
    2884:	000026fd 	.word	0x000026fd
    2888:	00002781 	.word	0x00002781
    288c:	00002649 	.word	0x00002649
    2890:	000024c1 	.word	0x000024c1
    2894:	000024e9 	.word	0x000024e9

00002898 <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    2898:	b480      	push	{r7}
    289a:	b083      	sub	sp, #12
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	789b      	ldrb	r3, [r3, #2]
    28a4:	b2db      	uxtb	r3, r3
}
    28a6:	4618      	mov	r0, r3
    28a8:	370c      	adds	r7, #12
    28aa:	46bd      	mov	sp, r7
    28ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    28b0:	4770      	bx	lr

000028b2 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    28b2:	b480      	push	{r7}
    28b4:	b083      	sub	sp, #12
    28b6:	af00      	add	r7, sp, #0
    28b8:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    28ba:	687b      	ldr	r3, [r7, #4]
    28bc:	685b      	ldr	r3, [r3, #4]
}
    28be:	4618      	mov	r0, r3
    28c0:	370c      	adds	r7, #12
    28c2:	46bd      	mov	sp, r7
    28c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    28c8:	4770      	bx	lr
	...

000028cc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    28cc:	b590      	push	{r4, r7, lr}
    28ce:	b083      	sub	sp, #12
    28d0:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    28d2:	4b17      	ldr	r3, [pc, #92]	; (2930 <RAMECC_Handler+0x64>)
    28d4:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    28d6:	4817      	ldr	r0, [pc, #92]	; (2934 <RAMECC_Handler+0x68>)
    28d8:	4b17      	ldr	r3, [pc, #92]	; (2938 <RAMECC_Handler+0x6c>)
    28da:	4798      	blx	r3
    28dc:	4603      	mov	r3, r0
    28de:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    28e0:	683b      	ldr	r3, [r7, #0]
    28e2:	f003 0302 	and.w	r3, r3, #2
    28e6:	2b00      	cmp	r3, #0
    28e8:	d00c      	beq.n	2904 <RAMECC_Handler+0x38>
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d008      	beq.n	2904 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	681c      	ldr	r4, [r3, #0]
    28f6:	480f      	ldr	r0, [pc, #60]	; (2934 <RAMECC_Handler+0x68>)
    28f8:	4b10      	ldr	r3, [pc, #64]	; (293c <RAMECC_Handler+0x70>)
    28fa:	4798      	blx	r3
    28fc:	4603      	mov	r3, r0
    28fe:	4618      	mov	r0, r3
    2900:	47a0      	blx	r4
    2902:	e012      	b.n	292a <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    2904:	683b      	ldr	r3, [r7, #0]
    2906:	f003 0301 	and.w	r3, r3, #1
    290a:	2b00      	cmp	r3, #0
    290c:	d00c      	beq.n	2928 <RAMECC_Handler+0x5c>
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	685b      	ldr	r3, [r3, #4]
    2912:	2b00      	cmp	r3, #0
    2914:	d008      	beq.n	2928 <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	685c      	ldr	r4, [r3, #4]
    291a:	4806      	ldr	r0, [pc, #24]	; (2934 <RAMECC_Handler+0x68>)
    291c:	4b07      	ldr	r3, [pc, #28]	; (293c <RAMECC_Handler+0x70>)
    291e:	4798      	blx	r3
    2920:	4603      	mov	r3, r0
    2922:	4618      	mov	r0, r3
    2924:	47a0      	blx	r4
    2926:	e000      	b.n	292a <RAMECC_Handler+0x5e>
	} else {
		return;
    2928:	bf00      	nop
	}
}
    292a:	370c      	adds	r7, #12
    292c:	46bd      	mov	sp, r7
    292e:	bd90      	pop	{r4, r7, pc}
    2930:	200001ac 	.word	0x200001ac
    2934:	41020000 	.word	0x41020000
    2938:	00002899 	.word	0x00002899
    293c:	000028b3 	.word	0x000028b3

00002940 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    2940:	b480      	push	{r7}
    2942:	b083      	sub	sp, #12
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
    2948:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    294a:	bf00      	nop
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	69da      	ldr	r2, [r3, #28]
    2950:	683b      	ldr	r3, [r7, #0]
    2952:	4013      	ands	r3, r2
    2954:	2b00      	cmp	r3, #0
    2956:	d1f9      	bne.n	294c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    2958:	bf00      	nop
    295a:	370c      	adds	r7, #12
    295c:	46bd      	mov	sp, r7
    295e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2962:	4770      	bx	lr

00002964 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    2964:	b480      	push	{r7}
    2966:	b083      	sub	sp, #12
    2968:	af00      	add	r7, sp, #0
    296a:	6078      	str	r0, [r7, #4]
    296c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	69da      	ldr	r2, [r3, #28]
    2972:	683b      	ldr	r3, [r7, #0]
    2974:	4013      	ands	r3, r2
    2976:	2b00      	cmp	r3, #0
    2978:	bf14      	ite	ne
    297a:	2301      	movne	r3, #1
    297c:	2300      	moveq	r3, #0
    297e:	b2db      	uxtb	r3, r3
}
    2980:	4618      	mov	r0, r3
    2982:	370c      	adds	r7, #12
    2984:	46bd      	mov	sp, r7
    2986:	f85d 7b04 	ldr.w	r7, [sp], #4
    298a:	4770      	bx	lr

0000298c <hri_sercomspi_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    298c:	b480      	push	{r7}
    298e:	b083      	sub	sp, #12
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	7e1b      	ldrb	r3, [r3, #24]
    2998:	b2db      	uxtb	r3, r3
}
    299a:	4618      	mov	r0, r3
    299c:	370c      	adds	r7, #12
    299e:	46bd      	mov	sp, r7
    29a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a4:	4770      	bx	lr
	...

000029a8 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b082      	sub	sp, #8
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	681b      	ldr	r3, [r3, #0]
    29b4:	f043 0202 	orr.w	r2, r3, #2
    29b8:	687b      	ldr	r3, [r7, #4]
    29ba:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    29bc:	2103      	movs	r1, #3
    29be:	6878      	ldr	r0, [r7, #4]
    29c0:	4b02      	ldr	r3, [pc, #8]	; (29cc <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    29c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    29c4:	bf00      	nop
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bd80      	pop	{r7, pc}
    29cc:	00002941 	.word	0x00002941

000029d0 <hri_sercomspi_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	460b      	mov	r3, r1
    29da:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	681b      	ldr	r3, [r3, #0]
    29e0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_SPI_CTRLA_ENABLE;
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	f023 0302 	bic.w	r3, r3, #2
    29e8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_SPI_CTRLA_ENABLE_Pos;
    29ea:	78fb      	ldrb	r3, [r7, #3]
    29ec:	005b      	lsls	r3, r3, #1
    29ee:	461a      	mov	r2, r3
    29f0:	68fb      	ldr	r3, [r7, #12]
    29f2:	4313      	orrs	r3, r2
    29f4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	68fa      	ldr	r2, [r7, #12]
    29fa:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    29fc:	2103      	movs	r1, #3
    29fe:	6878      	ldr	r0, [r7, #4]
    2a00:	4b02      	ldr	r3, [pc, #8]	; (2a0c <hri_sercomspi_write_CTRLA_ENABLE_bit+0x3c>)
    2a02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2a04:	bf00      	nop
    2a06:	3710      	adds	r7, #16
    2a08:	46bd      	mov	sp, r7
    2a0a:	bd80      	pop	{r7, pc}
    2a0c:	00002941 	.word	0x00002941

00002a10 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b082      	sub	sp, #8
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	681b      	ldr	r3, [r3, #0]
    2a1c:	f023 0202 	bic.w	r2, r3, #2
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    2a24:	2103      	movs	r1, #3
    2a26:	6878      	ldr	r0, [r7, #4]
    2a28:	4b02      	ldr	r3, [pc, #8]	; (2a34 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    2a2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2a2c:	bf00      	nop
    2a2e:	3708      	adds	r7, #8
    2a30:	46bd      	mov	sp, r7
    2a32:	bd80      	pop	{r7, pc}
    2a34:	00002941 	.word	0x00002941

00002a38 <hri_sercomspi_write_CTRLA_DOPO_bf>:
	tmp = (tmp & SERCOM_SPI_CTRLA_DOPO(mask)) >> SERCOM_SPI_CTRLA_DOPO_Pos;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLA_DOPO_bf(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b084      	sub	sp, #16
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	6078      	str	r0, [r7, #4]
    2a40:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	681b      	ldr	r3, [r3, #0]
    2a46:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_SPI_CTRLA_DOPO_Msk;
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    2a4e:	60fb      	str	r3, [r7, #12]
	tmp |= SERCOM_SPI_CTRLA_DOPO(data);
    2a50:	683b      	ldr	r3, [r7, #0]
    2a52:	041b      	lsls	r3, r3, #16
    2a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    2a58:	68fa      	ldr	r2, [r7, #12]
    2a5a:	4313      	orrs	r3, r2
    2a5c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	68fa      	ldr	r2, [r7, #12]
    2a62:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    2a64:	2117      	movs	r1, #23
    2a66:	6878      	ldr	r0, [r7, #4]
    2a68:	4b02      	ldr	r3, [pc, #8]	; (2a74 <hri_sercomspi_write_CTRLA_DOPO_bf+0x3c>)
    2a6a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2a6c:	bf00      	nop
    2a6e:	3710      	adds	r7, #16
    2a70:	46bd      	mov	sp, r7
    2a72:	bd80      	pop	{r7, pc}
    2a74:	00002941 	.word	0x00002941

00002a78 <hri_sercomspi_write_CTRLA_DIPO_bf>:
	tmp = (tmp & SERCOM_SPI_CTRLA_DIPO(mask)) >> SERCOM_SPI_CTRLA_DIPO_Pos;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLA_DIPO_bf(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b084      	sub	sp, #16
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
    2a80:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	681b      	ldr	r3, [r3, #0]
    2a86:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_SPI_CTRLA_DIPO_Msk;
    2a88:	68fb      	ldr	r3, [r7, #12]
    2a8a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    2a8e:	60fb      	str	r3, [r7, #12]
	tmp |= SERCOM_SPI_CTRLA_DIPO(data);
    2a90:	683b      	ldr	r3, [r7, #0]
    2a92:	051b      	lsls	r3, r3, #20
    2a94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    2a98:	68fa      	ldr	r2, [r7, #12]
    2a9a:	4313      	orrs	r3, r2
    2a9c:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	68fa      	ldr	r2, [r7, #12]
    2aa2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    2aa4:	2117      	movs	r1, #23
    2aa6:	6878      	ldr	r0, [r7, #4]
    2aa8:	4b02      	ldr	r3, [pc, #8]	; (2ab4 <hri_sercomspi_write_CTRLA_DIPO_bf+0x3c>)
    2aaa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2aac:	bf00      	nop
    2aae:	3710      	adds	r7, #16
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bd80      	pop	{r7, pc}
    2ab4:	00002941 	.word	0x00002941

00002ab8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b084      	sub	sp, #16
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    2ac2:	2103      	movs	r1, #3
    2ac4:	6878      	ldr	r0, [r7, #4]
    2ac6:	4b07      	ldr	r3, [pc, #28]	; (2ae4 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    2ac8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	681b      	ldr	r3, [r3, #0]
    2ace:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2ad0:	68fa      	ldr	r2, [r7, #12]
    2ad2:	683b      	ldr	r3, [r7, #0]
    2ad4:	4013      	ands	r3, r2
    2ad6:	60fb      	str	r3, [r7, #12]
	return tmp;
    2ad8:	68fb      	ldr	r3, [r7, #12]
}
    2ada:	4618      	mov	r0, r3
    2adc:	3710      	adds	r7, #16
    2ade:	46bd      	mov	sp, r7
    2ae0:	bd80      	pop	{r7, pc}
    2ae2:	bf00      	nop
    2ae4:	00002941 	.word	0x00002941

00002ae8 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b082      	sub	sp, #8
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
    2af0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	683a      	ldr	r2, [r7, #0]
    2af6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    2af8:	2103      	movs	r1, #3
    2afa:	6878      	ldr	r0, [r7, #4]
    2afc:	4b02      	ldr	r3, [pc, #8]	; (2b08 <hri_sercomspi_write_CTRLA_reg+0x20>)
    2afe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2b00:	bf00      	nop
    2b02:	3708      	adds	r7, #8
    2b04:	46bd      	mov	sp, r7
    2b06:	bd80      	pop	{r7, pc}
    2b08:	00002941 	.word	0x00002941

00002b0c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b082      	sub	sp, #8
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	683a      	ldr	r2, [r7, #0]
    2b1a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    2b1c:	2117      	movs	r1, #23
    2b1e:	6878      	ldr	r0, [r7, #4]
    2b20:	4b02      	ldr	r3, [pc, #8]	; (2b2c <hri_sercomspi_write_CTRLB_reg+0x20>)
    2b22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2b24:	bf00      	nop
    2b26:	3708      	adds	r7, #8
    2b28:	46bd      	mov	sp, r7
    2b2a:	bd80      	pop	{r7, pc}
    2b2c:	00002941 	.word	0x00002941

00002b30 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    2b30:	b480      	push	{r7}
    2b32:	b083      	sub	sp, #12
    2b34:	af00      	add	r7, sp, #0
    2b36:	6078      	str	r0, [r7, #4]
    2b38:	460b      	mov	r3, r1
    2b3a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	78fa      	ldrb	r2, [r7, #3]
    2b40:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2b42:	bf00      	nop
    2b44:	370c      	adds	r7, #12
    2b46:	46bd      	mov	sp, r7
    2b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b4c:	4770      	bx	lr

00002b4e <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    2b4e:	b480      	push	{r7}
    2b50:	b083      	sub	sp, #12
    2b52:	af00      	add	r7, sp, #0
    2b54:	6078      	str	r0, [r7, #4]
    2b56:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	683a      	ldr	r2, [r7, #0]
    2b5c:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2b5e:	bf00      	nop
    2b60:	370c      	adds	r7, #12
    2b62:	46bd      	mov	sp, r7
    2b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b68:	4770      	bx	lr

00002b6a <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    2b6a:	b480      	push	{r7}
    2b6c:	b083      	sub	sp, #12
    2b6e:	af00      	add	r7, sp, #0
    2b70:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    2b76:	4618      	mov	r0, r3
    2b78:	370c      	adds	r7, #12
    2b7a:	46bd      	mov	sp, r7
    2b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b80:	4770      	bx	lr
	...

00002b84 <ENC_SPI_init>:

/**
 * \brief Initialize SPI interface
 */
int8_t ENC_SPI_init()
{
    2b84:	b580      	push	{r7, lr}
    2b86:	b082      	sub	sp, #8
    2b88:	af00      	add	r7, sp, #0

	if (!hri_sercomspi_is_syncing(SERCOM0, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2b8a:	2101      	movs	r1, #1
    2b8c:	4820      	ldr	r0, [pc, #128]	; (2c10 <ENC_SPI_init+0x8c>)
    2b8e:	4b21      	ldr	r3, [pc, #132]	; (2c14 <ENC_SPI_init+0x90>)
    2b90:	4798      	blx	r3
    2b92:	4603      	mov	r3, r0
    2b94:	f083 0301 	eor.w	r3, r3, #1
    2b98:	b2db      	uxtb	r3, r3
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d016      	beq.n	2bcc <ENC_SPI_init+0x48>
		uint32_t mode = SERCOM_SPI_CTRLA_MODE(3);
    2b9e:	230c      	movs	r3, #12
    2ba0:	607b      	str	r3, [r7, #4]
		if (hri_sercomspi_get_CTRLA_reg(SERCOM0, SERCOM_SPI_CTRLA_ENABLE)) {
    2ba2:	2102      	movs	r1, #2
    2ba4:	481a      	ldr	r0, [pc, #104]	; (2c10 <ENC_SPI_init+0x8c>)
    2ba6:	4b1c      	ldr	r3, [pc, #112]	; (2c18 <ENC_SPI_init+0x94>)
    2ba8:	4798      	blx	r3
    2baa:	4603      	mov	r3, r0
    2bac:	2b00      	cmp	r3, #0
    2bae:	d006      	beq.n	2bbe <ENC_SPI_init+0x3a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(SERCOM0);
    2bb0:	4817      	ldr	r0, [pc, #92]	; (2c10 <ENC_SPI_init+0x8c>)
    2bb2:	4b1a      	ldr	r3, [pc, #104]	; (2c1c <ENC_SPI_init+0x98>)
    2bb4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(SERCOM0, SERCOM_SPI_SYNCBUSY_ENABLE);
    2bb6:	2102      	movs	r1, #2
    2bb8:	4815      	ldr	r0, [pc, #84]	; (2c10 <ENC_SPI_init+0x8c>)
    2bba:	4b19      	ldr	r3, [pc, #100]	; (2c20 <ENC_SPI_init+0x9c>)
    2bbc:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(SERCOM0, SERCOM_SPI_CTRLA_SWRST | mode);
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	f043 0301 	orr.w	r3, r3, #1
    2bc4:	4619      	mov	r1, r3
    2bc6:	4812      	ldr	r0, [pc, #72]	; (2c10 <ENC_SPI_init+0x8c>)
    2bc8:	4b16      	ldr	r3, [pc, #88]	; (2c24 <ENC_SPI_init+0xa0>)
    2bca:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(SERCOM0, SERCOM_SPI_SYNCBUSY_SWRST);
    2bcc:	2101      	movs	r1, #1
    2bce:	4810      	ldr	r0, [pc, #64]	; (2c10 <ENC_SPI_init+0x8c>)
    2bd0:	4b13      	ldr	r3, [pc, #76]	; (2c20 <ENC_SPI_init+0x9c>)
    2bd2:	4798      	blx	r3

	hri_sercomspi_write_CTRLA_reg(
    2bd4:	218c      	movs	r1, #140	; 0x8c
    2bd6:	480e      	ldr	r0, [pc, #56]	; (2c10 <ENC_SPI_init+0x8c>)
    2bd8:	4b12      	ldr	r3, [pc, #72]	; (2c24 <ENC_SPI_init+0xa0>)
    2bda:	4798      	blx	r3
	        | 0 << SERCOM_SPI_CTRLA_FORM_Pos     /* Frame Format: 0 */
	        | 0 << SERCOM_SPI_CTRLA_IBON_Pos     /* Immediate Buffer Overflow Notification: disabled */
	        | 1 << SERCOM_SPI_CTRLA_RUNSTDBY_Pos /* Run In Standby: enabled */
	        | 3 << SERCOM_SPI_CTRLA_MODE_Pos);   /* Operating Mode: 3 */

	hri_sercomspi_write_CTRLA_DOPO_bf(SERCOM0, SERCOM0_TXPO);
    2bdc:	2100      	movs	r1, #0
    2bde:	480c      	ldr	r0, [pc, #48]	; (2c10 <ENC_SPI_init+0x8c>)
    2be0:	4b11      	ldr	r3, [pc, #68]	; (2c28 <ENC_SPI_init+0xa4>)
    2be2:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_DIPO_bf(SERCOM0, SERCOM0_RXPO);
    2be4:	2102      	movs	r1, #2
    2be6:	480a      	ldr	r0, [pc, #40]	; (2c10 <ENC_SPI_init+0x8c>)
    2be8:	4b10      	ldr	r3, [pc, #64]	; (2c2c <ENC_SPI_init+0xa8>)
    2bea:	4798      	blx	r3

	hri_sercomspi_write_CTRLB_reg(SERCOM0,
    2bec:	f44f 3108 	mov.w	r1, #139264	; 0x22000
    2bf0:	4807      	ldr	r0, [pc, #28]	; (2c10 <ENC_SPI_init+0x8c>)
    2bf2:	4b0f      	ldr	r3, [pc, #60]	; (2c30 <ENC_SPI_init+0xac>)
    2bf4:	4798      	blx	r3
	                                  | 0 << SERCOM_SPI_CTRLB_AMODE_Pos   /* Address Mode: 0 */
	                                  | 0 << SERCOM_SPI_CTRLB_SSDE_Pos    /* Slave Select Low Detect Enable: disabled */
	                                  | 0 << SERCOM_SPI_CTRLB_PLOADEN_Pos /* Slave Data Preload Enable: disabled */
	                                  | 0);                               /* Character Size: 0 */

	hri_sercomspi_write_BAUD_reg(SERCOM0, SERCOM0_BAUD_RATE);
    2bf6:	210b      	movs	r1, #11
    2bf8:	4805      	ldr	r0, [pc, #20]	; (2c10 <ENC_SPI_init+0x8c>)
    2bfa:	4b0e      	ldr	r3, [pc, #56]	; (2c34 <ENC_SPI_init+0xb0>)
    2bfc:	4798      	blx	r3
	//		 | 0 << SERCOM_SPI_INTENSET_SSL_Pos /* Slave Select Low Interrupt Enable: disabled */
	//		 | 0 << SERCOM_SPI_INTENSET_RXC_Pos /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SERCOM_SPI_INTENSET_TXC_Pos /* Transmit Complete Interrupt Enable: disabled */
	//		 | 0 << SERCOM_SPI_INTENSET_DRE_Pos); /* Data Register Empty Interrupt Enable: disabled */

	hri_sercomspi_write_CTRLA_ENABLE_bit(SERCOM0, 1 << SERCOM_SPI_CTRLA_ENABLE_Pos); /* Enable: enabled */
    2bfe:	2101      	movs	r1, #1
    2c00:	4803      	ldr	r0, [pc, #12]	; (2c10 <ENC_SPI_init+0x8c>)
    2c02:	4b0d      	ldr	r3, [pc, #52]	; (2c38 <ENC_SPI_init+0xb4>)
    2c04:	4798      	blx	r3

	return 0;
    2c06:	2300      	movs	r3, #0
}
    2c08:	4618      	mov	r0, r3
    2c0a:	3708      	adds	r7, #8
    2c0c:	46bd      	mov	sp, r7
    2c0e:	bd80      	pop	{r7, pc}
    2c10:	40003000 	.word	0x40003000
    2c14:	00002965 	.word	0x00002965
    2c18:	00002ab9 	.word	0x00002ab9
    2c1c:	00002a11 	.word	0x00002a11
    2c20:	00002941 	.word	0x00002941
    2c24:	00002ae9 	.word	0x00002ae9
    2c28:	00002a39 	.word	0x00002a39
    2c2c:	00002a79 	.word	0x00002a79
    2c30:	00002b0d 	.word	0x00002b0d
    2c34:	00002b31 	.word	0x00002b31
    2c38:	000029d1 	.word	0x000029d1

00002c3c <ENC_SPI_enable>:

/**
 * \brief Enable SPI module
 */
void ENC_SPI_enable()
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	af00      	add	r7, sp, #0
	hri_sercomspi_set_CTRLA_ENABLE_bit(SERCOM0);
    2c40:	4802      	ldr	r0, [pc, #8]	; (2c4c <ENC_SPI_enable+0x10>)
    2c42:	4b03      	ldr	r3, [pc, #12]	; (2c50 <ENC_SPI_enable+0x14>)
    2c44:	4798      	blx	r3
}
    2c46:	bf00      	nop
    2c48:	bd80      	pop	{r7, pc}
    2c4a:	bf00      	nop
    2c4c:	40003000 	.word	0x40003000
    2c50:	000029a9 	.word	0x000029a9

00002c54 <ENC_SPI_read_block>:
		b++;
	}
}

void ENC_SPI_read_block(void *block, uint8_t size)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b084      	sub	sp, #16
    2c58:	af00      	add	r7, sp, #0
    2c5a:	6078      	str	r0, [r7, #4]
    2c5c:	460b      	mov	r3, r1
    2c5e:	70fb      	strb	r3, [r7, #3]

	uint8_t *b = (uint8_t *)block;
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	60fb      	str	r3, [r7, #12]
	while (size--) {
    2c64:	e016      	b.n	2c94 <ENC_SPI_read_block+0x40>
		hri_sercomspi_write_DATA_reg(SERCOM0, 0);
    2c66:	2100      	movs	r1, #0
    2c68:	480f      	ldr	r0, [pc, #60]	; (2ca8 <ENC_SPI_read_block+0x54>)
    2c6a:	4b10      	ldr	r3, [pc, #64]	; (2cac <ENC_SPI_read_block+0x58>)
    2c6c:	4798      	blx	r3
		while (!(hri_sercomspi_read_INTFLAG_reg(SERCOM0) & SERCOM_SPI_INTFLAG_RXC))
    2c6e:	bf00      	nop
    2c70:	480d      	ldr	r0, [pc, #52]	; (2ca8 <ENC_SPI_read_block+0x54>)
    2c72:	4b0f      	ldr	r3, [pc, #60]	; (2cb0 <ENC_SPI_read_block+0x5c>)
    2c74:	4798      	blx	r3
    2c76:	4603      	mov	r3, r0
    2c78:	f003 0304 	and.w	r3, r3, #4
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d0f7      	beq.n	2c70 <ENC_SPI_read_block+0x1c>
			;
		*b = hri_sercomspi_read_DATA_reg(SERCOM0);
    2c80:	4809      	ldr	r0, [pc, #36]	; (2ca8 <ENC_SPI_read_block+0x54>)
    2c82:	4b0c      	ldr	r3, [pc, #48]	; (2cb4 <ENC_SPI_read_block+0x60>)
    2c84:	4798      	blx	r3
    2c86:	4603      	mov	r3, r0
    2c88:	b2da      	uxtb	r2, r3
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	701a      	strb	r2, [r3, #0]
		b++;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	3301      	adds	r3, #1
    2c92:	60fb      	str	r3, [r7, #12]
	while (size--) {
    2c94:	78fb      	ldrb	r3, [r7, #3]
    2c96:	1e5a      	subs	r2, r3, #1
    2c98:	70fa      	strb	r2, [r7, #3]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d1e3      	bne.n	2c66 <ENC_SPI_read_block+0x12>
	}
}
    2c9e:	bf00      	nop
    2ca0:	3710      	adds	r7, #16
    2ca2:	46bd      	mov	sp, r7
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	bf00      	nop
    2ca8:	40003000 	.word	0x40003000
    2cac:	00002b4f 	.word	0x00002b4f
    2cb0:	0000298d 	.word	0x0000298d
    2cb4:	00002b6b 	.word	0x00002b6b

00002cb8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2cb8:	b480      	push	{r7}
    2cba:	b083      	sub	sp, #12
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	6078      	str	r0, [r7, #4]
    2cc0:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2cc2:	bf00      	nop
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	689a      	ldr	r2, [r3, #8]
    2cc8:	683b      	ldr	r3, [r7, #0]
    2cca:	4013      	ands	r3, r2
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d1f9      	bne.n	2cc4 <hri_tcc_wait_for_sync+0xc>
	};
}
    2cd0:	bf00      	nop
    2cd2:	370c      	adds	r7, #12
    2cd4:	46bd      	mov	sp, r7
    2cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2cda:	4770      	bx	lr

00002cdc <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    2cdc:	b480      	push	{r7}
    2cde:	b083      	sub	sp, #12
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
    2ce4:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	689a      	ldr	r2, [r3, #8]
    2cea:	683b      	ldr	r3, [r7, #0]
    2cec:	4013      	ands	r3, r2
    2cee:	2b00      	cmp	r3, #0
    2cf0:	bf14      	ite	ne
    2cf2:	2301      	movne	r3, #1
    2cf4:	2300      	moveq	r3, #0
    2cf6:	b2db      	uxtb	r3, r3
}
    2cf8:	4618      	mov	r0, r3
    2cfa:	370c      	adds	r7, #12
    2cfc:	46bd      	mov	sp, r7
    2cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d02:	4770      	bx	lr

00002d04 <hri_tcc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b084      	sub	sp, #16
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
    2d0c:	460b      	mov	r3, r1
    2d0e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TCC_CRITICAL_SECTION_ENTER();
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	681b      	ldr	r3, [r3, #0]
    2d14:	60fb      	str	r3, [r7, #12]
	tmp &= ~TCC_CTRLA_ENABLE;
    2d16:	68fb      	ldr	r3, [r7, #12]
    2d18:	f023 0302 	bic.w	r3, r3, #2
    2d1c:	60fb      	str	r3, [r7, #12]
	tmp |= value << TCC_CTRLA_ENABLE_Pos;
    2d1e:	78fb      	ldrb	r3, [r7, #3]
    2d20:	005b      	lsls	r3, r3, #1
    2d22:	461a      	mov	r2, r3
    2d24:	68fb      	ldr	r3, [r7, #12]
    2d26:	4313      	orrs	r3, r2
    2d28:	60fb      	str	r3, [r7, #12]
	((Tcc *)hw)->CTRLA.reg = tmp;
    2d2a:	687b      	ldr	r3, [r7, #4]
    2d2c:	68fa      	ldr	r2, [r7, #12]
    2d2e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2d30:	2103      	movs	r1, #3
    2d32:	6878      	ldr	r0, [r7, #4]
    2d34:	4b02      	ldr	r3, [pc, #8]	; (2d40 <hri_tcc_write_CTRLA_ENABLE_bit+0x3c>)
    2d36:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2d38:	bf00      	nop
    2d3a:	3710      	adds	r7, #16
    2d3c:	46bd      	mov	sp, r7
    2d3e:	bd80      	pop	{r7, pc}
    2d40:	00002cb9 	.word	0x00002cb9

00002d44 <hri_tcc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2d44:	b580      	push	{r7, lr}
    2d46:	b082      	sub	sp, #8
    2d48:	af00      	add	r7, sp, #0
    2d4a:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	f023 0202 	bic.w	r2, r3, #2
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2d58:	2103      	movs	r1, #3
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	4b02      	ldr	r3, [pc, #8]	; (2d68 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    2d5e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2d60:	bf00      	nop
    2d62:	3708      	adds	r7, #8
    2d64:	46bd      	mov	sp, r7
    2d66:	bd80      	pop	{r7, pc}
    2d68:	00002cb9 	.word	0x00002cb9

00002d6c <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b084      	sub	sp, #16
    2d70:	af00      	add	r7, sp, #0
    2d72:	6078      	str	r0, [r7, #4]
    2d74:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2d76:	2103      	movs	r1, #3
    2d78:	6878      	ldr	r0, [r7, #4]
    2d7a:	4b07      	ldr	r3, [pc, #28]	; (2d98 <hri_tcc_get_CTRLA_reg+0x2c>)
    2d7c:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2d84:	68fa      	ldr	r2, [r7, #12]
    2d86:	683b      	ldr	r3, [r7, #0]
    2d88:	4013      	ands	r3, r2
    2d8a:	60fb      	str	r3, [r7, #12]
	return tmp;
    2d8c:	68fb      	ldr	r3, [r7, #12]
}
    2d8e:	4618      	mov	r0, r3
    2d90:	3710      	adds	r7, #16
    2d92:	46bd      	mov	sp, r7
    2d94:	bd80      	pop	{r7, pc}
    2d96:	bf00      	nop
    2d98:	00002cb9 	.word	0x00002cb9

00002d9c <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b082      	sub	sp, #8
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
    2da4:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	683a      	ldr	r2, [r7, #0]
    2daa:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    2dac:	2103      	movs	r1, #3
    2dae:	6878      	ldr	r0, [r7, #4]
    2db0:	4b02      	ldr	r3, [pc, #8]	; (2dbc <hri_tcc_write_CTRLA_reg+0x20>)
    2db2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2db4:	bf00      	nop
    2db6:	3708      	adds	r7, #8
    2db8:	46bd      	mov	sp, r7
    2dba:	bd80      	pop	{r7, pc}
    2dbc:	00002cb9 	.word	0x00002cb9

00002dc0 <hri_tcc_write_WEXCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WEXCTRL_reg(const void *const hw, hri_tcc_wexctrl_reg_t data)
{
    2dc0:	b480      	push	{r7}
    2dc2:	b083      	sub	sp, #12
    2dc4:	af00      	add	r7, sp, #0
    2dc6:	6078      	str	r0, [r7, #4]
    2dc8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WEXCTRL.reg = data;
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	683a      	ldr	r2, [r7, #0]
    2dce:	615a      	str	r2, [r3, #20]
	TCC_CRITICAL_SECTION_LEAVE();
}
    2dd0:	bf00      	nop
    2dd2:	370c      	adds	r7, #12
    2dd4:	46bd      	mov	sp, r7
    2dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dda:	4770      	bx	lr

00002ddc <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    2ddc:	b480      	push	{r7}
    2dde:	b083      	sub	sp, #12
    2de0:	af00      	add	r7, sp, #0
    2de2:	6078      	str	r0, [r7, #4]
    2de4:	460b      	mov	r3, r1
    2de6:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	78fa      	ldrb	r2, [r7, #3]
    2dec:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    2dee:	bf00      	nop
    2df0:	370c      	adds	r7, #12
    2df2:	46bd      	mov	sp, r7
    2df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2df8:	4770      	bx	lr

00002dfa <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    2dfa:	b480      	push	{r7}
    2dfc:	b083      	sub	sp, #12
    2dfe:	af00      	add	r7, sp, #0
    2e00:	6078      	str	r0, [r7, #4]
    2e02:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	683a      	ldr	r2, [r7, #0]
    2e08:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    2e0a:	bf00      	nop
    2e0c:	370c      	adds	r7, #12
    2e0e:	46bd      	mov	sp, r7
    2e10:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e14:	4770      	bx	lr
	...

00002e18 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b082      	sub	sp, #8
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	6078      	str	r0, [r7, #4]
    2e20:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	683a      	ldr	r2, [r7, #0]
    2e26:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    2e28:	f643 71ff 	movw	r1, #16383	; 0x3fff
    2e2c:	6878      	ldr	r0, [r7, #4]
    2e2e:	4b03      	ldr	r3, [pc, #12]	; (2e3c <hri_tcc_write_WAVE_reg+0x24>)
    2e30:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2e32:	bf00      	nop
    2e34:	3708      	adds	r7, #8
    2e36:	46bd      	mov	sp, r7
    2e38:	bd80      	pop	{r7, pc}
    2e3a:	bf00      	nop
    2e3c:	00002cb9 	.word	0x00002cb9

00002e40 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    2e40:	b580      	push	{r7, lr}
    2e42:	b082      	sub	sp, #8
    2e44:	af00      	add	r7, sp, #0
    2e46:	6078      	str	r0, [r7, #4]
    2e48:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	683a      	ldr	r2, [r7, #0]
    2e4e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    2e50:	2180      	movs	r1, #128	; 0x80
    2e52:	6878      	ldr	r0, [r7, #4]
    2e54:	4b02      	ldr	r3, [pc, #8]	; (2e60 <hri_tcc_write_PER_reg+0x20>)
    2e56:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    2e58:	bf00      	nop
    2e5a:	3708      	adds	r7, #8
    2e5c:	46bd      	mov	sp, r7
    2e5e:	bd80      	pop	{r7, pc}
    2e60:	00002cb9 	.word	0x00002cb9

00002e64 <Moror_PWM_init>:

/**
 * \brief Initialize TCC interface
 */
int8_t Moror_PWM_init()
{
    2e64:	b580      	push	{r7, lr}
    2e66:	af00      	add	r7, sp, #0

	if (!hri_tcc_is_syncing(TCC0, TCC_SYNCBUSY_SWRST)) {
    2e68:	2101      	movs	r1, #1
    2e6a:	4820      	ldr	r0, [pc, #128]	; (2eec <Moror_PWM_init+0x88>)
    2e6c:	4b20      	ldr	r3, [pc, #128]	; (2ef0 <Moror_PWM_init+0x8c>)
    2e6e:	4798      	blx	r3
    2e70:	4603      	mov	r3, r0
    2e72:	f083 0301 	eor.w	r3, r3, #1
    2e76:	b2db      	uxtb	r3, r3
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d011      	beq.n	2ea0 <Moror_PWM_init+0x3c>
		if (hri_tcc_get_CTRLA_reg(TCC0, TCC_CTRLA_ENABLE)) {
    2e7c:	2102      	movs	r1, #2
    2e7e:	481b      	ldr	r0, [pc, #108]	; (2eec <Moror_PWM_init+0x88>)
    2e80:	4b1c      	ldr	r3, [pc, #112]	; (2ef4 <Moror_PWM_init+0x90>)
    2e82:	4798      	blx	r3
    2e84:	4603      	mov	r3, r0
    2e86:	2b00      	cmp	r3, #0
    2e88:	d006      	beq.n	2e98 <Moror_PWM_init+0x34>
			hri_tcc_clear_CTRLA_ENABLE_bit(TCC0);
    2e8a:	4818      	ldr	r0, [pc, #96]	; (2eec <Moror_PWM_init+0x88>)
    2e8c:	4b1a      	ldr	r3, [pc, #104]	; (2ef8 <Moror_PWM_init+0x94>)
    2e8e:	4798      	blx	r3
			hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_ENABLE);
    2e90:	2102      	movs	r1, #2
    2e92:	4816      	ldr	r0, [pc, #88]	; (2eec <Moror_PWM_init+0x88>)
    2e94:	4b19      	ldr	r3, [pc, #100]	; (2efc <Moror_PWM_init+0x98>)
    2e96:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(TCC0, TCC_CTRLA_SWRST);
    2e98:	2101      	movs	r1, #1
    2e9a:	4814      	ldr	r0, [pc, #80]	; (2eec <Moror_PWM_init+0x88>)
    2e9c:	4b18      	ldr	r3, [pc, #96]	; (2f00 <Moror_PWM_init+0x9c>)
    2e9e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(TCC0, TCC_SYNCBUSY_SWRST);
    2ea0:	2101      	movs	r1, #1
    2ea2:	4812      	ldr	r0, [pc, #72]	; (2eec <Moror_PWM_init+0x88>)
    2ea4:	4b15      	ldr	r3, [pc, #84]	; (2efc <Moror_PWM_init+0x98>)
    2ea6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(TCC0,
    2ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2eac:	480f      	ldr	r0, [pc, #60]	; (2eec <Moror_PWM_init+0x88>)
    2eae:	4b14      	ldr	r3, [pc, #80]	; (2f00 <Moror_PWM_init+0x9c>)
    2eb0:	4798      	blx	r3
	//		 | 0 << TCC_DRVCTRL_NRE3_Pos /* Non-Recoverable State 3 Output Enable: disabled */
	//		 | 0 << TCC_DRVCTRL_NRE2_Pos /* Non-Recoverable State 2 Output Enable: disabled */
	//		 | 0 << TCC_DRVCTRL_NRE1_Pos /* Non-Recoverable State 1 Output Enable: disabled */
	//		 | 0 << TCC_DRVCTRL_NRE0_Pos); /* Non-Recoverable State 0 Output Enable: disabled */

	hri_tcc_write_DBGCTRL_reg(TCC0,
    2eb2:	2101      	movs	r1, #1
    2eb4:	480d      	ldr	r0, [pc, #52]	; (2eec <Moror_PWM_init+0x88>)
    2eb6:	4b13      	ldr	r3, [pc, #76]	; (2f04 <Moror_PWM_init+0xa0>)
    2eb8:	4798      	blx	r3

	// hri_tcc_write_CC_reg(TCC0, 4 ,0x0); /* Channel 4 Compare/Capture Value: 0x0 */

	// hri_tcc_write_CC_reg(TCC0, 5 ,0x0); /* Channel 5 Compare/Capture Value: 0x0 */

	hri_tcc_write_WEXCTRL_reg(TCC0,
    2eba:	4913      	ldr	r1, [pc, #76]	; (2f08 <Moror_PWM_init+0xa4>)
    2ebc:	480b      	ldr	r0, [pc, #44]	; (2eec <Moror_PWM_init+0x88>)
    2ebe:	4b13      	ldr	r3, [pc, #76]	; (2f0c <Moror_PWM_init+0xa8>)
    2ec0:	4798      	blx	r3
	                              | 1 << TCC_WEXCTRL_DTIEN2_Pos  /* Dead-time Insertion Generator 2 Enable: 1 */
	                              | 1 << TCC_WEXCTRL_DTIEN1_Pos  /* Dead-time Insertion Generator 1 Enable: 1 */
	                              | 1 << TCC_WEXCTRL_DTIEN0_Pos  /* Dead-time Insertion Generator 0 Enable: 1 */
	                              | 0x2);                        /* Output Matrix: 0x2 */

	hri_tcc_write_WAVE_reg(TCC0,
    2ec2:	4913      	ldr	r1, [pc, #76]	; (2f10 <Moror_PWM_init+0xac>)
    2ec4:	4809      	ldr	r0, [pc, #36]	; (2eec <Moror_PWM_init+0x88>)
    2ec6:	4b13      	ldr	r3, [pc, #76]	; (2f14 <Moror_PWM_init+0xb0>)
    2ec8:	4798      	blx	r3
	//		 | 0 << TCC_PATT_PGE3_Pos /* Pattern Generator 3 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE2_Pos /* Pattern Generator 2 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE1_Pos /* Pattern Generator 1 Output Enable: disabled */
	//		 | 0 << TCC_PATT_PGE0_Pos); /* Pattern Generator 0 Output Enable: disabled */

	hri_tcc_write_PER_reg(TCC0, 0x320); /*  Period Value: 0x320 */
    2eca:	f44f 7148 	mov.w	r1, #800	; 0x320
    2ece:	4807      	ldr	r0, [pc, #28]	; (2eec <Moror_PWM_init+0x88>)
    2ed0:	4b11      	ldr	r3, [pc, #68]	; (2f18 <Moror_PWM_init+0xb4>)
    2ed2:	4798      	blx	r3

	hri_tcc_write_EVCTRL_reg(
    2ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
    2ed8:	4804      	ldr	r0, [pc, #16]	; (2eec <Moror_PWM_init+0x88>)
    2eda:	4b10      	ldr	r3, [pc, #64]	; (2f1c <Moror_PWM_init+0xb8>)
    2edc:	4798      	blx	r3
	//		 | 0 << TCC_INTENSET_ERR_Pos /* Error Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_CNT_Pos /* Counter Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_TRG_Pos /* Retrigger Interrupt Enable: disabled */
	//		 | 0 << TCC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    2ede:	2101      	movs	r1, #1
    2ee0:	4802      	ldr	r0, [pc, #8]	; (2eec <Moror_PWM_init+0x88>)
    2ee2:	4b0f      	ldr	r3, [pc, #60]	; (2f20 <Moror_PWM_init+0xbc>)
    2ee4:	4798      	blx	r3

	return 0;
    2ee6:	2300      	movs	r3, #0
}
    2ee8:	4618      	mov	r0, r3
    2eea:	bd80      	pop	{r7, pc}
    2eec:	41016000 	.word	0x41016000
    2ef0:	00002cdd 	.word	0x00002cdd
    2ef4:	00002d6d 	.word	0x00002d6d
    2ef8:	00002d45 	.word	0x00002d45
    2efc:	00002cb9 	.word	0x00002cb9
    2f00:	00002d9d 	.word	0x00002d9d
    2f04:	00002ddd 	.word	0x00002ddd
    2f08:	64640f02 	.word	0x64640f02
    2f0c:	00002dc1 	.word	0x00002dc1
    2f10:	07000005 	.word	0x07000005
    2f14:	00002e19 	.word	0x00002e19
    2f18:	00002e41 	.word	0x00002e41
    2f1c:	00002dfb 	.word	0x00002dfb
    2f20:	00002d05 	.word	0x00002d05

00002f24 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2f24:	b480      	push	{r7}
    2f26:	b083      	sub	sp, #12
    2f28:	af00      	add	r7, sp, #0
    2f2a:	6078      	str	r0, [r7, #4]
    2f2c:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f2e:	bf00      	nop
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	691a      	ldr	r2, [r3, #16]
    2f34:	683b      	ldr	r3, [r7, #0]
    2f36:	4013      	ands	r3, r2
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d1f9      	bne.n	2f30 <hri_tc_wait_for_sync+0xc>
	};
}
    2f3c:	bf00      	nop
    2f3e:	370c      	adds	r7, #12
    2f40:	46bd      	mov	sp, r7
    2f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f46:	4770      	bx	lr

00002f48 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    2f48:	b480      	push	{r7}
    2f4a:	b083      	sub	sp, #12
    2f4c:	af00      	add	r7, sp, #0
    2f4e:	6078      	str	r0, [r7, #4]
    2f50:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	691a      	ldr	r2, [r3, #16]
    2f56:	683b      	ldr	r3, [r7, #0]
    2f58:	4013      	ands	r3, r2
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	bf14      	ite	ne
    2f5e:	2301      	movne	r3, #1
    2f60:	2300      	moveq	r3, #0
    2f62:	b2db      	uxtb	r3, r3
}
    2f64:	4618      	mov	r0, r3
    2f66:	370c      	adds	r7, #12
    2f68:	46bd      	mov	sp, r7
    2f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f6e:	4770      	bx	lr

00002f70 <hri_tc_write_CTRLB_reg>:
{
	return ((Tc *)hw)->COUNT16.CTRLBSET.reg;
}

static inline void hri_tc_write_CTRLB_reg(const void *const hw, hri_tc_ctrlbset_reg_t data)
{
    2f70:	b480      	push	{r7}
    2f72:	b083      	sub	sp, #12
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
    2f78:	460b      	mov	r3, r1
    2f7a:	70fb      	strb	r3, [r7, #3]
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	78fa      	ldrb	r2, [r7, #3]
    2f80:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
    2f82:	78fb      	ldrb	r3, [r7, #3]
    2f84:	43db      	mvns	r3, r3
    2f86:	b2da      	uxtb	r2, r3
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	711a      	strb	r2, [r3, #4]
}
    2f8c:	bf00      	nop
    2f8e:	370c      	adds	r7, #12
    2f90:	46bd      	mov	sp, r7
    2f92:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f96:	4770      	bx	lr

00002f98 <hri_tc_write_INTEN_reg>:
{
	return ((Tc *)hw)->COUNT16.INTENSET.reg;
}

static inline void hri_tc_write_INTEN_reg(const void *const hw, hri_tc_intenset_reg_t data)
{
    2f98:	b480      	push	{r7}
    2f9a:	b083      	sub	sp, #12
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	6078      	str	r0, [r7, #4]
    2fa0:	460b      	mov	r3, r1
    2fa2:	70fb      	strb	r3, [r7, #3]
	((Tc *)hw)->COUNT16.INTENSET.reg = data;
    2fa4:	687b      	ldr	r3, [r7, #4]
    2fa6:	78fa      	ldrb	r2, [r7, #3]
    2fa8:	725a      	strb	r2, [r3, #9]
	((Tc *)hw)->COUNT16.INTENCLR.reg = ~data;
    2faa:	78fb      	ldrb	r3, [r7, #3]
    2fac:	43db      	mvns	r3, r3
    2fae:	b2da      	uxtb	r2, r3
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	721a      	strb	r2, [r3, #8]
}
    2fb4:	bf00      	nop
    2fb6:	370c      	adds	r7, #12
    2fb8:	46bd      	mov	sp, r7
    2fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fbe:	4770      	bx	lr

00002fc0 <hri_tc_write_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_tc_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b084      	sub	sp, #16
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	6078      	str	r0, [r7, #4]
    2fc8:	460b      	mov	r3, r1
    2fca:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	TC_CRITICAL_SECTION_ENTER();
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	681b      	ldr	r3, [r3, #0]
    2fd0:	60fb      	str	r3, [r7, #12]
	tmp &= ~TC_CTRLA_ENABLE;
    2fd2:	68fb      	ldr	r3, [r7, #12]
    2fd4:	f023 0302 	bic.w	r3, r3, #2
    2fd8:	60fb      	str	r3, [r7, #12]
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    2fda:	78fb      	ldrb	r3, [r7, #3]
    2fdc:	005b      	lsls	r3, r3, #1
    2fde:	461a      	mov	r2, r3
    2fe0:	68fb      	ldr	r3, [r7, #12]
    2fe2:	4313      	orrs	r3, r2
    2fe4:	60fb      	str	r3, [r7, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	68fa      	ldr	r2, [r7, #12]
    2fea:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    2fec:	2103      	movs	r1, #3
    2fee:	6878      	ldr	r0, [r7, #4]
    2ff0:	4b02      	ldr	r3, [pc, #8]	; (2ffc <hri_tc_write_CTRLA_ENABLE_bit+0x3c>)
    2ff2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2ff4:	bf00      	nop
    2ff6:	3710      	adds	r7, #16
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bd80      	pop	{r7, pc}
    2ffc:	00002f25 	.word	0x00002f25

00003000 <hri_tc_clear_CTRLA_ENABLE_bit>:

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3000:	b580      	push	{r7, lr}
    3002:	b082      	sub	sp, #8
    3004:	af00      	add	r7, sp, #0
    3006:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	681b      	ldr	r3, [r3, #0]
    300c:	f023 0202 	bic.w	r2, r3, #2
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3014:	2103      	movs	r1, #3
    3016:	6878      	ldr	r0, [r7, #4]
    3018:	4b02      	ldr	r3, [pc, #8]	; (3024 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    301a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    301c:	bf00      	nop
    301e:	3708      	adds	r7, #8
    3020:	46bd      	mov	sp, r7
    3022:	bd80      	pop	{r7, pc}
    3024:	00002f25 	.word	0x00002f25

00003028 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    3028:	b580      	push	{r7, lr}
    302a:	b084      	sub	sp, #16
    302c:	af00      	add	r7, sp, #0
    302e:	6078      	str	r0, [r7, #4]
    3030:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3032:	2103      	movs	r1, #3
    3034:	6878      	ldr	r0, [r7, #4]
    3036:	4b07      	ldr	r3, [pc, #28]	; (3054 <hri_tc_get_CTRLA_reg+0x2c>)
    3038:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    303a:	687b      	ldr	r3, [r7, #4]
    303c:	681b      	ldr	r3, [r3, #0]
    303e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3040:	68fa      	ldr	r2, [r7, #12]
    3042:	683b      	ldr	r3, [r7, #0]
    3044:	4013      	ands	r3, r2
    3046:	60fb      	str	r3, [r7, #12]
	return tmp;
    3048:	68fb      	ldr	r3, [r7, #12]
}
    304a:	4618      	mov	r0, r3
    304c:	3710      	adds	r7, #16
    304e:	46bd      	mov	sp, r7
    3050:	bd80      	pop	{r7, pc}
    3052:	bf00      	nop
    3054:	00002f25 	.word	0x00002f25

00003058 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    3058:	b580      	push	{r7, lr}
    305a:	b082      	sub	sp, #8
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
    3060:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3062:	687b      	ldr	r3, [r7, #4]
    3064:	683a      	ldr	r2, [r7, #0]
    3066:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3068:	2103      	movs	r1, #3
    306a:	6878      	ldr	r0, [r7, #4]
    306c:	4b02      	ldr	r3, [pc, #8]	; (3078 <hri_tc_write_CTRLA_reg+0x20>)
    306e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3070:	bf00      	nop
    3072:	3708      	adds	r7, #8
    3074:	46bd      	mov	sp, r7
    3076:	bd80      	pop	{r7, pc}
    3078:	00002f25 	.word	0x00002f25

0000307c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    307c:	b480      	push	{r7}
    307e:	b083      	sub	sp, #12
    3080:	af00      	add	r7, sp, #0
    3082:	6078      	str	r0, [r7, #4]
    3084:	460b      	mov	r3, r1
    3086:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3088:	687b      	ldr	r3, [r7, #4]
    308a:	887a      	ldrh	r2, [r7, #2]
    308c:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    308e:	bf00      	nop
    3090:	370c      	adds	r7, #12
    3092:	46bd      	mov	sp, r7
    3094:	f85d 7b04 	ldr.w	r7, [sp], #4
    3098:	4770      	bx	lr

0000309a <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    309a:	b480      	push	{r7}
    309c:	b083      	sub	sp, #12
    309e:	af00      	add	r7, sp, #0
    30a0:	6078      	str	r0, [r7, #4]
    30a2:	460b      	mov	r3, r1
    30a4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	78fa      	ldrb	r2, [r7, #3]
    30aa:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    30ac:	bf00      	nop
    30ae:	370c      	adds	r7, #12
    30b0:	46bd      	mov	sp, r7
    30b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30b6:	4770      	bx	lr

000030b8 <HALL_Timer_init>:

/**
 * \brief Initialize TC interface
 */
int8_t HALL_Timer_init()
{
    30b8:	b580      	push	{r7, lr}
    30ba:	af00      	add	r7, sp, #0

	if (!hri_tc_is_syncing(TC0, TC_SYNCBUSY_SWRST)) {
    30bc:	2101      	movs	r1, #1
    30be:	481d      	ldr	r0, [pc, #116]	; (3134 <HALL_Timer_init+0x7c>)
    30c0:	4b1d      	ldr	r3, [pc, #116]	; (3138 <HALL_Timer_init+0x80>)
    30c2:	4798      	blx	r3
    30c4:	4603      	mov	r3, r0
    30c6:	f083 0301 	eor.w	r3, r3, #1
    30ca:	b2db      	uxtb	r3, r3
    30cc:	2b00      	cmp	r3, #0
    30ce:	d011      	beq.n	30f4 <HALL_Timer_init+0x3c>
		if (hri_tc_get_CTRLA_reg(TC0, TC_CTRLA_ENABLE)) {
    30d0:	2102      	movs	r1, #2
    30d2:	4818      	ldr	r0, [pc, #96]	; (3134 <HALL_Timer_init+0x7c>)
    30d4:	4b19      	ldr	r3, [pc, #100]	; (313c <HALL_Timer_init+0x84>)
    30d6:	4798      	blx	r3
    30d8:	4603      	mov	r3, r0
    30da:	2b00      	cmp	r3, #0
    30dc:	d006      	beq.n	30ec <HALL_Timer_init+0x34>
			hri_tc_clear_CTRLA_ENABLE_bit(TC0);
    30de:	4815      	ldr	r0, [pc, #84]	; (3134 <HALL_Timer_init+0x7c>)
    30e0:	4b17      	ldr	r3, [pc, #92]	; (3140 <HALL_Timer_init+0x88>)
    30e2:	4798      	blx	r3
			hri_tc_wait_for_sync(TC0, TC_SYNCBUSY_ENABLE);
    30e4:	2102      	movs	r1, #2
    30e6:	4813      	ldr	r0, [pc, #76]	; (3134 <HALL_Timer_init+0x7c>)
    30e8:	4b16      	ldr	r3, [pc, #88]	; (3144 <HALL_Timer_init+0x8c>)
    30ea:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(TC0, TC_CTRLA_SWRST);
    30ec:	2101      	movs	r1, #1
    30ee:	4811      	ldr	r0, [pc, #68]	; (3134 <HALL_Timer_init+0x7c>)
    30f0:	4b15      	ldr	r3, [pc, #84]	; (3148 <HALL_Timer_init+0x90>)
    30f2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(TC0, TC_SYNCBUSY_SWRST);
    30f4:	2101      	movs	r1, #1
    30f6:	480f      	ldr	r0, [pc, #60]	; (3134 <HALL_Timer_init+0x7c>)
    30f8:	4b12      	ldr	r3, [pc, #72]	; (3144 <HALL_Timer_init+0x8c>)
    30fa:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(TC0,
    30fc:	4913      	ldr	r1, [pc, #76]	; (314c <HALL_Timer_init+0x94>)
    30fe:	480d      	ldr	r0, [pc, #52]	; (3134 <HALL_Timer_init+0x7c>)
    3100:	4b11      	ldr	r3, [pc, #68]	; (3148 <HALL_Timer_init+0x90>)
    3102:	4798      	blx	r3
	                           | 0 << TC_CTRLA_ONDEMAND_Pos  /* Clock On Demand: disabled */
	                           | 1 << TC_CTRLA_RUNSTDBY_Pos  /* Run in Standby: enabled */
	                           | 0 << TC_CTRLA_PRESCALER_Pos /* Setting: 0 */
	                           | 0x2 << TC_CTRLA_MODE_Pos);  /* Operating Mode: 0x2 */

	hri_tc_write_CTRLB_reg(TC0,
    3104:	2100      	movs	r1, #0
    3106:	480b      	ldr	r0, [pc, #44]	; (3134 <HALL_Timer_init+0x7c>)
    3108:	4b11      	ldr	r3, [pc, #68]	; (3150 <HALL_Timer_init+0x98>)
    310a:	4798      	blx	r3
	// hri_tc_write_WAVE_reg(TC0,0); /* Waveform Generation Mode: 0 */

	// hri_tc_write_DRVCTRL_reg(TC0,0 << TC_DRVCTRL_INVEN1_Pos /* Output Waveform 1 Invert Enable: disabled */
	//		 | 0 << TC_DRVCTRL_INVEN0_Pos); /* Output Waveform 0 Invert Enable: disabled */

	hri_tc_write_DBGCTRL_reg(TC0, 1); /* Run in debug: 1 */
    310c:	2101      	movs	r1, #1
    310e:	4809      	ldr	r0, [pc, #36]	; (3134 <HALL_Timer_init+0x7c>)
    3110:	4b10      	ldr	r3, [pc, #64]	; (3154 <HALL_Timer_init+0x9c>)
    3112:	4798      	blx	r3

	// hri_tccount32_write_CC_reg(TC0, 1 ,0x0); /* Compare/Capture Value: 0x0 */

	// hri_tccount32_write_COUNT_reg(TC0,0x0); /* Counter Value: 0x0 */

	hri_tc_write_EVCTRL_reg(
    3114:	2126      	movs	r1, #38	; 0x26
    3116:	4807      	ldr	r0, [pc, #28]	; (3134 <HALL_Timer_init+0x7c>)
    3118:	4b0f      	ldr	r3, [pc, #60]	; (3158 <HALL_Timer_init+0xa0>)
    311a:	4798      	blx	r3
	        | 0 << TC_EVCTRL_OVFEO_Pos /* Overflow/Underflow Event Output Enable: disabled */
	        | 1 << TC_EVCTRL_TCEI_Pos  /* TC Event Input: enabled */
	        | 0 << TC_EVCTRL_TCINV_Pos /* TC Inverted Event Input: disabled */
	        | 6);                      /* Event Action: 6 */

	hri_tc_write_INTEN_reg(TC0,
    311c:	2121      	movs	r1, #33	; 0x21
    311e:	4805      	ldr	r0, [pc, #20]	; (3134 <HALL_Timer_init+0x7c>)
    3120:	4b0e      	ldr	r3, [pc, #56]	; (315c <HALL_Timer_init+0xa4>)
    3122:	4798      	blx	r3
	                       0 << TC_INTENSET_MC0_Pos         /* Match or Capture Channel 0 Interrupt Enable: disabled */
	                           | 1 << TC_INTENSET_MC1_Pos   /* Match or Capture Channel 1 Interrupt Enable: enabled */
	                           | 0 << TC_INTENSET_ERR_Pos   /* Error Interrupt Enable: disabled */
	                           | 1 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: enabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC0, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */
    3124:	2101      	movs	r1, #1
    3126:	4803      	ldr	r0, [pc, #12]	; (3134 <HALL_Timer_init+0x7c>)
    3128:	4b0d      	ldr	r3, [pc, #52]	; (3160 <HALL_Timer_init+0xa8>)
    312a:	4798      	blx	r3

	return 0;
    312c:	2300      	movs	r3, #0
}
    312e:	4618      	mov	r0, r3
    3130:	bd80      	pop	{r7, pc}
    3132:	bf00      	nop
    3134:	40003800 	.word	0x40003800
    3138:	00002f49 	.word	0x00002f49
    313c:	00003029 	.word	0x00003029
    3140:	00003001 	.word	0x00003001
    3144:	00002f25 	.word	0x00002f25
    3148:	00003059 	.word	0x00003059
    314c:	00020048 	.word	0x00020048
    3150:	00002f71 	.word	0x00002f71
    3154:	0000309b 	.word	0x0000309b
    3158:	0000307d 	.word	0x0000307d
    315c:	00002f99 	.word	0x00002f99
    3160:	00002fc1 	.word	0x00002fc1

00003164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3164:	b480      	push	{r7}
    3166:	b083      	sub	sp, #12
    3168:	af00      	add	r7, sp, #0
    316a:	4603      	mov	r3, r0
    316c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    316e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3172:	2b00      	cmp	r3, #0
    3174:	db0b      	blt.n	318e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3176:	4909      	ldr	r1, [pc, #36]	; (319c <__NVIC_EnableIRQ+0x38>)
    3178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    317c:	095b      	lsrs	r3, r3, #5
    317e:	88fa      	ldrh	r2, [r7, #6]
    3180:	f002 021f 	and.w	r2, r2, #31
    3184:	2001      	movs	r0, #1
    3186:	fa00 f202 	lsl.w	r2, r0, r2
    318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    318e:	bf00      	nop
    3190:	370c      	adds	r7, #12
    3192:	46bd      	mov	sp, r7
    3194:	f85d 7b04 	ldr.w	r7, [sp], #4
    3198:	4770      	bx	lr
    319a:	bf00      	nop
    319c:	e000e100 	.word	0xe000e100

000031a0 <hri_port_read_DIR_reg>:
{
    31a0:	b480      	push	{r7}
    31a2:	b083      	sub	sp, #12
    31a4:	af00      	add	r7, sp, #0
    31a6:	6078      	str	r0, [r7, #4]
    31a8:	460b      	mov	r3, r1
    31aa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    31ac:	78fb      	ldrb	r3, [r7, #3]
    31ae:	687a      	ldr	r2, [r7, #4]
    31b0:	01db      	lsls	r3, r3, #7
    31b2:	4413      	add	r3, r2
    31b4:	681b      	ldr	r3, [r3, #0]
}
    31b6:	4618      	mov	r0, r3
    31b8:	370c      	adds	r7, #12
    31ba:	46bd      	mov	sp, r7
    31bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    31c0:	4770      	bx	lr

000031c2 <hri_port_set_OUT_reg>:
{
    31c2:	b480      	push	{r7}
    31c4:	b085      	sub	sp, #20
    31c6:	af00      	add	r7, sp, #0
    31c8:	60f8      	str	r0, [r7, #12]
    31ca:	460b      	mov	r3, r1
    31cc:	607a      	str	r2, [r7, #4]
    31ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    31d0:	7afb      	ldrb	r3, [r7, #11]
    31d2:	68fa      	ldr	r2, [r7, #12]
    31d4:	01db      	lsls	r3, r3, #7
    31d6:	4413      	add	r3, r2
    31d8:	3318      	adds	r3, #24
    31da:	687a      	ldr	r2, [r7, #4]
    31dc:	601a      	str	r2, [r3, #0]
}
    31de:	bf00      	nop
    31e0:	3714      	adds	r7, #20
    31e2:	46bd      	mov	sp, r7
    31e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    31e8:	4770      	bx	lr

000031ea <hri_port_read_OUT_reg>:
{
    31ea:	b480      	push	{r7}
    31ec:	b083      	sub	sp, #12
    31ee:	af00      	add	r7, sp, #0
    31f0:	6078      	str	r0, [r7, #4]
    31f2:	460b      	mov	r3, r1
    31f4:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    31f6:	78fb      	ldrb	r3, [r7, #3]
    31f8:	687a      	ldr	r2, [r7, #4]
    31fa:	01db      	lsls	r3, r3, #7
    31fc:	4413      	add	r3, r2
    31fe:	3310      	adds	r3, #16
    3200:	681b      	ldr	r3, [r3, #0]
}
    3202:	4618      	mov	r0, r3
    3204:	370c      	adds	r7, #12
    3206:	46bd      	mov	sp, r7
    3208:	f85d 7b04 	ldr.w	r7, [sp], #4
    320c:	4770      	bx	lr

0000320e <hri_port_clear_OUT_reg>:
{
    320e:	b480      	push	{r7}
    3210:	b085      	sub	sp, #20
    3212:	af00      	add	r7, sp, #0
    3214:	60f8      	str	r0, [r7, #12]
    3216:	460b      	mov	r3, r1
    3218:	607a      	str	r2, [r7, #4]
    321a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    321c:	7afb      	ldrb	r3, [r7, #11]
    321e:	68fa      	ldr	r2, [r7, #12]
    3220:	01db      	lsls	r3, r3, #7
    3222:	4413      	add	r3, r2
    3224:	3314      	adds	r3, #20
    3226:	687a      	ldr	r2, [r7, #4]
    3228:	601a      	str	r2, [r3, #0]
}
    322a:	bf00      	nop
    322c:	3714      	adds	r7, #20
    322e:	46bd      	mov	sp, r7
    3230:	f85d 7b04 	ldr.w	r7, [sp], #4
    3234:	4770      	bx	lr

00003236 <hri_port_read_IN_reg>:
{
    3236:	b480      	push	{r7}
    3238:	b083      	sub	sp, #12
    323a:	af00      	add	r7, sp, #0
    323c:	6078      	str	r0, [r7, #4]
    323e:	460b      	mov	r3, r1
    3240:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3242:	78fb      	ldrb	r3, [r7, #3]
    3244:	687a      	ldr	r2, [r7, #4]
    3246:	01db      	lsls	r3, r3, #7
    3248:	4413      	add	r3, r2
    324a:	3320      	adds	r3, #32
    324c:	681b      	ldr	r3, [r3, #0]
}
    324e:	4618      	mov	r0, r3
    3250:	370c      	adds	r7, #12
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr
	...

0000325c <_gpio_set_level>:
{
    325c:	b580      	push	{r7, lr}
    325e:	b082      	sub	sp, #8
    3260:	af00      	add	r7, sp, #0
    3262:	4603      	mov	r3, r0
    3264:	6039      	str	r1, [r7, #0]
    3266:	71fb      	strb	r3, [r7, #7]
    3268:	4613      	mov	r3, r2
    326a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    326c:	79bb      	ldrb	r3, [r7, #6]
    326e:	2b00      	cmp	r3, #0
    3270:	d006      	beq.n	3280 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    3272:	79fb      	ldrb	r3, [r7, #7]
    3274:	683a      	ldr	r2, [r7, #0]
    3276:	4619      	mov	r1, r3
    3278:	4806      	ldr	r0, [pc, #24]	; (3294 <_gpio_set_level+0x38>)
    327a:	4b07      	ldr	r3, [pc, #28]	; (3298 <_gpio_set_level+0x3c>)
    327c:	4798      	blx	r3
}
    327e:	e005      	b.n	328c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    3280:	79fb      	ldrb	r3, [r7, #7]
    3282:	683a      	ldr	r2, [r7, #0]
    3284:	4619      	mov	r1, r3
    3286:	4803      	ldr	r0, [pc, #12]	; (3294 <_gpio_set_level+0x38>)
    3288:	4b04      	ldr	r3, [pc, #16]	; (329c <_gpio_set_level+0x40>)
    328a:	4798      	blx	r3
}
    328c:	bf00      	nop
    328e:	3708      	adds	r7, #8
    3290:	46bd      	mov	sp, r7
    3292:	bd80      	pop	{r7, pc}
    3294:	41008000 	.word	0x41008000
    3298:	000031c3 	.word	0x000031c3
    329c:	0000320f 	.word	0x0000320f

000032a0 <_gpio_get_level>:
{
    32a0:	b580      	push	{r7, lr}
    32a2:	b086      	sub	sp, #24
    32a4:	af00      	add	r7, sp, #0
    32a6:	4603      	mov	r3, r0
    32a8:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
    32aa:	f107 030c 	add.w	r3, r7, #12
    32ae:	4618      	mov	r0, r3
    32b0:	4b13      	ldr	r3, [pc, #76]	; (3300 <_gpio_get_level+0x60>)
    32b2:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    32b4:	79fb      	ldrb	r3, [r7, #7]
    32b6:	4619      	mov	r1, r3
    32b8:	4812      	ldr	r0, [pc, #72]	; (3304 <_gpio_get_level+0x64>)
    32ba:	4b13      	ldr	r3, [pc, #76]	; (3308 <_gpio_get_level+0x68>)
    32bc:	4798      	blx	r3
    32be:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    32c0:	79fb      	ldrb	r3, [r7, #7]
    32c2:	4619      	mov	r1, r3
    32c4:	480f      	ldr	r0, [pc, #60]	; (3304 <_gpio_get_level+0x64>)
    32c6:	4b11      	ldr	r3, [pc, #68]	; (330c <_gpio_get_level+0x6c>)
    32c8:	4798      	blx	r3
    32ca:	4602      	mov	r2, r0
    32cc:	697b      	ldr	r3, [r7, #20]
    32ce:	43db      	mvns	r3, r3
    32d0:	4013      	ands	r3, r2
    32d2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    32d4:	79fb      	ldrb	r3, [r7, #7]
    32d6:	4619      	mov	r1, r3
    32d8:	480a      	ldr	r0, [pc, #40]	; (3304 <_gpio_get_level+0x64>)
    32da:	4b0d      	ldr	r3, [pc, #52]	; (3310 <_gpio_get_level+0x70>)
    32dc:	4798      	blx	r3
    32de:	4602      	mov	r2, r0
    32e0:	697b      	ldr	r3, [r7, #20]
    32e2:	4013      	ands	r3, r2
    32e4:	693a      	ldr	r2, [r7, #16]
    32e6:	4313      	orrs	r3, r2
    32e8:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    32ea:	f107 030c 	add.w	r3, r7, #12
    32ee:	4618      	mov	r0, r3
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <_gpio_get_level+0x74>)
    32f2:	4798      	blx	r3
	return tmp;
    32f4:	693b      	ldr	r3, [r7, #16]
}
    32f6:	4618      	mov	r0, r3
    32f8:	3718      	adds	r7, #24
    32fa:	46bd      	mov	sp, r7
    32fc:	bd80      	pop	{r7, pc}
    32fe:	bf00      	nop
    3300:	0000102d 	.word	0x0000102d
    3304:	41008000 	.word	0x41008000
    3308:	000031a1 	.word	0x000031a1
    330c:	00003237 	.word	0x00003237
    3310:	000031eb 	.word	0x000031eb
    3314:	00001053 	.word	0x00001053

00003318 <gpio_set_pin_level>:
{
    3318:	b580      	push	{r7, lr}
    331a:	b082      	sub	sp, #8
    331c:	af00      	add	r7, sp, #0
    331e:	4603      	mov	r3, r0
    3320:	460a      	mov	r2, r1
    3322:	71fb      	strb	r3, [r7, #7]
    3324:	4613      	mov	r3, r2
    3326:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3328:	79fb      	ldrb	r3, [r7, #7]
    332a:	095b      	lsrs	r3, r3, #5
    332c:	b2d8      	uxtb	r0, r3
    332e:	79fb      	ldrb	r3, [r7, #7]
    3330:	f003 031f 	and.w	r3, r3, #31
    3334:	2201      	movs	r2, #1
    3336:	fa02 f303 	lsl.w	r3, r2, r3
    333a:	79ba      	ldrb	r2, [r7, #6]
    333c:	4619      	mov	r1, r3
    333e:	4b03      	ldr	r3, [pc, #12]	; (334c <gpio_set_pin_level+0x34>)
    3340:	4798      	blx	r3
}
    3342:	bf00      	nop
    3344:	3708      	adds	r7, #8
    3346:	46bd      	mov	sp, r7
    3348:	bd80      	pop	{r7, pc}
    334a:	bf00      	nop
    334c:	0000325d 	.word	0x0000325d

00003350 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3350:	b580      	push	{r7, lr}
    3352:	b082      	sub	sp, #8
    3354:	af00      	add	r7, sp, #0
    3356:	4603      	mov	r3, r0
    3358:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    335a:	79fb      	ldrb	r3, [r7, #7]
    335c:	095b      	lsrs	r3, r3, #5
    335e:	b2db      	uxtb	r3, r3
    3360:	4618      	mov	r0, r3
    3362:	4b09      	ldr	r3, [pc, #36]	; (3388 <gpio_get_pin_level+0x38>)
    3364:	4798      	blx	r3
    3366:	4601      	mov	r1, r0
    3368:	79fb      	ldrb	r3, [r7, #7]
    336a:	f003 031f 	and.w	r3, r3, #31
    336e:	2201      	movs	r2, #1
    3370:	fa02 f303 	lsl.w	r3, r2, r3
    3374:	400b      	ands	r3, r1
    3376:	2b00      	cmp	r3, #0
    3378:	bf14      	ite	ne
    337a:	2301      	movne	r3, #1
    337c:	2300      	moveq	r3, #0
    337e:	b2db      	uxtb	r3, r3
}
    3380:	4618      	mov	r0, r3
    3382:	3708      	adds	r7, #8
    3384:	46bd      	mov	sp, r7
    3386:	bd80      	pop	{r7, pc}
    3388:	000032a1 	.word	0x000032a1

0000338c <custom_logic_init>:
{
    338c:	b580      	push	{r7, lr}
    338e:	af00      	add	r7, sp, #0
	return _custom_logic_init();
    3390:	4b02      	ldr	r3, [pc, #8]	; (339c <custom_logic_init+0x10>)
    3392:	4798      	blx	r3
    3394:	4603      	mov	r3, r0
}
    3396:	4618      	mov	r0, r3
    3398:	bd80      	pop	{r7, pc}
    339a:	bf00      	nop
    339c:	00001ced 	.word	0x00001ced

000033a0 <custom_logic_enable>:
/**
 *  \brief Enable the custom logic hardware
 *  \return Initialization operation status
 */
static inline int32_t custom_logic_enable(void)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	af00      	add	r7, sp, #0
	return _custom_logic_enable();
    33a4:	4b02      	ldr	r3, [pc, #8]	; (33b0 <custom_logic_enable+0x10>)
    33a6:	4798      	blx	r3
    33a8:	4603      	mov	r3, r0
}
    33aa:	4618      	mov	r0, r3
    33ac:	bd80      	pop	{r7, pc}
    33ae:	bf00      	nop
    33b0:	00001d75 	.word	0x00001d75
    33b4:	00000000 	.word	0x00000000

000033b8 <ADC0_1_Handler>:
struct data_send_ethercat data_send_ethercat_var;
struct data_receive_ethercat data_receive_ethercat_var;


///Interrupt Handlers
void ADC0_1_Handler(){ //ADC0_RESRDY
    33b8:	b598      	push	{r3, r4, r7, lr}
    33ba:	af00      	add	r7, sp, #0
	ADC0->INTFLAG.bit.RESRDY=1;
    33bc:	4a88      	ldr	r2, [pc, #544]	; (35e0 <ADC0_1_Handler+0x228>)
    33be:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
    33c2:	f043 0301 	orr.w	r3, r3, #1
    33c6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		if(!current_ready || !trq_ready){
    33ca:	4b86      	ldr	r3, [pc, #536]	; (35e4 <ADC0_1_Handler+0x22c>)
    33cc:	781b      	ldrb	r3, [r3, #0]
    33ce:	b2db      	uxtb	r3, r3
    33d0:	f083 0301 	eor.w	r3, r3, #1
    33d4:	b2db      	uxtb	r3, r3
    33d6:	2b00      	cmp	r3, #0
    33d8:	d108      	bne.n	33ec <ADC0_1_Handler+0x34>
    33da:	4b83      	ldr	r3, [pc, #524]	; (35e8 <ADC0_1_Handler+0x230>)
    33dc:	781b      	ldrb	r3, [r3, #0]
    33de:	b2db      	uxtb	r3, r3
    33e0:	f083 0301 	eor.w	r3, r3, #1
    33e4:	b2db      	uxtb	r3, r3
    33e6:	2b00      	cmp	r3, #0
    33e8:	f000 80e3 	beq.w	35b2 <ADC0_1_Handler+0x1fa>
			if (ADC0->INPUTCTRL.bit.MUXPOS == 0) {
    33ec:	4b7c      	ldr	r3, [pc, #496]	; (35e0 <ADC0_1_Handler+0x228>)
    33ee:	889b      	ldrh	r3, [r3, #4]
    33f0:	f3c3 0304 	ubfx	r3, r3, #0, #5
    33f4:	b2db      	uxtb	r3, r3
    33f6:	2b00      	cmp	r3, #0
    33f8:	d174      	bne.n	34e4 <ADC0_1_Handler+0x12c>
				buffA= ADC0->RESULT.reg;
    33fa:	4b79      	ldr	r3, [pc, #484]	; (35e0 <ADC0_1_Handler+0x228>)
    33fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    3400:	b29a      	uxth	r2, r3
    3402:	4b7a      	ldr	r3, [pc, #488]	; (35ec <ADC0_1_Handler+0x234>)
    3404:	801a      	strh	r2, [r3, #0]
				buffB= ADC1->RESULT.reg;
    3406:	4b7a      	ldr	r3, [pc, #488]	; (35f0 <ADC0_1_Handler+0x238>)
    3408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    340c:	b29a      	uxth	r2, r3
    340e:	4b79      	ldr	r3, [pc, #484]	; (35f4 <ADC0_1_Handler+0x23c>)
    3410:	801a      	strh	r2, [r3, #0]

				voltA= (buffA/4095.0) * 3300; //Define the conversion ratio of your ADC value to a float representing the current
    3412:	4b76      	ldr	r3, [pc, #472]	; (35ec <ADC0_1_Handler+0x234>)
    3414:	881b      	ldrh	r3, [r3, #0]
    3416:	461a      	mov	r2, r3
    3418:	4b77      	ldr	r3, [pc, #476]	; (35f8 <ADC0_1_Handler+0x240>)
    341a:	4610      	mov	r0, r2
    341c:	4798      	blx	r3
    341e:	4c77      	ldr	r4, [pc, #476]	; (35fc <ADC0_1_Handler+0x244>)
    3420:	a365      	add	r3, pc, #404	; (adr r3, 35b8 <ADC0_1_Handler+0x200>)
    3422:	e9d3 2300 	ldrd	r2, r3, [r3]
    3426:	47a0      	blx	r4
    3428:	4603      	mov	r3, r0
    342a:	460c      	mov	r4, r1
    342c:	4618      	mov	r0, r3
    342e:	4621      	mov	r1, r4
    3430:	4c73      	ldr	r4, [pc, #460]	; (3600 <ADC0_1_Handler+0x248>)
    3432:	a363      	add	r3, pc, #396	; (adr r3, 35c0 <ADC0_1_Handler+0x208>)
    3434:	e9d3 2300 	ldrd	r2, r3, [r3]
    3438:	47a0      	blx	r4
    343a:	4603      	mov	r3, r0
    343c:	460c      	mov	r4, r1
    343e:	4619      	mov	r1, r3
    3440:	4622      	mov	r2, r4
    3442:	4b70      	ldr	r3, [pc, #448]	; (3604 <ADC0_1_Handler+0x24c>)
    3444:	4608      	mov	r0, r1
    3446:	4611      	mov	r1, r2
    3448:	4798      	blx	r3
    344a:	4602      	mov	r2, r0
    344c:	4b6e      	ldr	r3, [pc, #440]	; (3608 <ADC0_1_Handler+0x250>)
    344e:	601a      	str	r2, [r3, #0]
				voltB= (buffB/4095.0) * 3330;
    3450:	4b68      	ldr	r3, [pc, #416]	; (35f4 <ADC0_1_Handler+0x23c>)
    3452:	881b      	ldrh	r3, [r3, #0]
    3454:	461a      	mov	r2, r3
    3456:	4b68      	ldr	r3, [pc, #416]	; (35f8 <ADC0_1_Handler+0x240>)
    3458:	4610      	mov	r0, r2
    345a:	4798      	blx	r3
    345c:	4c67      	ldr	r4, [pc, #412]	; (35fc <ADC0_1_Handler+0x244>)
    345e:	a356      	add	r3, pc, #344	; (adr r3, 35b8 <ADC0_1_Handler+0x200>)
    3460:	e9d3 2300 	ldrd	r2, r3, [r3]
    3464:	47a0      	blx	r4
    3466:	4603      	mov	r3, r0
    3468:	460c      	mov	r4, r1
    346a:	4618      	mov	r0, r3
    346c:	4621      	mov	r1, r4
    346e:	4c64      	ldr	r4, [pc, #400]	; (3600 <ADC0_1_Handler+0x248>)
    3470:	a355      	add	r3, pc, #340	; (adr r3, 35c8 <ADC0_1_Handler+0x210>)
    3472:	e9d3 2300 	ldrd	r2, r3, [r3]
    3476:	47a0      	blx	r4
    3478:	4603      	mov	r3, r0
    347a:	460c      	mov	r4, r1
    347c:	4619      	mov	r1, r3
    347e:	4622      	mov	r2, r4
    3480:	4b60      	ldr	r3, [pc, #384]	; (3604 <ADC0_1_Handler+0x24c>)
    3482:	4608      	mov	r0, r1
    3484:	4611      	mov	r1, r2
    3486:	4798      	blx	r3
    3488:	4602      	mov	r2, r0
    348a:	4b60      	ldr	r3, [pc, #384]	; (360c <ADC0_1_Handler+0x254>)
    348c:	601a      	str	r2, [r3, #0]
	
				currA=(voltA-1500)/200;
    348e:	4b5e      	ldr	r3, [pc, #376]	; (3608 <ADC0_1_Handler+0x250>)
    3490:	edd3 7a00 	vldr	s15, [r3]
    3494:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 3610 <ADC0_1_Handler+0x258>
    3498:	ee37 7ac7 	vsub.f32	s14, s15, s14
    349c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 3614 <ADC0_1_Handler+0x25c>
    34a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
    34a4:	4b5c      	ldr	r3, [pc, #368]	; (3618 <ADC0_1_Handler+0x260>)
    34a6:	edc3 7a00 	vstr	s15, [r3]
				currB=(voltB-1500)/200;
    34aa:	4b58      	ldr	r3, [pc, #352]	; (360c <ADC0_1_Handler+0x254>)
    34ac:	edd3 7a00 	vldr	s15, [r3]
    34b0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 3610 <ADC0_1_Handler+0x258>
    34b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
    34b8:	eddf 6a56 	vldr	s13, [pc, #344]	; 3614 <ADC0_1_Handler+0x25c>
    34bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
    34c0:	4b56      	ldr	r3, [pc, #344]	; (361c <ADC0_1_Handler+0x264>)
    34c2:	edc3 7a00 	vstr	s15, [r3]
				current_ready = true;
    34c6:	4b47      	ldr	r3, [pc, #284]	; (35e4 <ADC0_1_Handler+0x22c>)
    34c8:	2201      	movs	r2, #1
    34ca:	701a      	strb	r2, [r3, #0]
				ADC0->INPUTCTRL.bit.MUXPOS = 1; //Change channel to 1 for torque read
    34cc:	4a44      	ldr	r2, [pc, #272]	; (35e0 <ADC0_1_Handler+0x228>)
    34ce:	8893      	ldrh	r3, [r2, #4]
    34d0:	2101      	movs	r1, #1
    34d2:	f361 0304 	bfi	r3, r1, #0, #5
    34d6:	8093      	strh	r3, [r2, #4]
				ADC0->SWTRIG.bit.START = 1; //Start conversion manually, cleared automatically in HW
    34d8:	4a41      	ldr	r2, [pc, #260]	; (35e0 <ADC0_1_Handler+0x228>)
    34da:	7d13      	ldrb	r3, [r2, #20]
    34dc:	f043 0302 	orr.w	r3, r3, #2
    34e0:	7513      	strb	r3, [r2, #20]
				trq_in_N = V_sens / (G_SENS*TORQUE_REF);
				trq_ready = true;
				ADC0->INPUTCTRL.bit.MUXPOS = 0; //Change channel to 0 for following current read
			}
		}
}
    34e2:	e066      	b.n	35b2 <ADC0_1_Handler+0x1fa>
			else if (ADC0->INPUTCTRL.bit.MUXPOS == 1) {
    34e4:	4b3e      	ldr	r3, [pc, #248]	; (35e0 <ADC0_1_Handler+0x228>)
    34e6:	889b      	ldrh	r3, [r3, #4]
    34e8:	f3c3 0304 	ubfx	r3, r3, #0, #5
    34ec:	b2db      	uxtb	r3, r3
    34ee:	2b01      	cmp	r3, #1
    34f0:	d15f      	bne.n	35b2 <ADC0_1_Handler+0x1fa>
				buffC= ADC0->RESULT.reg; //Read out trq
    34f2:	4b3b      	ldr	r3, [pc, #236]	; (35e0 <ADC0_1_Handler+0x228>)
    34f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    34f8:	b29a      	uxth	r2, r3
    34fa:	4b49      	ldr	r3, [pc, #292]	; (3620 <ADC0_1_Handler+0x268>)
    34fc:	801a      	strh	r2, [r3, #0]
				V_in_ADC = (buffA*TORQUE_REF)/4095;
    34fe:	4b3b      	ldr	r3, [pc, #236]	; (35ec <ADC0_1_Handler+0x234>)
    3500:	881b      	ldrh	r3, [r3, #0]
    3502:	461a      	mov	r2, r3
    3504:	4b3c      	ldr	r3, [pc, #240]	; (35f8 <ADC0_1_Handler+0x240>)
    3506:	4610      	mov	r0, r2
    3508:	4798      	blx	r3
    350a:	4c3d      	ldr	r4, [pc, #244]	; (3600 <ADC0_1_Handler+0x248>)
    350c:	a330      	add	r3, pc, #192	; (adr r3, 35d0 <ADC0_1_Handler+0x218>)
    350e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3512:	47a0      	blx	r4
    3514:	4603      	mov	r3, r0
    3516:	460c      	mov	r4, r1
    3518:	4618      	mov	r0, r3
    351a:	4621      	mov	r1, r4
    351c:	4c37      	ldr	r4, [pc, #220]	; (35fc <ADC0_1_Handler+0x244>)
    351e:	a326      	add	r3, pc, #152	; (adr r3, 35b8 <ADC0_1_Handler+0x200>)
    3520:	e9d3 2300 	ldrd	r2, r3, [r3]
    3524:	47a0      	blx	r4
    3526:	4603      	mov	r3, r0
    3528:	460c      	mov	r4, r1
    352a:	4619      	mov	r1, r3
    352c:	4622      	mov	r2, r4
    352e:	4b35      	ldr	r3, [pc, #212]	; (3604 <ADC0_1_Handler+0x24c>)
    3530:	4608      	mov	r0, r1
    3532:	4611      	mov	r1, r2
    3534:	4798      	blx	r3
    3536:	4602      	mov	r2, r0
    3538:	4b3a      	ldr	r3, [pc, #232]	; (3624 <ADC0_1_Handler+0x26c>)
    353a:	601a      	str	r2, [r3, #0]
				V_sens = (V_in_ADC - TORQUE_OFFSET)/G_AMP;
    353c:	4b39      	ldr	r3, [pc, #228]	; (3624 <ADC0_1_Handler+0x26c>)
    353e:	681a      	ldr	r2, [r3, #0]
    3540:	4b39      	ldr	r3, [pc, #228]	; (3628 <ADC0_1_Handler+0x270>)
    3542:	4610      	mov	r0, r2
    3544:	4798      	blx	r3
    3546:	4c39      	ldr	r4, [pc, #228]	; (362c <ADC0_1_Handler+0x274>)
    3548:	a323      	add	r3, pc, #140	; (adr r3, 35d8 <ADC0_1_Handler+0x220>)
    354a:	e9d3 2300 	ldrd	r2, r3, [r3]
    354e:	47a0      	blx	r4
    3550:	4603      	mov	r3, r0
    3552:	460c      	mov	r4, r1
    3554:	4618      	mov	r0, r3
    3556:	4621      	mov	r1, r4
    3558:	4c28      	ldr	r4, [pc, #160]	; (35fc <ADC0_1_Handler+0x244>)
    355a:	f04f 0200 	mov.w	r2, #0
    355e:	4b34      	ldr	r3, [pc, #208]	; (3630 <ADC0_1_Handler+0x278>)
    3560:	47a0      	blx	r4
    3562:	4603      	mov	r3, r0
    3564:	460c      	mov	r4, r1
    3566:	4619      	mov	r1, r3
    3568:	4622      	mov	r2, r4
    356a:	4b26      	ldr	r3, [pc, #152]	; (3604 <ADC0_1_Handler+0x24c>)
    356c:	4608      	mov	r0, r1
    356e:	4611      	mov	r1, r2
    3570:	4798      	blx	r3
    3572:	4602      	mov	r2, r0
    3574:	4b2f      	ldr	r3, [pc, #188]	; (3634 <ADC0_1_Handler+0x27c>)
    3576:	601a      	str	r2, [r3, #0]
				trq_in_N = V_sens / (G_SENS*TORQUE_REF);
    3578:	4b2e      	ldr	r3, [pc, #184]	; (3634 <ADC0_1_Handler+0x27c>)
    357a:	681a      	ldr	r2, [r3, #0]
    357c:	4b2a      	ldr	r3, [pc, #168]	; (3628 <ADC0_1_Handler+0x270>)
    357e:	4610      	mov	r0, r2
    3580:	4798      	blx	r3
    3582:	4c1e      	ldr	r4, [pc, #120]	; (35fc <ADC0_1_Handler+0x244>)
    3584:	a314      	add	r3, pc, #80	; (adr r3, 35d8 <ADC0_1_Handler+0x220>)
    3586:	e9d3 2300 	ldrd	r2, r3, [r3]
    358a:	47a0      	blx	r4
    358c:	4603      	mov	r3, r0
    358e:	460c      	mov	r4, r1
    3590:	4619      	mov	r1, r3
    3592:	4622      	mov	r2, r4
    3594:	4b1b      	ldr	r3, [pc, #108]	; (3604 <ADC0_1_Handler+0x24c>)
    3596:	4608      	mov	r0, r1
    3598:	4611      	mov	r1, r2
    359a:	4798      	blx	r3
    359c:	4602      	mov	r2, r0
    359e:	4b26      	ldr	r3, [pc, #152]	; (3638 <ADC0_1_Handler+0x280>)
    35a0:	601a      	str	r2, [r3, #0]
				trq_ready = true;
    35a2:	4b11      	ldr	r3, [pc, #68]	; (35e8 <ADC0_1_Handler+0x230>)
    35a4:	2201      	movs	r2, #1
    35a6:	701a      	strb	r2, [r3, #0]
				ADC0->INPUTCTRL.bit.MUXPOS = 0; //Change channel to 0 for following current read
    35a8:	4a0d      	ldr	r2, [pc, #52]	; (35e0 <ADC0_1_Handler+0x228>)
    35aa:	8893      	ldrh	r3, [r2, #4]
    35ac:	f36f 0304 	bfc	r3, #0, #5
    35b0:	8093      	strh	r3, [r2, #4]
}
    35b2:	bf00      	nop
    35b4:	bd98      	pop	{r3, r4, r7, pc}
    35b6:	bf00      	nop
    35b8:	00000000 	.word	0x00000000
    35bc:	40affe00 	.word	0x40affe00
    35c0:	00000000 	.word	0x00000000
    35c4:	40a9c800 	.word	0x40a9c800
    35c8:	00000000 	.word	0x00000000
    35cc:	40aa0400 	.word	0x40aa0400
    35d0:	66666666 	.word	0x66666666
    35d4:	400a6666 	.word	0x400a6666
    35d8:	66666666 	.word	0x66666666
    35dc:	3ffa6666 	.word	0x3ffa6666
    35e0:	43001c00 	.word	0x43001c00
    35e4:	200002a8 	.word	0x200002a8
    35e8:	20000094 	.word	0x20000094
    35ec:	20000298 	.word	0x20000298
    35f0:	43002000 	.word	0x43002000
    35f4:	200001fc 	.word	0x200001fc
    35f8:	00003fed 	.word	0x00003fed
    35fc:	0000430d 	.word	0x0000430d
    3600:	000040b9 	.word	0x000040b9
    3604:	000044dd 	.word	0x000044dd
    3608:	20000208 	.word	0x20000208
    360c:	200002ec 	.word	0x200002ec
    3610:	44bb8000 	.word	0x44bb8000
    3614:	43480000 	.word	0x43480000
    3618:	20000204 	.word	0x20000204
    361c:	20000254 	.word	0x20000254
    3620:	20000210 	.word	0x20000210
    3624:	2000029c 	.word	0x2000029c
    3628:	00004011 	.word	0x00004011
    362c:	00003d51 	.word	0x00003d51
    3630:	40818800 	.word	0x40818800
    3634:	20000200 	.word	0x20000200
    3638:	200002a0 	.word	0x200002a0
    363c:	00000000 	.word	0x00000000

00003640 <TC0_Handler>:



void TC0_Handler(void)
{
    3640:	b598      	push	{r3, r4, r7, lr}
    3642:	af00      	add	r7, sp, #0
	if(TC0->COUNT32.INTFLAG.bit.OVF){ // if overflow happened
    3644:	4b2a      	ldr	r3, [pc, #168]	; (36f0 <TC0_Handler+0xb0>)
    3646:	7a9b      	ldrb	r3, [r3, #10]
    3648:	f3c3 0300 	ubfx	r3, r3, #0, #1
    364c:	b2db      	uxtb	r3, r3
    364e:	2b00      	cmp	r3, #0
    3650:	d009      	beq.n	3666 <TC0_Handler+0x26>
		TC0->COUNT32.INTFLAG.bit.OVF = 1;
    3652:	4a27      	ldr	r2, [pc, #156]	; (36f0 <TC0_Handler+0xb0>)
    3654:	7a93      	ldrb	r3, [r2, #10]
    3656:	f043 0301 	orr.w	r3, r3, #1
    365a:	7293      	strb	r3, [r2, #10]
		rot_speed = 0x0;
    365c:	4b25      	ldr	r3, [pc, #148]	; (36f4 <TC0_Handler+0xb4>)
    365e:	f04f 0200 	mov.w	r2, #0
    3662:	601a      	str	r2, [r3, #0]
		H_0_pulse_width = TC0->COUNT32.CC[0].reg;
		H_0_pulse_width_in_sec = H_0_pulse_width * (float) 0.00000001; // 100 Mhz
		rot_speed = (3.1415 / 3.0 / 7) / H_0_pulse_width_in_sec; // omega = (60° / 7 / delta_t)  - 7 because of pole pairs of the motor
	}
	
}
    3664:	e03d      	b.n	36e2 <TC0_Handler+0xa2>
	else if  (TC0->COUNT32.INTFLAG.bit.ERR){
    3666:	4b22      	ldr	r3, [pc, #136]	; (36f0 <TC0_Handler+0xb0>)
    3668:	7a9b      	ldrb	r3, [r3, #10]
    366a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    366e:	b2db      	uxtb	r3, r3
    3670:	2b00      	cmp	r3, #0
    3672:	d009      	beq.n	3688 <TC0_Handler+0x48>
		TC0->COUNT32.INTFLAG.bit.ERR = 1;
    3674:	4a1e      	ldr	r2, [pc, #120]	; (36f0 <TC0_Handler+0xb0>)
    3676:	7a93      	ldrb	r3, [r2, #10]
    3678:	f043 0302 	orr.w	r3, r3, #2
    367c:	7293      	strb	r3, [r2, #10]
		rot_speed = 0xFFFFFFFF;
    367e:	4b1d      	ldr	r3, [pc, #116]	; (36f4 <TC0_Handler+0xb4>)
    3680:	f04f 429f 	mov.w	r2, #1333788672	; 0x4f800000
    3684:	601a      	str	r2, [r3, #0]
}
    3686:	e02c      	b.n	36e2 <TC0_Handler+0xa2>
		TC0->COUNT32.INTFLAG.bit.MC0 = 1;
    3688:	4a19      	ldr	r2, [pc, #100]	; (36f0 <TC0_Handler+0xb0>)
    368a:	7a93      	ldrb	r3, [r2, #10]
    368c:	f043 0310 	orr.w	r3, r3, #16
    3690:	7293      	strb	r3, [r2, #10]
		H_0_pulse_width = TC0->COUNT32.CC[0].reg;
    3692:	4b17      	ldr	r3, [pc, #92]	; (36f0 <TC0_Handler+0xb0>)
    3694:	69db      	ldr	r3, [r3, #28]
    3696:	4a18      	ldr	r2, [pc, #96]	; (36f8 <TC0_Handler+0xb8>)
    3698:	6013      	str	r3, [r2, #0]
		H_0_pulse_width_in_sec = H_0_pulse_width * (float) 0.00000001; // 100 Mhz
    369a:	4b17      	ldr	r3, [pc, #92]	; (36f8 <TC0_Handler+0xb8>)
    369c:	681b      	ldr	r3, [r3, #0]
    369e:	ee07 3a90 	vmov	s15, r3
    36a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    36a6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 36fc <TC0_Handler+0xbc>
    36aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    36ae:	4b14      	ldr	r3, [pc, #80]	; (3700 <TC0_Handler+0xc0>)
    36b0:	edc3 7a00 	vstr	s15, [r3]
		rot_speed = (3.1415 / 3.0 / 7) / H_0_pulse_width_in_sec; // omega = (60° / 7 / delta_t)  - 7 because of pole pairs of the motor
    36b4:	4b12      	ldr	r3, [pc, #72]	; (3700 <TC0_Handler+0xc0>)
    36b6:	681a      	ldr	r2, [r3, #0]
    36b8:	4b12      	ldr	r3, [pc, #72]	; (3704 <TC0_Handler+0xc4>)
    36ba:	4610      	mov	r0, r2
    36bc:	4798      	blx	r3
    36be:	4602      	mov	r2, r0
    36c0:	460b      	mov	r3, r1
    36c2:	4c11      	ldr	r4, [pc, #68]	; (3708 <TC0_Handler+0xc8>)
    36c4:	a108      	add	r1, pc, #32	; (adr r1, 36e8 <TC0_Handler+0xa8>)
    36c6:	e9d1 0100 	ldrd	r0, r1, [r1]
    36ca:	47a0      	blx	r4
    36cc:	4603      	mov	r3, r0
    36ce:	460c      	mov	r4, r1
    36d0:	4619      	mov	r1, r3
    36d2:	4622      	mov	r2, r4
    36d4:	4b0d      	ldr	r3, [pc, #52]	; (370c <TC0_Handler+0xcc>)
    36d6:	4608      	mov	r0, r1
    36d8:	4611      	mov	r1, r2
    36da:	4798      	blx	r3
    36dc:	4602      	mov	r2, r0
    36de:	4b05      	ldr	r3, [pc, #20]	; (36f4 <TC0_Handler+0xb4>)
    36e0:	601a      	str	r2, [r3, #0]
}
    36e2:	bf00      	nop
    36e4:	bd98      	pop	{r3, r4, r7, pc}
    36e6:	bf00      	nop
    36e8:	cfa0d118 	.word	0xcfa0d118
    36ec:	3fc325ef 	.word	0x3fc325ef
    36f0:	40003800 	.word	0x40003800
    36f4:	20000124 	.word	0x20000124
    36f8:	200002a4 	.word	0x200002a4
    36fc:	322bcc77 	.word	0x322bcc77
    3700:	2000020c 	.word	0x2000020c
    3704:	00004011 	.word	0x00004011
    3708:	0000430d 	.word	0x0000430d
    370c:	000044dd 	.word	0x000044dd

00003710 <set_motor_voltage>:

void set_motor_voltage(uint8_t hall)
{
    3710:	b480      	push	{r7}
    3712:	b083      	sub	sp, #12
    3714:	af00      	add	r7, sp, #0
    3716:	4603      	mov	r3, r0
    3718:	71fb      	strb	r3, [r7, #7]
/////
	TCC0->PATTBUF.reg = patterns[hall];
    371a:	4a06      	ldr	r2, [pc, #24]	; (3734 <set_motor_voltage+0x24>)
    371c:	79fb      	ldrb	r3, [r7, #7]
    371e:	4906      	ldr	r1, [pc, #24]	; (3738 <set_motor_voltage+0x28>)
    3720:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3724:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
	//hri_tcc_write_CTRLA_ENABLE_bit(TCC0, 1 << TCC_CTRLA_ENABLE_Pos); /* Enable: enabled */

		}
    3728:	bf00      	nop
    372a:	370c      	adds	r7, #12
    372c:	46bd      	mov	sp, r7
    372e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3732:	4770      	bx	lr
    3734:	41016000 	.word	0x41016000
    3738:	20000074 	.word	0x20000074

0000373c <get_position>:

void get_position(uint8_t hall)
{
    373c:	b480      	push	{r7}
    373e:	b083      	sub	sp, #12
    3740:	af00      	add	r7, sp, #0
    3742:	4603      	mov	r3, r0
    3744:	71fb      	strb	r3, [r7, #7]
	step[0] = steps[hall]; //update position
    3746:	79fb      	ldrb	r3, [r7, #7]
    3748:	4a20      	ldr	r2, [pc, #128]	; (37cc <get_position+0x90>)
    374a:	5cd2      	ldrb	r2, [r2, r3]
    374c:	4b20      	ldr	r3, [pc, #128]	; (37d0 <get_position+0x94>)
    374e:	701a      	strb	r2, [r3, #0]

	if (step[0] == 5 && step[1] == 0)
    3750:	4b1f      	ldr	r3, [pc, #124]	; (37d0 <get_position+0x94>)
    3752:	781b      	ldrb	r3, [r3, #0]
    3754:	2b05      	cmp	r3, #5
    3756:	d109      	bne.n	376c <get_position+0x30>
    3758:	4b1d      	ldr	r3, [pc, #116]	; (37d0 <get_position+0x94>)
    375a:	785b      	ldrb	r3, [r3, #1]
    375c:	2b00      	cmp	r3, #0
    375e:	d105      	bne.n	376c <get_position+0x30>
	revolution_counter_elec++;
    3760:	4b1c      	ldr	r3, [pc, #112]	; (37d4 <get_position+0x98>)
    3762:	681b      	ldr	r3, [r3, #0]
    3764:	3301      	adds	r3, #1
    3766:	4a1b      	ldr	r2, [pc, #108]	; (37d4 <get_position+0x98>)
    3768:	6013      	str	r3, [r2, #0]
    376a:	e00c      	b.n	3786 <get_position+0x4a>
	else if (step[0] == 0 && step[1] == 5)
    376c:	4b18      	ldr	r3, [pc, #96]	; (37d0 <get_position+0x94>)
    376e:	781b      	ldrb	r3, [r3, #0]
    3770:	2b00      	cmp	r3, #0
    3772:	d108      	bne.n	3786 <get_position+0x4a>
    3774:	4b16      	ldr	r3, [pc, #88]	; (37d0 <get_position+0x94>)
    3776:	785b      	ldrb	r3, [r3, #1]
    3778:	2b05      	cmp	r3, #5
    377a:	d104      	bne.n	3786 <get_position+0x4a>
	revolution_counter_elec--;
    377c:	4b15      	ldr	r3, [pc, #84]	; (37d4 <get_position+0x98>)
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	3b01      	subs	r3, #1
    3782:	4a14      	ldr	r2, [pc, #80]	; (37d4 <get_position+0x98>)
    3784:	6013      	str	r3, [r2, #0]

	rel_position = revolution_counter_elec*5 + step[1];
    3786:	4b13      	ldr	r3, [pc, #76]	; (37d4 <get_position+0x98>)
    3788:	681a      	ldr	r2, [r3, #0]
    378a:	4613      	mov	r3, r2
    378c:	009b      	lsls	r3, r3, #2
    378e:	4413      	add	r3, r2
    3790:	4a0f      	ldr	r2, [pc, #60]	; (37d0 <get_position+0x94>)
    3792:	7852      	ldrb	r2, [r2, #1]
    3794:	4413      	add	r3, r2
    3796:	ee07 3a90 	vmov	s15, r3
    379a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    379e:	4b0e      	ldr	r3, [pc, #56]	; (37d8 <get_position+0x9c>)
    37a0:	edc3 7a00 	vstr	s15, [r3]
	revolution_counter_mech = rel_position / 42;
    37a4:	4b0c      	ldr	r3, [pc, #48]	; (37d8 <get_position+0x9c>)
    37a6:	ed93 7a00 	vldr	s14, [r3]
    37aa:	eddf 6a0c 	vldr	s13, [pc, #48]	; 37dc <get_position+0xa0>
    37ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
    37b2:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <get_position+0xa4>)
    37b4:	edc3 7a00 	vstr	s15, [r3]

	step[1] = step[0];  //step[1] = previous position, step[0] - latest position
    37b8:	4b05      	ldr	r3, [pc, #20]	; (37d0 <get_position+0x94>)
    37ba:	781a      	ldrb	r2, [r3, #0]
    37bc:	4b04      	ldr	r3, [pc, #16]	; (37d0 <get_position+0x94>)
    37be:	705a      	strb	r2, [r3, #1]
}
    37c0:	bf00      	nop
    37c2:	370c      	adds	r7, #12
    37c4:	46bd      	mov	sp, r7
    37c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37ca:	4770      	bx	lr
    37cc:	2000006c 	.word	0x2000006c
    37d0:	2000012c 	.word	0x2000012c
    37d4:	20000130 	.word	0x20000130
    37d8:	20000138 	.word	0x20000138
    37dc:	42280000 	.word	0x42280000
    37e0:	20000134 	.word	0x20000134

000037e4 <main>:




int main(void)
{
    37e4:	b590      	push	{r4, r7, lr}
    37e6:	b087      	sub	sp, #28
    37e8:	af02      	add	r7, sp, #8
	/* Initializes MCU, drivers and middleware */
	data_send_ethercat_zero.status = 0;
    37ea:	4b95      	ldr	r3, [pc, #596]	; (3a40 <main+0x25c>)
    37ec:	2200      	movs	r2, #0
    37ee:	801a      	strh	r2, [r3, #0]
	data_send_ethercat_zero.mode = 0;
    37f0:	4b93      	ldr	r3, [pc, #588]	; (3a40 <main+0x25c>)
    37f2:	2200      	movs	r2, #0
    37f4:	805a      	strh	r2, [r3, #2]
	data_send_ethercat_zero.rel_position= 0;
    37f6:	4b92      	ldr	r3, [pc, #584]	; (3a40 <main+0x25c>)
    37f8:	f04f 0200 	mov.w	r2, #0
    37fc:	605a      	str	r2, [r3, #4]
	data_send_ethercat_zero.rel_revolution= 0;
    37fe:	4b90      	ldr	r3, [pc, #576]	; (3a40 <main+0x25c>)
    3800:	2200      	movs	r2, #0
    3802:	811a      	strh	r2, [r3, #8]
	data_send_ethercat_zero.Motor_rel_Revolution= 0;
    3804:	4b8e      	ldr	r3, [pc, #568]	; (3a40 <main+0x25c>)
    3806:	2200      	movs	r2, #0
    3808:	815a      	strh	r2, [r3, #10]
	data_send_ethercat_zero.Motor_rel_position= 0;
    380a:	4b8d      	ldr	r3, [pc, #564]	; (3a40 <main+0x25c>)
    380c:	f04f 0200 	mov.w	r2, #0
    3810:	60da      	str	r2, [r3, #12]
	data_send_ethercat_zero.Motor_abs_position= 0;
    3812:	4b8b      	ldr	r3, [pc, #556]	; (3a40 <main+0x25c>)
    3814:	2200      	movs	r2, #0
    3816:	611a      	str	r2, [r3, #16]
	data_send_ethercat_zero.joint_speed= 0;
    3818:	4b89      	ldr	r3, [pc, #548]	; (3a40 <main+0x25c>)
    381a:	f04f 0200 	mov.w	r2, #0
    381e:	615a      	str	r2, [r3, #20]
	data_send_ethercat_zero.motor_speed= 0;
    3820:	4b87      	ldr	r3, [pc, #540]	; (3a40 <main+0x25c>)
    3822:	f04f 0200 	mov.w	r2, #0
    3826:	619a      	str	r2, [r3, #24]
	data_send_ethercat_zero.tau= 0;
    3828:	4b85      	ldr	r3, [pc, #532]	; (3a40 <main+0x25c>)
    382a:	f04f 0200 	mov.w	r2, #0
    382e:	61da      	str	r2, [r3, #28]
	data_send_ethercat_zero.tau_D= 0;
    3830:	4b83      	ldr	r3, [pc, #524]	; (3a40 <main+0x25c>)
    3832:	f04f 0200 	mov.w	r2, #0
    3836:	621a      	str	r2, [r3, #32]
	data_send_ethercat_zero.i_abs= 0;
    3838:	4b81      	ldr	r3, [pc, #516]	; (3a40 <main+0x25c>)
    383a:	f04f 0200 	mov.w	r2, #0
    383e:	625a      	str	r2, [r3, #36]	; 0x24
	data_send_ethercat_zero.i_q= 0;
    3840:	4b7f      	ldr	r3, [pc, #508]	; (3a40 <main+0x25c>)
    3842:	f04f 0200 	mov.w	r2, #0
    3846:	629a      	str	r2, [r3, #40]	; 0x28
	data_send_ethercat_zero.i_d= 0;
    3848:	4b7d      	ldr	r3, [pc, #500]	; (3a40 <main+0x25c>)
    384a:	f04f 0200 	mov.w	r2, #0
    384e:	62da      	str	r2, [r3, #44]	; 0x2c
	data_send_ethercat_zero.qw= 0;
    3850:	4b7b      	ldr	r3, [pc, #492]	; (3a40 <main+0x25c>)
    3852:	f04f 0200 	mov.w	r2, #0
    3856:	631a      	str	r2, [r3, #48]	; 0x30
	data_send_ethercat_zero.qx= 0;
    3858:	4b79      	ldr	r3, [pc, #484]	; (3a40 <main+0x25c>)
    385a:	f04f 0200 	mov.w	r2, #0
    385e:	635a      	str	r2, [r3, #52]	; 0x34
	data_send_ethercat_zero.qy= 0;
    3860:	4b77      	ldr	r3, [pc, #476]	; (3a40 <main+0x25c>)
    3862:	f04f 0200 	mov.w	r2, #0
    3866:	639a      	str	r2, [r3, #56]	; 0x38
	data_send_ethercat_zero.qz= 0;
    3868:	4b75      	ldr	r3, [pc, #468]	; (3a40 <main+0x25c>)
    386a:	f04f 0200 	mov.w	r2, #0
    386e:	63da      	str	r2, [r3, #60]	; 0x3c
	
	
	data_send_ethercat_var.status = 1;
    3870:	4b74      	ldr	r3, [pc, #464]	; (3a44 <main+0x260>)
    3872:	2201      	movs	r2, #1
    3874:	801a      	strh	r2, [r3, #0]
	data_send_ethercat_var.mode = 2;
    3876:	4b73      	ldr	r3, [pc, #460]	; (3a44 <main+0x260>)
    3878:	2202      	movs	r2, #2
    387a:	805a      	strh	r2, [r3, #2]
	data_send_ethercat_var.rel_position= 3.0;
    387c:	4b71      	ldr	r3, [pc, #452]	; (3a44 <main+0x260>)
    387e:	4a72      	ldr	r2, [pc, #456]	; (3a48 <main+0x264>)
    3880:	605a      	str	r2, [r3, #4]
	data_send_ethercat_var.rel_revolution= 4;
    3882:	4b70      	ldr	r3, [pc, #448]	; (3a44 <main+0x260>)
    3884:	2204      	movs	r2, #4
    3886:	811a      	strh	r2, [r3, #8]
	data_send_ethercat_var.Motor_rel_Revolution= 5;
    3888:	4b6e      	ldr	r3, [pc, #440]	; (3a44 <main+0x260>)
    388a:	2205      	movs	r2, #5
    388c:	815a      	strh	r2, [r3, #10]
	data_send_ethercat_var.Motor_rel_position= 6.0;
    388e:	4b6d      	ldr	r3, [pc, #436]	; (3a44 <main+0x260>)
    3890:	4a6e      	ldr	r2, [pc, #440]	; (3a4c <main+0x268>)
    3892:	60da      	str	r2, [r3, #12]
	data_send_ethercat_var.Motor_abs_position= 7;
    3894:	4b6b      	ldr	r3, [pc, #428]	; (3a44 <main+0x260>)
    3896:	2207      	movs	r2, #7
    3898:	611a      	str	r2, [r3, #16]
	data_send_ethercat_var.joint_speed= 8.0;
    389a:	4b6a      	ldr	r3, [pc, #424]	; (3a44 <main+0x260>)
    389c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    38a0:	615a      	str	r2, [r3, #20]
	data_send_ethercat_var.motor_speed= 9.0;
    38a2:	4b68      	ldr	r3, [pc, #416]	; (3a44 <main+0x260>)
    38a4:	4a6a      	ldr	r2, [pc, #424]	; (3a50 <main+0x26c>)
    38a6:	619a      	str	r2, [r3, #24]
	data_send_ethercat_var.tau= 10.0;
    38a8:	4b66      	ldr	r3, [pc, #408]	; (3a44 <main+0x260>)
    38aa:	4a6a      	ldr	r2, [pc, #424]	; (3a54 <main+0x270>)
    38ac:	61da      	str	r2, [r3, #28]
	data_send_ethercat_var.tau_D= 11.0;
    38ae:	4b65      	ldr	r3, [pc, #404]	; (3a44 <main+0x260>)
    38b0:	4a69      	ldr	r2, [pc, #420]	; (3a58 <main+0x274>)
    38b2:	621a      	str	r2, [r3, #32]
	data_send_ethercat_var.i_abs= 12.0;
    38b4:	4b63      	ldr	r3, [pc, #396]	; (3a44 <main+0x260>)
    38b6:	4a69      	ldr	r2, [pc, #420]	; (3a5c <main+0x278>)
    38b8:	625a      	str	r2, [r3, #36]	; 0x24
	data_send_ethercat_var.i_q= 13.0;
    38ba:	4b62      	ldr	r3, [pc, #392]	; (3a44 <main+0x260>)
    38bc:	4a68      	ldr	r2, [pc, #416]	; (3a60 <main+0x27c>)
    38be:	629a      	str	r2, [r3, #40]	; 0x28
	data_send_ethercat_var.i_d= 14.0;
    38c0:	4b60      	ldr	r3, [pc, #384]	; (3a44 <main+0x260>)
    38c2:	4a68      	ldr	r2, [pc, #416]	; (3a64 <main+0x280>)
    38c4:	62da      	str	r2, [r3, #44]	; 0x2c
	data_send_ethercat_var.qw= 15.0;
    38c6:	4b5f      	ldr	r3, [pc, #380]	; (3a44 <main+0x260>)
    38c8:	4a67      	ldr	r2, [pc, #412]	; (3a68 <main+0x284>)
    38ca:	631a      	str	r2, [r3, #48]	; 0x30
	data_send_ethercat_var.qx= 16.0;
    38cc:	4b5d      	ldr	r3, [pc, #372]	; (3a44 <main+0x260>)
    38ce:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
    38d2:	635a      	str	r2, [r3, #52]	; 0x34
	data_send_ethercat_var.qy= 17.0;
    38d4:	4b5b      	ldr	r3, [pc, #364]	; (3a44 <main+0x260>)
    38d6:	4a65      	ldr	r2, [pc, #404]	; (3a6c <main+0x288>)
    38d8:	639a      	str	r2, [r3, #56]	; 0x38
	data_send_ethercat_var.qz= 18.0;
    38da:	4b5a      	ldr	r3, [pc, #360]	; (3a44 <main+0x260>)
    38dc:	4a64      	ldr	r2, [pc, #400]	; (3a70 <main+0x28c>)
    38de:	63da      	str	r2, [r3, #60]	; 0x3c


	atmel_start_init();
    38e0:	4b64      	ldr	r3, [pc, #400]	; (3a74 <main+0x290>)
    38e2:	4798      	blx	r3
	custom_logic_init();
    38e4:	4b64      	ldr	r3, [pc, #400]	; (3a78 <main+0x294>)
    38e6:	4798      	blx	r3
	custom_logic_enable();
    38e8:	4b64      	ldr	r3, [pc, #400]	; (3a7c <main+0x298>)
    38ea:	4798      	blx	r3
	qspi_sync_enable(&ECAT_QSPI);
    38ec:	4864      	ldr	r0, [pc, #400]	; (3a80 <main+0x29c>)
    38ee:	4b65      	ldr	r3, [pc, #404]	; (3a84 <main+0x2a0>)
    38f0:	4798      	blx	r3
	adc_sync_enable_channel(&CURR_A_TRQ_ADC, 0);
    38f2:	2100      	movs	r1, #0
    38f4:	4864      	ldr	r0, [pc, #400]	; (3a88 <main+0x2a4>)
    38f6:	4b65      	ldr	r3, [pc, #404]	; (3a8c <main+0x2a8>)
    38f8:	4798      	blx	r3
	adc_sync_enable_channel(&CURR_B_ADC, 0);
    38fa:	2100      	movs	r1, #0
    38fc:	4864      	ldr	r0, [pc, #400]	; (3a90 <main+0x2ac>)
    38fe:	4b63      	ldr	r3, [pc, #396]	; (3a8c <main+0x2a8>)
    3900:	4798      	blx	r3
	//QUAD_SPI_0_write(addr_AbortFIFO, AbortFIFO, sizeof(AbortFIFO));
	//QUAD_SPI_0_write(addr_ClearRdRAM_1, ClearRdRAM_1, sizeof(ClearRdRAM_1));
	//QUAD_SPI_0_write(addr_ClearRdRAM_2, ClearRdRAM_2, sizeof(ClearRdRAM_2));
		
	NVIC_EnableIRQ(TC0_IRQn);
    3902:	206b      	movs	r0, #107	; 0x6b
    3904:	4b63      	ldr	r3, [pc, #396]	; (3a94 <main+0x2b0>)
    3906:	4798      	blx	r3
	NVIC_EnableIRQ(ADC0_1_IRQn);
    3908:	2077      	movs	r0, #119	; 0x77
    390a:	4b62      	ldr	r3, [pc, #392]	; (3a94 <main+0x2b0>)
    390c:	4798      	blx	r3
	ADC0->INTENSET.bit.RESRDY = 1; //Reset the RESRDY Interrupt
    390e:	4a62      	ldr	r2, [pc, #392]	; (3a98 <main+0x2b4>)
    3910:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
    3914:	f043 0301 	orr.w	r3, r3, #1
    3918:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
		
	gpio_set_pin_level(ENC_CS, 1); //setup CS SPI_Encoder
    391c:	2101      	movs	r1, #1
    391e:	200e      	movs	r0, #14
    3920:	4b5e      	ldr	r3, [pc, #376]	; (3a9c <main+0x2b8>)
    3922:	4798      	blx	r3
	ENC_SPI_init();
    3924:	4b5e      	ldr	r3, [pc, #376]	; (3aa0 <main+0x2bc>)
    3926:	4798      	blx	r3
	ENC_SPI_enable();
    3928:	4b5e      	ldr	r3, [pc, #376]	; (3aa4 <main+0x2c0>)
    392a:	4798      	blx	r3
	set_encoder_offset_zero();
    392c:	4b5e      	ldr	r3, [pc, #376]	; (3aa8 <main+0x2c4>)
    392e:	4798      	blx	r3
				ECAT_QSPI_send(&abort_FIFO,12, 0x02, 0x430C);
    3930:	f244 330c 	movw	r3, #17164	; 0x430c
    3934:	2202      	movs	r2, #2
    3936:	210c      	movs	r1, #12
    3938:	485c      	ldr	r0, [pc, #368]	; (3aac <main+0x2c8>)
    393a:	4c5d      	ldr	r4, [pc, #372]	; (3ab0 <main+0x2cc>)
    393c:	47a0      	blx	r4
				ECAT_QSPI_send(&zero_32,64, 0x02, 0x0020);
    393e:	2320      	movs	r3, #32
    3940:	2202      	movs	r2, #2
    3942:	2140      	movs	r1, #64	; 0x40
    3944:	485b      	ldr	r0, [pc, #364]	; (3ab4 <main+0x2d0>)
    3946:	4c5a      	ldr	r4, [pc, #360]	; (3ab0 <main+0x2cc>)
    3948:	47a0      	blx	r4
				ECAT_QSPI_send(&clear_RDRAM,16, 0x02, 0x4310 );
    394a:	f244 3310 	movw	r3, #17168	; 0x4310
    394e:	2202      	movs	r2, #2
    3950:	2110      	movs	r1, #16
    3952:	4859      	ldr	r0, [pc, #356]	; (3ab8 <main+0x2d4>)
    3954:	4c56      	ldr	r4, [pc, #344]	; (3ab0 <main+0x2cc>)
    3956:	47a0      	blx	r4

	uint32_t hallA, hallB, hallC;
		while (1) {
			receive_data_from_encoder();
    3958:	4b58      	ldr	r3, [pc, #352]	; (3abc <main+0x2d8>)
    395a:	4798      	blx	r3
			// 		i_max = *I_max;
			// 		w_max = *Joint_max_speed;
			// 		activate_control = *control_mode;
			// 		control_type = *control_set;
			
			if(activate_control){
    395c:	4b58      	ldr	r3, [pc, #352]	; (3ac0 <main+0x2dc>)
    395e:	781b      	ldrb	r3, [r3, #0]
    3960:	2b00      	cmp	r3, #0
    3962:	f000 81a7 	beq.w	3cb4 <main+0x4d0>
				
				if (current_ready && trq_ready){
    3966:	4b57      	ldr	r3, [pc, #348]	; (3ac4 <main+0x2e0>)
    3968:	781b      	ldrb	r3, [r3, #0]
    396a:	b2db      	uxtb	r3, r3
    396c:	2b00      	cmp	r3, #0
    396e:	d0f3      	beq.n	3958 <main+0x174>
    3970:	4b55      	ldr	r3, [pc, #340]	; (3ac8 <main+0x2e4>)
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	b2db      	uxtb	r3, r3
    3976:	2b00      	cmp	r3, #0
    3978:	d0ee      	beq.n	3958 <main+0x174>
					
					current_ready = false;
    397a:	4b52      	ldr	r3, [pc, #328]	; (3ac4 <main+0x2e0>)
    397c:	2200      	movs	r2, #0
    397e:	701a      	strb	r2, [r3, #0]
					trq_ready = false;
    3980:	4b51      	ldr	r3, [pc, #324]	; (3ac8 <main+0x2e4>)
    3982:	2200      	movs	r2, #0
    3984:	701a      	strb	r2, [r3, #0]
					hall = 0;
    3986:	4b51      	ldr	r3, [pc, #324]	; (3acc <main+0x2e8>)
    3988:	2200      	movs	r2, #0
    398a:	701a      	strb	r2, [r3, #0]
					hallA = gpio_get_pin_level(Hall_A);
    398c:	2018      	movs	r0, #24
    398e:	4b50      	ldr	r3, [pc, #320]	; (3ad0 <main+0x2ec>)
    3990:	4798      	blx	r3
    3992:	4603      	mov	r3, r0
    3994:	60fb      	str	r3, [r7, #12]
					hallB = gpio_get_pin_level(Hall_B);
    3996:	2017      	movs	r0, #23
    3998:	4b4d      	ldr	r3, [pc, #308]	; (3ad0 <main+0x2ec>)
    399a:	4798      	blx	r3
    399c:	4603      	mov	r3, r0
    399e:	60bb      	str	r3, [r7, #8]
					hallC = gpio_get_pin_level(Hall_C);
    39a0:	2036      	movs	r0, #54	; 0x36
    39a2:	4b4b      	ldr	r3, [pc, #300]	; (3ad0 <main+0x2ec>)
    39a4:	4798      	blx	r3
    39a6:	4603      	mov	r3, r0
    39a8:	607b      	str	r3, [r7, #4]

					hall = (hallA<<2)|(hallB<<1)|hallC;
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	b2db      	uxtb	r3, r3
    39ae:	009b      	lsls	r3, r3, #2
    39b0:	b2da      	uxtb	r2, r3
    39b2:	68bb      	ldr	r3, [r7, #8]
    39b4:	b2db      	uxtb	r3, r3
    39b6:	005b      	lsls	r3, r3, #1
    39b8:	b2db      	uxtb	r3, r3
    39ba:	4313      	orrs	r3, r2
    39bc:	b2da      	uxtb	r2, r3
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	b2db      	uxtb	r3, r3
    39c2:	4313      	orrs	r3, r2
    39c4:	b2da      	uxtb	r2, r3
    39c6:	4b41      	ldr	r3, [pc, #260]	; (3acc <main+0x2e8>)
    39c8:	701a      	strb	r2, [r3, #0]

					switch(hall) {
    39ca:	4b40      	ldr	r3, [pc, #256]	; (3acc <main+0x2e8>)
    39cc:	781b      	ldrb	r3, [r3, #0]
    39ce:	3b01      	subs	r3, #1
    39d0:	2b05      	cmp	r3, #5
    39d2:	f200 808e 	bhi.w	3af2 <main+0x30e>
    39d6:	a201      	add	r2, pc, #4	; (adr r2, 39dc <main+0x1f8>)
    39d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    39dc:	000039f5 	.word	0x000039f5
    39e0:	00003a07 	.word	0x00003a07
    39e4:	00003a19 	.word	0x00003a19
    39e8:	00003a2b 	.word	0x00003a2b
    39ec:	00003a35 	.word	0x00003a35
    39f0:	00003ae1 	.word	0x00003ae1
						case 1:
						curr_reference = -currA;
    39f4:	4b37      	ldr	r3, [pc, #220]	; (3ad4 <main+0x2f0>)
    39f6:	edd3 7a00 	vldr	s15, [r3]
    39fa:	eef1 7a67 	vneg.f32	s15, s15
    39fe:	4b36      	ldr	r3, [pc, #216]	; (3ad8 <main+0x2f4>)
    3a00:	edc3 7a00 	vstr	s15, [r3]
						break;
    3a04:	e075      	b.n	3af2 <main+0x30e>
						case 2:
						curr_reference = -currB;
    3a06:	4b35      	ldr	r3, [pc, #212]	; (3adc <main+0x2f8>)
    3a08:	edd3 7a00 	vldr	s15, [r3]
    3a0c:	eef1 7a67 	vneg.f32	s15, s15
    3a10:	4b31      	ldr	r3, [pc, #196]	; (3ad8 <main+0x2f4>)
    3a12:	edc3 7a00 	vstr	s15, [r3]
						break;
    3a16:	e06c      	b.n	3af2 <main+0x30e>
						case 3:
						curr_reference = -currA;
    3a18:	4b2e      	ldr	r3, [pc, #184]	; (3ad4 <main+0x2f0>)
    3a1a:	edd3 7a00 	vldr	s15, [r3]
    3a1e:	eef1 7a67 	vneg.f32	s15, s15
    3a22:	4b2d      	ldr	r3, [pc, #180]	; (3ad8 <main+0x2f4>)
    3a24:	edc3 7a00 	vstr	s15, [r3]
						break;
    3a28:	e063      	b.n	3af2 <main+0x30e>
						case 4:
						curr_reference = currB;
    3a2a:	4b2c      	ldr	r3, [pc, #176]	; (3adc <main+0x2f8>)
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	4a2a      	ldr	r2, [pc, #168]	; (3ad8 <main+0x2f4>)
    3a30:	6013      	str	r3, [r2, #0]
						break;
    3a32:	e05e      	b.n	3af2 <main+0x30e>
						case 5:
						curr_reference = currB;
    3a34:	4b29      	ldr	r3, [pc, #164]	; (3adc <main+0x2f8>)
    3a36:	681b      	ldr	r3, [r3, #0]
    3a38:	4a27      	ldr	r2, [pc, #156]	; (3ad8 <main+0x2f4>)
    3a3a:	6013      	str	r3, [r2, #0]
						break;
    3a3c:	e059      	b.n	3af2 <main+0x30e>
    3a3e:	bf00      	nop
    3a40:	20000214 	.word	0x20000214
    3a44:	200002ac 	.word	0x200002ac
    3a48:	40400000 	.word	0x40400000
    3a4c:	40c00000 	.word	0x40c00000
    3a50:	41100000 	.word	0x41100000
    3a54:	41200000 	.word	0x41200000
    3a58:	41300000 	.word	0x41300000
    3a5c:	41400000 	.word	0x41400000
    3a60:	41500000 	.word	0x41500000
    3a64:	41600000 	.word	0x41600000
    3a68:	41700000 	.word	0x41700000
    3a6c:	41880000 	.word	0x41880000
    3a70:	41900000 	.word	0x41900000
    3a74:	000002d1 	.word	0x000002d1
    3a78:	0000338d 	.word	0x0000338d
    3a7c:	000033a1 	.word	0x000033a1
    3a80:	200001a8 	.word	0x200001a8
    3a84:	000010d9 	.word	0x000010d9
    3a88:	200001a0 	.word	0x200001a0
    3a8c:	00000fe9 	.word	0x00000fe9
    3a90:	200001a4 	.word	0x200001a4
    3a94:	00003165 	.word	0x00003165
    3a98:	43001c00 	.word	0x43001c00
    3a9c:	00003319 	.word	0x00003319
    3aa0:	00002b85 	.word	0x00002b85
    3aa4:	00002c3d 	.word	0x00002c3d
    3aa8:	0000148d 	.word	0x0000148d
    3aac:	2000000c 	.word	0x2000000c
    3ab0:	00001255 	.word	0x00001255
    3ab4:	200000e0 	.word	0x200000e0
    3ab8:	200000dc 	.word	0x200000dc
    3abc:	00001529 	.word	0x00001529
    3ac0:	200000a8 	.word	0x200000a8
    3ac4:	200002a8 	.word	0x200002a8
    3ac8:	20000094 	.word	0x20000094
    3acc:	20000128 	.word	0x20000128
    3ad0:	00003351 	.word	0x00003351
    3ad4:	20000204 	.word	0x20000204
    3ad8:	20000120 	.word	0x20000120
    3adc:	20000254 	.word	0x20000254
						case 6:
						curr_reference = -currA;
    3ae0:	4b76      	ldr	r3, [pc, #472]	; (3cbc <main+0x4d8>)
    3ae2:	edd3 7a00 	vldr	s15, [r3]
    3ae6:	eef1 7a67 	vneg.f32	s15, s15
    3aea:	4b75      	ldr	r3, [pc, #468]	; (3cc0 <main+0x4dc>)
    3aec:	edc3 7a00 	vstr	s15, [r3]
						break;
    3af0:	bf00      	nop
					}
					
					get_position(hall);
    3af2:	4b74      	ldr	r3, [pc, #464]	; (3cc4 <main+0x4e0>)
    3af4:	781b      	ldrb	r3, [r3, #0]
    3af6:	4618      	mov	r0, r3
    3af8:	4b73      	ldr	r3, [pc, #460]	; (3cc8 <main+0x4e4>)
    3afa:	4798      	blx	r3
					
					if(control_type == 1){ //speed control
    3afc:	4b73      	ldr	r3, [pc, #460]	; (3ccc <main+0x4e8>)
    3afe:	781b      	ldrb	r3, [r3, #0]
    3b00:	2b01      	cmp	r3, #1
    3b02:	d130      	bne.n	3b66 <main+0x382>
						p_controller(out_w, desired_spd, rot_speed, kp_n, i_max*kt); // max current = 0.3
    3b04:	4b72      	ldr	r3, [pc, #456]	; (3cd0 <main+0x4ec>)
    3b06:	6819      	ldr	r1, [r3, #0]
    3b08:	4b72      	ldr	r3, [pc, #456]	; (3cd4 <main+0x4f0>)
    3b0a:	681a      	ldr	r2, [r3, #0]
    3b0c:	4b72      	ldr	r3, [pc, #456]	; (3cd8 <main+0x4f4>)
    3b0e:	6818      	ldr	r0, [r3, #0]
    3b10:	4b72      	ldr	r3, [pc, #456]	; (3cdc <main+0x4f8>)
    3b12:	ed93 7a00 	vldr	s14, [r3]
    3b16:	4b72      	ldr	r3, [pc, #456]	; (3ce0 <main+0x4fc>)
    3b18:	edd3 7a00 	vldr	s15, [r3]
    3b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
    3b20:	edcd 7a00 	vstr	s15, [sp]
    3b24:	4603      	mov	r3, r0
    3b26:	486f      	ldr	r0, [pc, #444]	; (3ce4 <main+0x500>)
    3b28:	4c6f      	ldr	r4, [pc, #444]	; (3ce8 <main+0x504>)
    3b2a:	47a0      	blx	r4
						curr_ref_controller =  out_w[0] / kt;
    3b2c:	4b6d      	ldr	r3, [pc, #436]	; (3ce4 <main+0x500>)
    3b2e:	edd3 6a00 	vldr	s13, [r3]
    3b32:	4b6b      	ldr	r3, [pc, #428]	; (3ce0 <main+0x4fc>)
    3b34:	ed93 7a00 	vldr	s14, [r3]
    3b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3b3c:	4b6b      	ldr	r3, [pc, #428]	; (3cec <main+0x508>)
    3b3e:	edc3 7a00 	vstr	s15, [r3]
						pi_controller(out_i, curr_ref_controller, curr_reference, kp_i, ki_i, v_max); //max voltage = 24
    3b42:	4b6a      	ldr	r3, [pc, #424]	; (3cec <main+0x508>)
    3b44:	6819      	ldr	r1, [r3, #0]
    3b46:	4b5e      	ldr	r3, [pc, #376]	; (3cc0 <main+0x4dc>)
    3b48:	6818      	ldr	r0, [r3, #0]
    3b4a:	4b69      	ldr	r3, [pc, #420]	; (3cf0 <main+0x50c>)
    3b4c:	681c      	ldr	r4, [r3, #0]
    3b4e:	4b69      	ldr	r3, [pc, #420]	; (3cf4 <main+0x510>)
    3b50:	681b      	ldr	r3, [r3, #0]
    3b52:	4a69      	ldr	r2, [pc, #420]	; (3cf8 <main+0x514>)
    3b54:	6812      	ldr	r2, [r2, #0]
    3b56:	9201      	str	r2, [sp, #4]
    3b58:	9300      	str	r3, [sp, #0]
    3b5a:	4623      	mov	r3, r4
    3b5c:	4602      	mov	r2, r0
    3b5e:	4867      	ldr	r0, [pc, #412]	; (3cfc <main+0x518>)
    3b60:	4c67      	ldr	r4, [pc, #412]	; (3d00 <main+0x51c>)
    3b62:	47a0      	blx	r4
    3b64:	e052      	b.n	3c0c <main+0x428>
					}
					else if (control_type == 2){ //position control
    3b66:	4b59      	ldr	r3, [pc, #356]	; (3ccc <main+0x4e8>)
    3b68:	781b      	ldrb	r3, [r3, #0]
    3b6a:	2b02      	cmp	r3, #2
    3b6c:	d13d      	bne.n	3bea <main+0x406>
						p_controller(out_p, desired_pos, rel_position, kp_p, w_max); //max speed = 700
    3b6e:	4b65      	ldr	r3, [pc, #404]	; (3d04 <main+0x520>)
    3b70:	6819      	ldr	r1, [r3, #0]
    3b72:	4b65      	ldr	r3, [pc, #404]	; (3d08 <main+0x524>)
    3b74:	681a      	ldr	r2, [r3, #0]
    3b76:	4b65      	ldr	r3, [pc, #404]	; (3d0c <main+0x528>)
    3b78:	6818      	ldr	r0, [r3, #0]
    3b7a:	4b65      	ldr	r3, [pc, #404]	; (3d10 <main+0x52c>)
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	9300      	str	r3, [sp, #0]
    3b80:	4603      	mov	r3, r0
    3b82:	4864      	ldr	r0, [pc, #400]	; (3d14 <main+0x530>)
    3b84:	4c58      	ldr	r4, [pc, #352]	; (3ce8 <main+0x504>)
    3b86:	47a0      	blx	r4
						p_controller(out_w, out_p[0], rot_speed, kp_n, i_max*kt); // max current = 0.3
    3b88:	4b62      	ldr	r3, [pc, #392]	; (3d14 <main+0x530>)
    3b8a:	6819      	ldr	r1, [r3, #0]
    3b8c:	4b51      	ldr	r3, [pc, #324]	; (3cd4 <main+0x4f0>)
    3b8e:	681a      	ldr	r2, [r3, #0]
    3b90:	4b51      	ldr	r3, [pc, #324]	; (3cd8 <main+0x4f4>)
    3b92:	6818      	ldr	r0, [r3, #0]
    3b94:	4b51      	ldr	r3, [pc, #324]	; (3cdc <main+0x4f8>)
    3b96:	ed93 7a00 	vldr	s14, [r3]
    3b9a:	4b51      	ldr	r3, [pc, #324]	; (3ce0 <main+0x4fc>)
    3b9c:	edd3 7a00 	vldr	s15, [r3]
    3ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
    3ba4:	edcd 7a00 	vstr	s15, [sp]
    3ba8:	4603      	mov	r3, r0
    3baa:	484e      	ldr	r0, [pc, #312]	; (3ce4 <main+0x500>)
    3bac:	4c4e      	ldr	r4, [pc, #312]	; (3ce8 <main+0x504>)
    3bae:	47a0      	blx	r4
						curr_ref_controller =  out_w[0] / kt;
    3bb0:	4b4c      	ldr	r3, [pc, #304]	; (3ce4 <main+0x500>)
    3bb2:	edd3 6a00 	vldr	s13, [r3]
    3bb6:	4b4a      	ldr	r3, [pc, #296]	; (3ce0 <main+0x4fc>)
    3bb8:	ed93 7a00 	vldr	s14, [r3]
    3bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3bc0:	4b4a      	ldr	r3, [pc, #296]	; (3cec <main+0x508>)
    3bc2:	edc3 7a00 	vstr	s15, [r3]
						pi_controller(out_i, curr_ref_controller, curr_reference, kp_i, ki_i, v_max); //max voltage = 24
    3bc6:	4b49      	ldr	r3, [pc, #292]	; (3cec <main+0x508>)
    3bc8:	6819      	ldr	r1, [r3, #0]
    3bca:	4b3d      	ldr	r3, [pc, #244]	; (3cc0 <main+0x4dc>)
    3bcc:	6818      	ldr	r0, [r3, #0]
    3bce:	4b48      	ldr	r3, [pc, #288]	; (3cf0 <main+0x50c>)
    3bd0:	681c      	ldr	r4, [r3, #0]
    3bd2:	4b48      	ldr	r3, [pc, #288]	; (3cf4 <main+0x510>)
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	4a48      	ldr	r2, [pc, #288]	; (3cf8 <main+0x514>)
    3bd8:	6812      	ldr	r2, [r2, #0]
    3bda:	9201      	str	r2, [sp, #4]
    3bdc:	9300      	str	r3, [sp, #0]
    3bde:	4623      	mov	r3, r4
    3be0:	4602      	mov	r2, r0
    3be2:	4846      	ldr	r0, [pc, #280]	; (3cfc <main+0x518>)
    3be4:	4c46      	ldr	r4, [pc, #280]	; (3d00 <main+0x51c>)
    3be6:	47a0      	blx	r4
    3be8:	e010      	b.n	3c0c <main+0x428>
					}
					else{ //current control
						pi_controller(out_i, desired_curr, curr_reference, kp_i, ki_i, v_max); //max voltage = 24
    3bea:	4b4b      	ldr	r3, [pc, #300]	; (3d18 <main+0x534>)
    3bec:	6819      	ldr	r1, [r3, #0]
    3bee:	4b34      	ldr	r3, [pc, #208]	; (3cc0 <main+0x4dc>)
    3bf0:	6818      	ldr	r0, [r3, #0]
    3bf2:	4b3f      	ldr	r3, [pc, #252]	; (3cf0 <main+0x50c>)
    3bf4:	681c      	ldr	r4, [r3, #0]
    3bf6:	4b3f      	ldr	r3, [pc, #252]	; (3cf4 <main+0x510>)
    3bf8:	681b      	ldr	r3, [r3, #0]
    3bfa:	4a3f      	ldr	r2, [pc, #252]	; (3cf8 <main+0x514>)
    3bfc:	6812      	ldr	r2, [r2, #0]
    3bfe:	9201      	str	r2, [sp, #4]
    3c00:	9300      	str	r3, [sp, #0]
    3c02:	4623      	mov	r3, r4
    3c04:	4602      	mov	r2, r0
    3c06:	483d      	ldr	r0, [pc, #244]	; (3cfc <main+0x518>)
    3c08:	4c3d      	ldr	r4, [pc, #244]	; (3d00 <main+0x51c>)
    3c0a:	47a0      	blx	r4
					}
					
					volt_ref = (out_i[0] + kt*rot_speed) * 2000 / 24; //Feed-forward
    3c0c:	4b3b      	ldr	r3, [pc, #236]	; (3cfc <main+0x518>)
    3c0e:	ed93 7a00 	vldr	s14, [r3]
    3c12:	4b33      	ldr	r3, [pc, #204]	; (3ce0 <main+0x4fc>)
    3c14:	edd3 6a00 	vldr	s13, [r3]
    3c18:	4b2e      	ldr	r3, [pc, #184]	; (3cd4 <main+0x4f0>)
    3c1a:	edd3 7a00 	vldr	s15, [r3]
    3c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    3c22:	ee77 7a27 	vadd.f32	s15, s14, s15
    3c26:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 3d1c <main+0x538>
    3c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
    3c2e:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
    3c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
    3c36:	4b3a      	ldr	r3, [pc, #232]	; (3d20 <main+0x53c>)
    3c38:	edc3 7a00 	vstr	s15, [r3]
					direction = (volt_ref <0);
    3c3c:	4b38      	ldr	r3, [pc, #224]	; (3d20 <main+0x53c>)
    3c3e:	edd3 7a00 	vldr	s15, [r3]
    3c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c4a:	bf4c      	ite	mi
    3c4c:	2301      	movmi	r3, #1
    3c4e:	2300      	movpl	r3, #0
    3c50:	b2db      	uxtb	r3, r3
    3c52:	461a      	mov	r2, r3
    3c54:	4b33      	ldr	r3, [pc, #204]	; (3d24 <main+0x540>)
    3c56:	701a      	strb	r2, [r3, #0]
					
					hall = hall | (direction <<3);
    3c58:	4b32      	ldr	r3, [pc, #200]	; (3d24 <main+0x540>)
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	00db      	lsls	r3, r3, #3
    3c5e:	b25a      	sxtb	r2, r3
    3c60:	4b18      	ldr	r3, [pc, #96]	; (3cc4 <main+0x4e0>)
    3c62:	781b      	ldrb	r3, [r3, #0]
    3c64:	b25b      	sxtb	r3, r3
    3c66:	4313      	orrs	r3, r2
    3c68:	b25b      	sxtb	r3, r3
    3c6a:	b2da      	uxtb	r2, r3
    3c6c:	4b15      	ldr	r3, [pc, #84]	; (3cc4 <main+0x4e0>)
    3c6e:	701a      	strb	r2, [r3, #0]
					
					set_motor_voltage(hall);
    3c70:	4b14      	ldr	r3, [pc, #80]	; (3cc4 <main+0x4e0>)
    3c72:	781b      	ldrb	r3, [r3, #0]
    3c74:	4618      	mov	r0, r3
    3c76:	4b2c      	ldr	r3, [pc, #176]	; (3d28 <main+0x544>)
    3c78:	4798      	blx	r3
					TCC0->CCBUF->reg = 0; /* Channel 0 Compare/Capture Value: 0x0 */
    3c7a:	4b2c      	ldr	r3, [pc, #176]	; (3d2c <main+0x548>)
    3c7c:	2200      	movs	r2, #0
    3c7e:	601a      	str	r2, [r3, #0]
					

					ECAT_QSPI_send(&data_send_ethercat_var,64, 0x02, 0x0020);
    3c80:	2320      	movs	r3, #32
    3c82:	2202      	movs	r2, #2
    3c84:	2140      	movs	r1, #64	; 0x40
    3c86:	482a      	ldr	r0, [pc, #168]	; (3d30 <main+0x54c>)
    3c88:	4c2a      	ldr	r4, [pc, #168]	; (3d34 <main+0x550>)
    3c8a:	47a0      	blx	r4
					ECAT_QSPI_send(&config_fifo,16, 0x02, 0x4308);
    3c8c:	f244 3308 	movw	r3, #17160	; 0x4308
    3c90:	2202      	movs	r2, #2
    3c92:	2110      	movs	r1, #16
    3c94:	4828      	ldr	r0, [pc, #160]	; (3d38 <main+0x554>)
    3c96:	4c27      	ldr	r4, [pc, #156]	; (3d34 <main+0x550>)
    3c98:	47a0      	blx	r4
					ECAT_QSPI_read(&data_receive_ethercat_var, 64, 0x03, 0x030000);
    3c9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    3c9e:	2203      	movs	r2, #3
    3ca0:	2140      	movs	r1, #64	; 0x40
    3ca2:	4826      	ldr	r0, [pc, #152]	; (3d3c <main+0x558>)
    3ca4:	4c26      	ldr	r4, [pc, #152]	; (3d40 <main+0x55c>)
    3ca6:	47a0      	blx	r4
					data_send[0] += 1;
    3ca8:	4b26      	ldr	r3, [pc, #152]	; (3d44 <main+0x560>)
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	3301      	adds	r3, #1
    3cae:	4a25      	ldr	r2, [pc, #148]	; (3d44 <main+0x560>)
    3cb0:	6013      	str	r3, [r2, #0]
    3cb2:	e651      	b.n	3958 <main+0x174>
					// 				*read_current_i_m = curr_reference;
					// 				*read_speed = rot_speed;
				}
			}
			else{ //control deactivated
				TCC0->CCBUF->reg = 0; //turn off pwm
    3cb4:	4b1d      	ldr	r3, [pc, #116]	; (3d2c <main+0x548>)
    3cb6:	2200      	movs	r2, #0
    3cb8:	601a      	str	r2, [r3, #0]
			receive_data_from_encoder();
    3cba:	e64d      	b.n	3958 <main+0x174>
    3cbc:	20000204 	.word	0x20000204
    3cc0:	20000120 	.word	0x20000120
    3cc4:	20000128 	.word	0x20000128
    3cc8:	0000373d 	.word	0x0000373d
    3ccc:	20000191 	.word	0x20000191
    3cd0:	20000174 	.word	0x20000174
    3cd4:	20000124 	.word	0x20000124
    3cd8:	20000180 	.word	0x20000180
    3cdc:	2000009c 	.word	0x2000009c
    3ce0:	200000a4 	.word	0x200000a4
    3ce4:	2000014c 	.word	0x2000014c
    3ce8:	0000140d 	.word	0x0000140d
    3cec:	20000198 	.word	0x20000198
    3cf0:	20000188 	.word	0x20000188
    3cf4:	2000018c 	.word	0x2000018c
    3cf8:	20000098 	.word	0x20000098
    3cfc:	2000013c 	.word	0x2000013c
    3d00:	00001331 	.word	0x00001331
    3d04:	2000016c 	.word	0x2000016c
    3d08:	20000138 	.word	0x20000138
    3d0c:	2000017c 	.word	0x2000017c
    3d10:	200000a0 	.word	0x200000a0
    3d14:	2000015c 	.word	0x2000015c
    3d18:	20000178 	.word	0x20000178
    3d1c:	44fa0000 	.word	0x44fa0000
    3d20:	20000194 	.word	0x20000194
    3d24:	20000190 	.word	0x20000190
    3d28:	00003711 	.word	0x00003711
    3d2c:	41016070 	.word	0x41016070
    3d30:	200002ac 	.word	0x200002ac
    3d34:	00001255 	.word	0x00001255
    3d38:	20000058 	.word	0x20000058
    3d3c:	200001bc 	.word	0x200001bc
    3d40:	000012c9 	.word	0x000012c9
    3d44:	20000018 	.word	0x20000018

00003d48 <__aeabi_drsub>:
    3d48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3d4c:	e002      	b.n	3d54 <__adddf3>
    3d4e:	bf00      	nop

00003d50 <__aeabi_dsub>:
    3d50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003d54 <__adddf3>:
    3d54:	b530      	push	{r4, r5, lr}
    3d56:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3d5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3d5e:	ea94 0f05 	teq	r4, r5
    3d62:	bf08      	it	eq
    3d64:	ea90 0f02 	teqeq	r0, r2
    3d68:	bf1f      	itttt	ne
    3d6a:	ea54 0c00 	orrsne.w	ip, r4, r0
    3d6e:	ea55 0c02 	orrsne.w	ip, r5, r2
    3d72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3d76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3d7a:	f000 80e2 	beq.w	3f42 <__adddf3+0x1ee>
    3d7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3d82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3d86:	bfb8      	it	lt
    3d88:	426d      	neglt	r5, r5
    3d8a:	dd0c      	ble.n	3da6 <__adddf3+0x52>
    3d8c:	442c      	add	r4, r5
    3d8e:	ea80 0202 	eor.w	r2, r0, r2
    3d92:	ea81 0303 	eor.w	r3, r1, r3
    3d96:	ea82 0000 	eor.w	r0, r2, r0
    3d9a:	ea83 0101 	eor.w	r1, r3, r1
    3d9e:	ea80 0202 	eor.w	r2, r0, r2
    3da2:	ea81 0303 	eor.w	r3, r1, r3
    3da6:	2d36      	cmp	r5, #54	; 0x36
    3da8:	bf88      	it	hi
    3daa:	bd30      	pophi	{r4, r5, pc}
    3dac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3db0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3db4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3db8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3dbc:	d002      	beq.n	3dc4 <__adddf3+0x70>
    3dbe:	4240      	negs	r0, r0
    3dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3dc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3dc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3dcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    3dd0:	d002      	beq.n	3dd8 <__adddf3+0x84>
    3dd2:	4252      	negs	r2, r2
    3dd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3dd8:	ea94 0f05 	teq	r4, r5
    3ddc:	f000 80a7 	beq.w	3f2e <__adddf3+0x1da>
    3de0:	f1a4 0401 	sub.w	r4, r4, #1
    3de4:	f1d5 0e20 	rsbs	lr, r5, #32
    3de8:	db0d      	blt.n	3e06 <__adddf3+0xb2>
    3dea:	fa02 fc0e 	lsl.w	ip, r2, lr
    3dee:	fa22 f205 	lsr.w	r2, r2, r5
    3df2:	1880      	adds	r0, r0, r2
    3df4:	f141 0100 	adc.w	r1, r1, #0
    3df8:	fa03 f20e 	lsl.w	r2, r3, lr
    3dfc:	1880      	adds	r0, r0, r2
    3dfe:	fa43 f305 	asr.w	r3, r3, r5
    3e02:	4159      	adcs	r1, r3
    3e04:	e00e      	b.n	3e24 <__adddf3+0xd0>
    3e06:	f1a5 0520 	sub.w	r5, r5, #32
    3e0a:	f10e 0e20 	add.w	lr, lr, #32
    3e0e:	2a01      	cmp	r2, #1
    3e10:	fa03 fc0e 	lsl.w	ip, r3, lr
    3e14:	bf28      	it	cs
    3e16:	f04c 0c02 	orrcs.w	ip, ip, #2
    3e1a:	fa43 f305 	asr.w	r3, r3, r5
    3e1e:	18c0      	adds	r0, r0, r3
    3e20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3e28:	d507      	bpl.n	3e3a <__adddf3+0xe6>
    3e2a:	f04f 0e00 	mov.w	lr, #0
    3e2e:	f1dc 0c00 	rsbs	ip, ip, #0
    3e32:	eb7e 0000 	sbcs.w	r0, lr, r0
    3e36:	eb6e 0101 	sbc.w	r1, lr, r1
    3e3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3e3e:	d31b      	bcc.n	3e78 <__adddf3+0x124>
    3e40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3e44:	d30c      	bcc.n	3e60 <__adddf3+0x10c>
    3e46:	0849      	lsrs	r1, r1, #1
    3e48:	ea5f 0030 	movs.w	r0, r0, rrx
    3e4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3e50:	f104 0401 	add.w	r4, r4, #1
    3e54:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3e58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3e5c:	f080 809a 	bcs.w	3f94 <__adddf3+0x240>
    3e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3e64:	bf08      	it	eq
    3e66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3e6a:	f150 0000 	adcs.w	r0, r0, #0
    3e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3e72:	ea41 0105 	orr.w	r1, r1, r5
    3e76:	bd30      	pop	{r4, r5, pc}
    3e78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3e7c:	4140      	adcs	r0, r0
    3e7e:	eb41 0101 	adc.w	r1, r1, r1
    3e82:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3e86:	f1a4 0401 	sub.w	r4, r4, #1
    3e8a:	d1e9      	bne.n	3e60 <__adddf3+0x10c>
    3e8c:	f091 0f00 	teq	r1, #0
    3e90:	bf04      	itt	eq
    3e92:	4601      	moveq	r1, r0
    3e94:	2000      	moveq	r0, #0
    3e96:	fab1 f381 	clz	r3, r1
    3e9a:	bf08      	it	eq
    3e9c:	3320      	addeq	r3, #32
    3e9e:	f1a3 030b 	sub.w	r3, r3, #11
    3ea2:	f1b3 0220 	subs.w	r2, r3, #32
    3ea6:	da0c      	bge.n	3ec2 <__adddf3+0x16e>
    3ea8:	320c      	adds	r2, #12
    3eaa:	dd08      	ble.n	3ebe <__adddf3+0x16a>
    3eac:	f102 0c14 	add.w	ip, r2, #20
    3eb0:	f1c2 020c 	rsb	r2, r2, #12
    3eb4:	fa01 f00c 	lsl.w	r0, r1, ip
    3eb8:	fa21 f102 	lsr.w	r1, r1, r2
    3ebc:	e00c      	b.n	3ed8 <__adddf3+0x184>
    3ebe:	f102 0214 	add.w	r2, r2, #20
    3ec2:	bfd8      	it	le
    3ec4:	f1c2 0c20 	rsble	ip, r2, #32
    3ec8:	fa01 f102 	lsl.w	r1, r1, r2
    3ecc:	fa20 fc0c 	lsr.w	ip, r0, ip
    3ed0:	bfdc      	itt	le
    3ed2:	ea41 010c 	orrle.w	r1, r1, ip
    3ed6:	4090      	lslle	r0, r2
    3ed8:	1ae4      	subs	r4, r4, r3
    3eda:	bfa2      	ittt	ge
    3edc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    3ee0:	4329      	orrge	r1, r5
    3ee2:	bd30      	popge	{r4, r5, pc}
    3ee4:	ea6f 0404 	mvn.w	r4, r4
    3ee8:	3c1f      	subs	r4, #31
    3eea:	da1c      	bge.n	3f26 <__adddf3+0x1d2>
    3eec:	340c      	adds	r4, #12
    3eee:	dc0e      	bgt.n	3f0e <__adddf3+0x1ba>
    3ef0:	f104 0414 	add.w	r4, r4, #20
    3ef4:	f1c4 0220 	rsb	r2, r4, #32
    3ef8:	fa20 f004 	lsr.w	r0, r0, r4
    3efc:	fa01 f302 	lsl.w	r3, r1, r2
    3f00:	ea40 0003 	orr.w	r0, r0, r3
    3f04:	fa21 f304 	lsr.w	r3, r1, r4
    3f08:	ea45 0103 	orr.w	r1, r5, r3
    3f0c:	bd30      	pop	{r4, r5, pc}
    3f0e:	f1c4 040c 	rsb	r4, r4, #12
    3f12:	f1c4 0220 	rsb	r2, r4, #32
    3f16:	fa20 f002 	lsr.w	r0, r0, r2
    3f1a:	fa01 f304 	lsl.w	r3, r1, r4
    3f1e:	ea40 0003 	orr.w	r0, r0, r3
    3f22:	4629      	mov	r1, r5
    3f24:	bd30      	pop	{r4, r5, pc}
    3f26:	fa21 f004 	lsr.w	r0, r1, r4
    3f2a:	4629      	mov	r1, r5
    3f2c:	bd30      	pop	{r4, r5, pc}
    3f2e:	f094 0f00 	teq	r4, #0
    3f32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3f36:	bf06      	itte	eq
    3f38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3f3c:	3401      	addeq	r4, #1
    3f3e:	3d01      	subne	r5, #1
    3f40:	e74e      	b.n	3de0 <__adddf3+0x8c>
    3f42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3f46:	bf18      	it	ne
    3f48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3f4c:	d029      	beq.n	3fa2 <__adddf3+0x24e>
    3f4e:	ea94 0f05 	teq	r4, r5
    3f52:	bf08      	it	eq
    3f54:	ea90 0f02 	teqeq	r0, r2
    3f58:	d005      	beq.n	3f66 <__adddf3+0x212>
    3f5a:	ea54 0c00 	orrs.w	ip, r4, r0
    3f5e:	bf04      	itt	eq
    3f60:	4619      	moveq	r1, r3
    3f62:	4610      	moveq	r0, r2
    3f64:	bd30      	pop	{r4, r5, pc}
    3f66:	ea91 0f03 	teq	r1, r3
    3f6a:	bf1e      	ittt	ne
    3f6c:	2100      	movne	r1, #0
    3f6e:	2000      	movne	r0, #0
    3f70:	bd30      	popne	{r4, r5, pc}
    3f72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3f76:	d105      	bne.n	3f84 <__adddf3+0x230>
    3f78:	0040      	lsls	r0, r0, #1
    3f7a:	4149      	adcs	r1, r1
    3f7c:	bf28      	it	cs
    3f7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3f82:	bd30      	pop	{r4, r5, pc}
    3f84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3f88:	bf3c      	itt	cc
    3f8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3f8e:	bd30      	popcc	{r4, r5, pc}
    3f90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3f94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3f98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3f9c:	f04f 0000 	mov.w	r0, #0
    3fa0:	bd30      	pop	{r4, r5, pc}
    3fa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3fa6:	bf1a      	itte	ne
    3fa8:	4619      	movne	r1, r3
    3faa:	4610      	movne	r0, r2
    3fac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3fb0:	bf1c      	itt	ne
    3fb2:	460b      	movne	r3, r1
    3fb4:	4602      	movne	r2, r0
    3fb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3fba:	bf06      	itte	eq
    3fbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3fc0:	ea91 0f03 	teqeq	r1, r3
    3fc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3fc8:	bd30      	pop	{r4, r5, pc}
    3fca:	bf00      	nop

00003fcc <__aeabi_ui2d>:
    3fcc:	f090 0f00 	teq	r0, #0
    3fd0:	bf04      	itt	eq
    3fd2:	2100      	moveq	r1, #0
    3fd4:	4770      	bxeq	lr
    3fd6:	b530      	push	{r4, r5, lr}
    3fd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3fdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3fe0:	f04f 0500 	mov.w	r5, #0
    3fe4:	f04f 0100 	mov.w	r1, #0
    3fe8:	e750      	b.n	3e8c <__adddf3+0x138>
    3fea:	bf00      	nop

00003fec <__aeabi_i2d>:
    3fec:	f090 0f00 	teq	r0, #0
    3ff0:	bf04      	itt	eq
    3ff2:	2100      	moveq	r1, #0
    3ff4:	4770      	bxeq	lr
    3ff6:	b530      	push	{r4, r5, lr}
    3ff8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3ffc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4000:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4004:	bf48      	it	mi
    4006:	4240      	negmi	r0, r0
    4008:	f04f 0100 	mov.w	r1, #0
    400c:	e73e      	b.n	3e8c <__adddf3+0x138>
    400e:	bf00      	nop

00004010 <__aeabi_f2d>:
    4010:	0042      	lsls	r2, r0, #1
    4012:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4016:	ea4f 0131 	mov.w	r1, r1, rrx
    401a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    401e:	bf1f      	itttt	ne
    4020:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4024:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4028:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    402c:	4770      	bxne	lr
    402e:	f092 0f00 	teq	r2, #0
    4032:	bf14      	ite	ne
    4034:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4038:	4770      	bxeq	lr
    403a:	b530      	push	{r4, r5, lr}
    403c:	f44f 7460 	mov.w	r4, #896	; 0x380
    4040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4044:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4048:	e720      	b.n	3e8c <__adddf3+0x138>
    404a:	bf00      	nop

0000404c <__aeabi_ul2d>:
    404c:	ea50 0201 	orrs.w	r2, r0, r1
    4050:	bf08      	it	eq
    4052:	4770      	bxeq	lr
    4054:	b530      	push	{r4, r5, lr}
    4056:	f04f 0500 	mov.w	r5, #0
    405a:	e00a      	b.n	4072 <__aeabi_l2d+0x16>

0000405c <__aeabi_l2d>:
    405c:	ea50 0201 	orrs.w	r2, r0, r1
    4060:	bf08      	it	eq
    4062:	4770      	bxeq	lr
    4064:	b530      	push	{r4, r5, lr}
    4066:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    406a:	d502      	bpl.n	4072 <__aeabi_l2d+0x16>
    406c:	4240      	negs	r0, r0
    406e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4072:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4076:	f104 0432 	add.w	r4, r4, #50	; 0x32
    407a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    407e:	f43f aedc 	beq.w	3e3a <__adddf3+0xe6>
    4082:	f04f 0203 	mov.w	r2, #3
    4086:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    408a:	bf18      	it	ne
    408c:	3203      	addne	r2, #3
    408e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4092:	bf18      	it	ne
    4094:	3203      	addne	r2, #3
    4096:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    409a:	f1c2 0320 	rsb	r3, r2, #32
    409e:	fa00 fc03 	lsl.w	ip, r0, r3
    40a2:	fa20 f002 	lsr.w	r0, r0, r2
    40a6:	fa01 fe03 	lsl.w	lr, r1, r3
    40aa:	ea40 000e 	orr.w	r0, r0, lr
    40ae:	fa21 f102 	lsr.w	r1, r1, r2
    40b2:	4414      	add	r4, r2
    40b4:	e6c1      	b.n	3e3a <__adddf3+0xe6>
    40b6:	bf00      	nop

000040b8 <__aeabi_dmul>:
    40b8:	b570      	push	{r4, r5, r6, lr}
    40ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    40be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    40c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    40c6:	bf1d      	ittte	ne
    40c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    40cc:	ea94 0f0c 	teqne	r4, ip
    40d0:	ea95 0f0c 	teqne	r5, ip
    40d4:	f000 f8de 	bleq	4294 <__aeabi_dmul+0x1dc>
    40d8:	442c      	add	r4, r5
    40da:	ea81 0603 	eor.w	r6, r1, r3
    40de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    40e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    40e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    40ea:	bf18      	it	ne
    40ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    40f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    40f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    40f8:	d038      	beq.n	416c <__aeabi_dmul+0xb4>
    40fa:	fba0 ce02 	umull	ip, lr, r0, r2
    40fe:	f04f 0500 	mov.w	r5, #0
    4102:	fbe1 e502 	umlal	lr, r5, r1, r2
    4106:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    410a:	fbe0 e503 	umlal	lr, r5, r0, r3
    410e:	f04f 0600 	mov.w	r6, #0
    4112:	fbe1 5603 	umlal	r5, r6, r1, r3
    4116:	f09c 0f00 	teq	ip, #0
    411a:	bf18      	it	ne
    411c:	f04e 0e01 	orrne.w	lr, lr, #1
    4120:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4124:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4128:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    412c:	d204      	bcs.n	4138 <__aeabi_dmul+0x80>
    412e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4132:	416d      	adcs	r5, r5
    4134:	eb46 0606 	adc.w	r6, r6, r6
    4138:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    413c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4140:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4144:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4148:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    414c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4150:	bf88      	it	hi
    4152:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4156:	d81e      	bhi.n	4196 <__aeabi_dmul+0xde>
    4158:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    415c:	bf08      	it	eq
    415e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4162:	f150 0000 	adcs.w	r0, r0, #0
    4166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    416a:	bd70      	pop	{r4, r5, r6, pc}
    416c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4170:	ea46 0101 	orr.w	r1, r6, r1
    4174:	ea40 0002 	orr.w	r0, r0, r2
    4178:	ea81 0103 	eor.w	r1, r1, r3
    417c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4180:	bfc2      	ittt	gt
    4182:	ebd4 050c 	rsbsgt	r5, r4, ip
    4186:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    418a:	bd70      	popgt	{r4, r5, r6, pc}
    418c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4190:	f04f 0e00 	mov.w	lr, #0
    4194:	3c01      	subs	r4, #1
    4196:	f300 80ab 	bgt.w	42f0 <__aeabi_dmul+0x238>
    419a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    419e:	bfde      	ittt	le
    41a0:	2000      	movle	r0, #0
    41a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    41a6:	bd70      	pople	{r4, r5, r6, pc}
    41a8:	f1c4 0400 	rsb	r4, r4, #0
    41ac:	3c20      	subs	r4, #32
    41ae:	da35      	bge.n	421c <__aeabi_dmul+0x164>
    41b0:	340c      	adds	r4, #12
    41b2:	dc1b      	bgt.n	41ec <__aeabi_dmul+0x134>
    41b4:	f104 0414 	add.w	r4, r4, #20
    41b8:	f1c4 0520 	rsb	r5, r4, #32
    41bc:	fa00 f305 	lsl.w	r3, r0, r5
    41c0:	fa20 f004 	lsr.w	r0, r0, r4
    41c4:	fa01 f205 	lsl.w	r2, r1, r5
    41c8:	ea40 0002 	orr.w	r0, r0, r2
    41cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    41d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    41d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    41d8:	fa21 f604 	lsr.w	r6, r1, r4
    41dc:	eb42 0106 	adc.w	r1, r2, r6
    41e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    41e4:	bf08      	it	eq
    41e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    41ea:	bd70      	pop	{r4, r5, r6, pc}
    41ec:	f1c4 040c 	rsb	r4, r4, #12
    41f0:	f1c4 0520 	rsb	r5, r4, #32
    41f4:	fa00 f304 	lsl.w	r3, r0, r4
    41f8:	fa20 f005 	lsr.w	r0, r0, r5
    41fc:	fa01 f204 	lsl.w	r2, r1, r4
    4200:	ea40 0002 	orr.w	r0, r0, r2
    4204:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4208:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    420c:	f141 0100 	adc.w	r1, r1, #0
    4210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4214:	bf08      	it	eq
    4216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    421a:	bd70      	pop	{r4, r5, r6, pc}
    421c:	f1c4 0520 	rsb	r5, r4, #32
    4220:	fa00 f205 	lsl.w	r2, r0, r5
    4224:	ea4e 0e02 	orr.w	lr, lr, r2
    4228:	fa20 f304 	lsr.w	r3, r0, r4
    422c:	fa01 f205 	lsl.w	r2, r1, r5
    4230:	ea43 0302 	orr.w	r3, r3, r2
    4234:	fa21 f004 	lsr.w	r0, r1, r4
    4238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    423c:	fa21 f204 	lsr.w	r2, r1, r4
    4240:	ea20 0002 	bic.w	r0, r0, r2
    4244:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    424c:	bf08      	it	eq
    424e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4252:	bd70      	pop	{r4, r5, r6, pc}
    4254:	f094 0f00 	teq	r4, #0
    4258:	d10f      	bne.n	427a <__aeabi_dmul+0x1c2>
    425a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    425e:	0040      	lsls	r0, r0, #1
    4260:	eb41 0101 	adc.w	r1, r1, r1
    4264:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4268:	bf08      	it	eq
    426a:	3c01      	subeq	r4, #1
    426c:	d0f7      	beq.n	425e <__aeabi_dmul+0x1a6>
    426e:	ea41 0106 	orr.w	r1, r1, r6
    4272:	f095 0f00 	teq	r5, #0
    4276:	bf18      	it	ne
    4278:	4770      	bxne	lr
    427a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    427e:	0052      	lsls	r2, r2, #1
    4280:	eb43 0303 	adc.w	r3, r3, r3
    4284:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4288:	bf08      	it	eq
    428a:	3d01      	subeq	r5, #1
    428c:	d0f7      	beq.n	427e <__aeabi_dmul+0x1c6>
    428e:	ea43 0306 	orr.w	r3, r3, r6
    4292:	4770      	bx	lr
    4294:	ea94 0f0c 	teq	r4, ip
    4298:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    429c:	bf18      	it	ne
    429e:	ea95 0f0c 	teqne	r5, ip
    42a2:	d00c      	beq.n	42be <__aeabi_dmul+0x206>
    42a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    42a8:	bf18      	it	ne
    42aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    42ae:	d1d1      	bne.n	4254 <__aeabi_dmul+0x19c>
    42b0:	ea81 0103 	eor.w	r1, r1, r3
    42b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    42b8:	f04f 0000 	mov.w	r0, #0
    42bc:	bd70      	pop	{r4, r5, r6, pc}
    42be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    42c2:	bf06      	itte	eq
    42c4:	4610      	moveq	r0, r2
    42c6:	4619      	moveq	r1, r3
    42c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    42cc:	d019      	beq.n	4302 <__aeabi_dmul+0x24a>
    42ce:	ea94 0f0c 	teq	r4, ip
    42d2:	d102      	bne.n	42da <__aeabi_dmul+0x222>
    42d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    42d8:	d113      	bne.n	4302 <__aeabi_dmul+0x24a>
    42da:	ea95 0f0c 	teq	r5, ip
    42de:	d105      	bne.n	42ec <__aeabi_dmul+0x234>
    42e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    42e4:	bf1c      	itt	ne
    42e6:	4610      	movne	r0, r2
    42e8:	4619      	movne	r1, r3
    42ea:	d10a      	bne.n	4302 <__aeabi_dmul+0x24a>
    42ec:	ea81 0103 	eor.w	r1, r1, r3
    42f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    42f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    42f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    42fc:	f04f 0000 	mov.w	r0, #0
    4300:	bd70      	pop	{r4, r5, r6, pc}
    4302:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4306:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    430a:	bd70      	pop	{r4, r5, r6, pc}

0000430c <__aeabi_ddiv>:
    430c:	b570      	push	{r4, r5, r6, lr}
    430e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4312:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4316:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    431a:	bf1d      	ittte	ne
    431c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4320:	ea94 0f0c 	teqne	r4, ip
    4324:	ea95 0f0c 	teqne	r5, ip
    4328:	f000 f8a7 	bleq	447a <__aeabi_ddiv+0x16e>
    432c:	eba4 0405 	sub.w	r4, r4, r5
    4330:	ea81 0e03 	eor.w	lr, r1, r3
    4334:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4338:	ea4f 3101 	mov.w	r1, r1, lsl #12
    433c:	f000 8088 	beq.w	4450 <__aeabi_ddiv+0x144>
    4340:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4344:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4348:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    434c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4350:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4354:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4358:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    435c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4360:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4364:	429d      	cmp	r5, r3
    4366:	bf08      	it	eq
    4368:	4296      	cmpeq	r6, r2
    436a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    436e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    4372:	d202      	bcs.n	437a <__aeabi_ddiv+0x6e>
    4374:	085b      	lsrs	r3, r3, #1
    4376:	ea4f 0232 	mov.w	r2, r2, rrx
    437a:	1ab6      	subs	r6, r6, r2
    437c:	eb65 0503 	sbc.w	r5, r5, r3
    4380:	085b      	lsrs	r3, r3, #1
    4382:	ea4f 0232 	mov.w	r2, r2, rrx
    4386:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    438a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    438e:	ebb6 0e02 	subs.w	lr, r6, r2
    4392:	eb75 0e03 	sbcs.w	lr, r5, r3
    4396:	bf22      	ittt	cs
    4398:	1ab6      	subcs	r6, r6, r2
    439a:	4675      	movcs	r5, lr
    439c:	ea40 000c 	orrcs.w	r0, r0, ip
    43a0:	085b      	lsrs	r3, r3, #1
    43a2:	ea4f 0232 	mov.w	r2, r2, rrx
    43a6:	ebb6 0e02 	subs.w	lr, r6, r2
    43aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    43ae:	bf22      	ittt	cs
    43b0:	1ab6      	subcs	r6, r6, r2
    43b2:	4675      	movcs	r5, lr
    43b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    43b8:	085b      	lsrs	r3, r3, #1
    43ba:	ea4f 0232 	mov.w	r2, r2, rrx
    43be:	ebb6 0e02 	subs.w	lr, r6, r2
    43c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    43c6:	bf22      	ittt	cs
    43c8:	1ab6      	subcs	r6, r6, r2
    43ca:	4675      	movcs	r5, lr
    43cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    43d0:	085b      	lsrs	r3, r3, #1
    43d2:	ea4f 0232 	mov.w	r2, r2, rrx
    43d6:	ebb6 0e02 	subs.w	lr, r6, r2
    43da:	eb75 0e03 	sbcs.w	lr, r5, r3
    43de:	bf22      	ittt	cs
    43e0:	1ab6      	subcs	r6, r6, r2
    43e2:	4675      	movcs	r5, lr
    43e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    43e8:	ea55 0e06 	orrs.w	lr, r5, r6
    43ec:	d018      	beq.n	4420 <__aeabi_ddiv+0x114>
    43ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    43f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    43f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    43fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    43fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    4402:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    4406:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    440a:	d1c0      	bne.n	438e <__aeabi_ddiv+0x82>
    440c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4410:	d10b      	bne.n	442a <__aeabi_ddiv+0x11e>
    4412:	ea41 0100 	orr.w	r1, r1, r0
    4416:	f04f 0000 	mov.w	r0, #0
    441a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    441e:	e7b6      	b.n	438e <__aeabi_ddiv+0x82>
    4420:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4424:	bf04      	itt	eq
    4426:	4301      	orreq	r1, r0
    4428:	2000      	moveq	r0, #0
    442a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    442e:	bf88      	it	hi
    4430:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4434:	f63f aeaf 	bhi.w	4196 <__aeabi_dmul+0xde>
    4438:	ebb5 0c03 	subs.w	ip, r5, r3
    443c:	bf04      	itt	eq
    443e:	ebb6 0c02 	subseq.w	ip, r6, r2
    4442:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4446:	f150 0000 	adcs.w	r0, r0, #0
    444a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    444e:	bd70      	pop	{r4, r5, r6, pc}
    4450:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4454:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4458:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    445c:	bfc2      	ittt	gt
    445e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4466:	bd70      	popgt	{r4, r5, r6, pc}
    4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    446c:	f04f 0e00 	mov.w	lr, #0
    4470:	3c01      	subs	r4, #1
    4472:	e690      	b.n	4196 <__aeabi_dmul+0xde>
    4474:	ea45 0e06 	orr.w	lr, r5, r6
    4478:	e68d      	b.n	4196 <__aeabi_dmul+0xde>
    447a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    447e:	ea94 0f0c 	teq	r4, ip
    4482:	bf08      	it	eq
    4484:	ea95 0f0c 	teqeq	r5, ip
    4488:	f43f af3b 	beq.w	4302 <__aeabi_dmul+0x24a>
    448c:	ea94 0f0c 	teq	r4, ip
    4490:	d10a      	bne.n	44a8 <__aeabi_ddiv+0x19c>
    4492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4496:	f47f af34 	bne.w	4302 <__aeabi_dmul+0x24a>
    449a:	ea95 0f0c 	teq	r5, ip
    449e:	f47f af25 	bne.w	42ec <__aeabi_dmul+0x234>
    44a2:	4610      	mov	r0, r2
    44a4:	4619      	mov	r1, r3
    44a6:	e72c      	b.n	4302 <__aeabi_dmul+0x24a>
    44a8:	ea95 0f0c 	teq	r5, ip
    44ac:	d106      	bne.n	44bc <__aeabi_ddiv+0x1b0>
    44ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    44b2:	f43f aefd 	beq.w	42b0 <__aeabi_dmul+0x1f8>
    44b6:	4610      	mov	r0, r2
    44b8:	4619      	mov	r1, r3
    44ba:	e722      	b.n	4302 <__aeabi_dmul+0x24a>
    44bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    44c0:	bf18      	it	ne
    44c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    44c6:	f47f aec5 	bne.w	4254 <__aeabi_dmul+0x19c>
    44ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    44ce:	f47f af0d 	bne.w	42ec <__aeabi_dmul+0x234>
    44d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    44d6:	f47f aeeb 	bne.w	42b0 <__aeabi_dmul+0x1f8>
    44da:	e712      	b.n	4302 <__aeabi_dmul+0x24a>

000044dc <__aeabi_d2f>:
    44dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    44e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    44e4:	bf24      	itt	cs
    44e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    44ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    44ee:	d90d      	bls.n	450c <__aeabi_d2f+0x30>
    44f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    44f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    44f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    44fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4500:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4504:	bf08      	it	eq
    4506:	f020 0001 	biceq.w	r0, r0, #1
    450a:	4770      	bx	lr
    450c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4510:	d121      	bne.n	4556 <__aeabi_d2f+0x7a>
    4512:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4516:	bfbc      	itt	lt
    4518:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    451c:	4770      	bxlt	lr
    451e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4522:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4526:	f1c2 0218 	rsb	r2, r2, #24
    452a:	f1c2 0c20 	rsb	ip, r2, #32
    452e:	fa10 f30c 	lsls.w	r3, r0, ip
    4532:	fa20 f002 	lsr.w	r0, r0, r2
    4536:	bf18      	it	ne
    4538:	f040 0001 	orrne.w	r0, r0, #1
    453c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4540:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4544:	fa03 fc0c 	lsl.w	ip, r3, ip
    4548:	ea40 000c 	orr.w	r0, r0, ip
    454c:	fa23 f302 	lsr.w	r3, r3, r2
    4550:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4554:	e7cc      	b.n	44f0 <__aeabi_d2f+0x14>
    4556:	ea7f 5362 	mvns.w	r3, r2, asr #21
    455a:	d107      	bne.n	456c <__aeabi_d2f+0x90>
    455c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4560:	bf1e      	ittt	ne
    4562:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4566:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    456a:	4770      	bxne	lr
    456c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4578:	4770      	bx	lr
    457a:	bf00      	nop

0000457c <__libc_init_array>:
    457c:	b570      	push	{r4, r5, r6, lr}
    457e:	4e0d      	ldr	r6, [pc, #52]	; (45b4 <__libc_init_array+0x38>)
    4580:	4c0d      	ldr	r4, [pc, #52]	; (45b8 <__libc_init_array+0x3c>)
    4582:	1ba4      	subs	r4, r4, r6
    4584:	10a4      	asrs	r4, r4, #2
    4586:	2500      	movs	r5, #0
    4588:	42a5      	cmp	r5, r4
    458a:	d109      	bne.n	45a0 <__libc_init_array+0x24>
    458c:	4e0b      	ldr	r6, [pc, #44]	; (45bc <__libc_init_array+0x40>)
    458e:	4c0c      	ldr	r4, [pc, #48]	; (45c0 <__libc_init_array+0x44>)
    4590:	f000 f8fc 	bl	478c <_init>
    4594:	1ba4      	subs	r4, r4, r6
    4596:	10a4      	asrs	r4, r4, #2
    4598:	2500      	movs	r5, #0
    459a:	42a5      	cmp	r5, r4
    459c:	d105      	bne.n	45aa <__libc_init_array+0x2e>
    459e:	bd70      	pop	{r4, r5, r6, pc}
    45a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    45a4:	4798      	blx	r3
    45a6:	3501      	adds	r5, #1
    45a8:	e7ee      	b.n	4588 <__libc_init_array+0xc>
    45aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    45ae:	4798      	blx	r3
    45b0:	3501      	adds	r5, #1
    45b2:	e7f2      	b.n	459a <__libc_init_array+0x1e>
    45b4:	00004798 	.word	0x00004798
    45b8:	00004798 	.word	0x00004798
    45bc:	00004798 	.word	0x00004798
    45c0:	0000479c 	.word	0x0000479c
    45c4:	682f2e2e 	.word	0x682f2e2e
    45c8:	702f6c70 	.word	0x702f6c70
    45cc:	2f74726f 	.word	0x2f74726f
    45d0:	5f6c7068 	.word	0x5f6c7068
    45d4:	6f697067 	.word	0x6f697067
    45d8:	7361625f 	.word	0x7361625f
    45dc:	00682e65 	.word	0x00682e65
    45e0:	682f2e2e 	.word	0x682f2e2e
    45e4:	732f6c61 	.word	0x732f6c61
    45e8:	682f6372 	.word	0x682f6372
    45ec:	615f6c61 	.word	0x615f6c61
    45f0:	735f6364 	.word	0x735f6364
    45f4:	2e636e79 	.word	0x2e636e79
    45f8:	00000063 	.word	0x00000063
    45fc:	682f2e2e 	.word	0x682f2e2e
    4600:	732f6c61 	.word	0x732f6c61
    4604:	682f6372 	.word	0x682f6372
    4608:	715f6c61 	.word	0x715f6c61
    460c:	5f697073 	.word	0x5f697073
    4610:	636e7973 	.word	0x636e7973
    4614:	0000632e 	.word	0x0000632e

00004618 <_adcs>:
    4618:	00000000 02030000 04441800 00000000     ..........D.....
    4628:	00000000 00010001 00000000 18000203     ................
    4638:	00000444 00000000 00010000 682f2e2e     D............./h
    4648:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    4658:	00000000                                ....

0000465c <_ccl_reg_cfgs>:
    465c:	00444400 00044400 16044402 00044400     .DD..D...D...D..
    466c:	00000000                                ....

00004670 <user_mux_confs>:
	...
    469c:	00000001 00000000 01000000 00000100     ................
	...

000046b4 <channel_confs>:
    46b4:	42744229 00000000 00000000 00000000     )BtB............
	...

000046f4 <interrupt_cfg>:
	...
    4774:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    4784:	69707371 0000632e                       qspi.c..

0000478c <_init>:
    478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    478e:	bf00      	nop
    4790:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4792:	bc08      	pop	{r3}
    4794:	469e      	mov	lr, r3
    4796:	4770      	bx	lr

00004798 <__init_array_start>:
    4798:	00000289 	.word	0x00000289

0000479c <_fini>:
    479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    479e:	bf00      	nop
    47a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    47a2:	bc08      	pop	{r3}
    47a4:	469e      	mov	lr, r3
    47a6:	4770      	bx	lr

000047a8 <__fini_array_start>:
    47a8:	00000265 	.word	0x00000265
